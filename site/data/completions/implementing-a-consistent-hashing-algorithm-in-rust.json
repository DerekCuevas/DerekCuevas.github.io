{
 "model": "gpt-3.5-turbo-0301",
 "prompt": [
  {
   "role": "user",
   "content": "You are the author of a personal technical blog about software engineering and computer science subjects."
  },
  {
   "role": "user",
   "content": "New topics for blog posts should be based off of the technical skills, experience, and interests presented in the following resume:\n+++\ntitle = \"Résumé\"\ndescription = \"Derek Cuevas' Résumé\"\ndate = \"2023-06-11\"\nor = \"Derek Cuevas\"\n+++\n\n# Derek Cuevas\n\n[GitHub](https://github.com/derekcuevas) (contact email in bio) \n\n---\n\n## Summary\n\nSenior Software Engineer with 8 years of professional experience, specializing in systems software engineering and low-latency, real-time product development.\n\nExperienced in leading teams and delivering Emmy award-winning projects. Passionate about functional programming and building high performance real-time systems. Skilled in a variety of programming languages and technologies with expertise in [Rust](https://www.rust-lang.org/) and [TypeScript](https://www.typescriptlang.org/).\n\n---\n\n## Programming Languages\n\n- **Proficient:** Rust, TypeScript (& JavaScript), Clojure, Elm\n- **Experienced:** Swift, Elixir, Objective-C, SQL\n\n---\n\n## Technologies, Skills, and Interests\n\n- **Rust:** Tokio, Futures, Hyper, Actix, Warp\n- **Platforms and Services:** AWS, Docker,  PostgreSQL, Redis, Apache Pulsar, RabbitMQ, Prometheus, GitLab CI/CD, Node.js, Deno, HTML & CSS\n- **Tooling:** Git, Vim, Bash\n- **Frameworks:** React, React Native, Redux, RxJs, SwiftUI, Phoenix\n- **Protocols:** HTTP, GraphQL, WebSockets, ØMQ, Pub/Sub, JSON, MessagePack, Protobuf, FlatBuffers\n- **Paradigms:** Functional Programming, Real-time Systems\n\n---\n\n## Professional Experience\n\n### Senior Software Engineer II (Lead), Second Spectrum (acquired by Genius Sports)\n(*January 2021 - Current*)\n\n[https://geniussports.com/](https://geniussports.com/)\n\n- Technical lead for the \"Real-time Augmentation Engine\" project's system team, developing low-latency and real-time augmented reality experiences for live TV broadcasters of sporting events.\n- Led the development and integration of core systems using `Rust`, `Tokio`, `MPSC channels`, `FFmpeg`, and `Pulsar`.\n- Oversaw operational management and monitoring systems, release management, simulation systems, and data ingestion/export pipelines.\n- Optimized the overall pipeline for 60fps real-time rendering over high definition broadcast feeds.\n- Key contributor to projects recognized with multiple Emmy awards, including the prestigious [George Wensel Technical Achievement Award](https://geniussports.com/customer-stories/cbs-and-genius-win-sports-emmy-for-romovision/) and Amazon's [Outstanding Interactive Experience](https://www.aboutamazon.com/news/entertainment/thursday-night-football-on-prime-video-wins-sports-emmy-award) at the `Sports Emmys`.\n\n### Senior Software Engineer I (Lead), Second Spectrum\n(*January 2019 - January 2021*)\n\n[https://www.secondspectrum.com/](https://www.secondspectrum.com/)\n\n- Led a team in designing and developing the company's first `GraphQL` service serving as a unified gateway for various microservices. Built upon the `Apollo` server framework leveraging `Node.js`, `TypeScript`, `PostgreSQL`, and `Redis` for caching and pub/sub.\n- Developed a dashboard built with `Three.js` for visualizing 3D player tracking datasets and highlighting data discrepancies.\n- Created a prototype `iOS` application for video highlights using `Swift`, `SwiftUI`, and the `Combine` framework.\n- Mentored interns and fellow engineers, fostering collaboration and knowledge sharing.\n\n### Software Engineer, Second Spectrum\n(*August 2016 - January 2019*)\n\n[https://www.secondspectrum.com/](https://www.secondspectrum.com/)\n\n- Developed the operational and quality assurance management application for the company's optical player tracking system. Stack included `Elixir` (with the `Phoenix` framework), `React`, and heavy use of `WebSockets` to sync and display corrections to operators in near real-time.\n- Improved operator efficiency by 100% through the implementation of an automated task selection system.\n- Led the development of the LA Clipper's live streaming web and mobile application \"Clippers CourtVision\". Stack included `Elm` for the web front-end and `React Native` for the mobile app.\n\n### Software Engineer Intern, MindGraph Medical\n(*September 2015 - January 2016*)\n\n- Designed, developed, and deployed the MindGraph Medical website using `Node.js`, `jQuery`, and `Bootstrap`.\n\n---\n\n## Education\n\n**B.S. Computer Science, San Diego State University, San Diego**\n\n(*Class of 2016*)\n\n- [Advanced Certificate in Web and Mobile Applications Development](https://cs.sdsu.edu/about/)\n\n---\n\n## Personal Projects\n\n- [FYGT](https://github.com/DerekCuevas/derekcuevas.github.io): An experimental blog built with `Hugo`, `Deno`, and `ChatGPT`.\n- [Advent of Code 2022](https://github.com/DerekCuevas/advent-of-code-2022): Solutions to Advent of Code programming problems using functional approaches in `Clojure`.\n- [Interview Cake Algorithms Problem Set](https://github.com/DerekCuevas/interview-cake-clj): Solutions to the interview cake programming problems also by exploring functional approaches in `Clojure`.\n- [Friend List](https://github.com/DerekCuevas/friend-list): A non-trivial programming challenge exploring asynchronous side effects with different programming patterns.\n- [Redux Meta Reducer](https://github.com/DerekCuevas/redux-meta-reducer): A `Redux` higher-order reducer for simplifying the state of fetched data.\n- [Avowal](https://github.com/DerekCuevas/avowal): An asynchronous form validation library for `JavaScript`.\n"
  },
  {
   "role": "user",
   "content": "Your previous 60 posts include: \"Understanding Protocol Buffers Wire Format: A Comprehensive Guide\", \"Understanding Tail-Recursion in Elixir\", \"Exploring Kubernetes StatefulSets: A Comprehensive Guide\", \"The Science of Machine Learning: Explaining the Bias-Variance Tradeoff\", \"Mastering Advanced Feature-Driven Development: A Comprehensive Guide\", \"Mastering the Elm Architecture: A Comprehensive Guide\", \"Exploring the Rust Standard Library's `net` Module\", \"Understanding the Rust Trait System: A Comprehensive Guide\", \"Mastering Rust's Concurrency Primitives: A Comprehensive Guide\", \"Building High-Performance Microservices with Rust's Actix-Web Framework\", \"Advanced Techniques for Building Serverless Applications with AWS Lambda\", \"Mastering HTTP/2 Server Push: A Comprehensive Guide\", \"Building Scalable Real-Time Applications with Warp in Rust\", \"Mastering Event Sourcing and CQRS: A Comprehensive Guide\", \"The Power of Rust's Ownership System: A Comprehensive Guide\", \"Mastering React Component Lifecycles: A Comprehensive Guide\", \"Practical Techniques for Working with Swift Optionals\", \"Mastering the Decorator Pattern in Clojure\", \"Understanding the Rust Standard Library's `time` Module\", \"The Power of Deno's Built-in Web Server\", \"Mastering Advanced TypeScript Patterns\", \"The Power of Kotlin's Inline Functions\", \"The Power of Rust's const_fn Feature\", \"Understanding the Power of Rust's `Option` Type\", \"Understanding the Principles of Event-Driven Architecture\", \"Mastering the Observer Pattern with Objective-C\", \"The Power of Clojure's Transducers: A Comprehensive Guide\", \"Understanding TypeScript's Union Types\", \"Mastering the Asynchronous Programming in Clojure\", \"Advanced Techniques for Scaling Distributed Systems with Apache Flink\", \"Understanding Rust's String Types\", \"Advanced Error Handling with Rust's Result Type\", \"Building Custom Data Types with Rust's derive Macro\", \"Writing Type-Safe Code with TypeScript's unknown Type\", \"Building High-Performance Websites with Deno\", \"Advanced Techniques for Implementing the Decorator Design Pattern in Rust\", \"Building Robust and Secure GraphQL Servers with Rust\", \"Advanced Techniques for Working with WebSockets in Rust\", \"Understanding the Principles of Reactive Programming in Java\", \"The Power of Rust's Const Generics\", \"Mastering Rust's Parallel Iterator: A Comprehensive Guide\", \"Exploring Advanced Types in TypeScript: Mapped & Conditional Types\", \"Exploring the Rust Standard Library's `io` Module\", \"Mastering the Decorator Pattern in TypeScript\", \"Mastering Protocol Buffers in Rust\", \"Mastering Rust's Memory Allocation System\", \"Modern Web Development with SwiftNIO\", \"Mastering Rust's Result Type\", \"Building High-Performance Machine Learning Pipelines with Rust\", \"Advanced Techniques for Working with PostgreSQL Arrays\", \"Mastering HTML and CSS Accessibility: A Comprehensive Guide\", \"Mastering Apache Pulsar's Message Retention Policy\", \"Mastering TypeScript's Record Type\", \"Mastering Rust's Async/Await Syntax\", \"Mastering the Decorator Pattern in Rust\", \"The Power of Rust's Multithreading Library: A Comprehensive Guide\", \"Mastering the Svelte Framework: A Comprehensive Guide\", \"Best Practices for Integrating React and TypeScript\", \"Deep Dive into Functional Reactive Programming with RxJS\", \"Understanding Java Memory Model: A Comprehensive Guide\""
  },
  {
   "role": "user",
   "content": "Come up with an advanced topic for an expert level reader that is about a particular single feature, fact, pattern, paradigm, convention, theory, framework, library, or best practice."
  },
  {
   "role": "user",
   "content": "Write a post about the chosen topic following the instructions given below:"
  },
  {
   "role": "user",
   "content": "Your writing style is academic, informative, and focused on detailed technical information."
  },
  {
   "role": "user",
   "content": "The topic should not be related to a previous post."
  },
  {
   "role": "user",
   "content": "Use computer code snippets (in the relevant programming language) in order to illustrate the information presented."
  },
  {
   "role": "user",
   "content": "Format the body of the post in the markdown markup language."
  },
  {
   "role": "user",
   "content": "Come up with a title for the post and include it on the first line."
  },
  {
   "role": "user",
   "content": "Include one to three tags for the post on the second line formatted as a comma separated list, for example: \"Tags: <tag1>, <tag2>\"."
  },
  {
   "role": "user",
   "content": "The post should be multiple sections in length."
  },
  {
   "role": "user",
   "content": "Do not include links to images in the post."
  },
  {
   "role": "user",
   "content": "Do not include contact information in the post."
  },
  {
   "role": "user",
   "content": "Do not add extra whitespace around lists."
  }
 ],
 "completion": {
  "warning": "This model version is deprecated and a newer version 'gpt-3.5-turbo-0613' is available. Migrate before September 13 to avoid disruption of service. Learn more https://platform.openai.com/docs/deprecations",
  "id": "chatcmpl-7buv8mu5joz8sGSMTEyeh5aRwHQAK",
  "object": "chat.completion",
  "created": 1689271294,
  "model": "gpt-3.5-turbo-0301",
  "choices": [
   {
    "index": 0,
    "message": {
     "role": "assistant",
     "content": "Title: Implementing a Consistent Hashing Algorithm in Rust\n\nTags: Rust, Algorithms, Consistent Hashing\n\n---\n\nConsistent Hashing is a popular algorithm used in distributed systems for data partitioning and load balancing. It provides a way for distributed systems to efficiently scale and handle high volumes of data and requests. In this post, we'll go over the basics of Consistent Hashing and implement it in Rust.\n\n## What is Consistent Hashing?\n\nConsistent Hashing is a technique used in distributed systems to hash keys onto a ring of nodes. This ring is partitioned into slots, and each node is assigned one or more slots. When a key needs to be accessed, its hash is calculated, and the corresponding slot on the ring is located. The data associated with that key is then looked up on the node assigned to that slot.\n\nOne of the key benefits of Consistent Hashing is that it is resilient to node failures and additions. As nodes are added or removed from the system, the load is redistributed across the nodes in a smooth and efficient manner. Only the data assigned to the affected nodes needs to be moved.\n\n## Implementing Consistent Hashing in Rust\n\nWe can start by implementing a simple hash function that takes a key and returns a u64:\n\n```rust\nfn hash(key: &str) -> u64 {\n    let mut hasher = DefaultHasher::new();\n    key.hash(&mut hasher);\n    hasher.finish()\n}\n```\n\nThe `DefaultHasher` is a built-in hash function in Rust’s standard library. Now we can use the hash function to assign nodes to slots on the ring:\n\n```rust\nstruct Node<'a> {\n    name: &'a str,\n    slots: Vec<u64>,\n}\n\nimpl<'a> Node<'a> {\n    fn new(name: &'a str) -> Node<'a> {\n        Node {\n            name,\n            slots: Vec::new(),\n        }\n    }\n\n    fn add_slot(&mut self, slot: u64) {\n        self.slots.push(slot);\n    }\n\n    fn remove_slot(&mut self, slot: u64) {\n        if let Some(idx) = self.slots.iter().position(|x| *x == slot) {\n            self.slots.remove(idx);\n        }\n    }\n}\n\nstruct Ring<'a> {\n    nodes: BTreeMap<u64, Node<'a>>,\n}\n\nimpl<'a> Ring<'a> {\n    fn new() -> Ring<'a> {\n        Ring {\n            nodes: BTreeMap::new(),\n        }\n    }\n\n    fn add_node(&mut self, name: &'a str) {\n        let node = Node::new(name);\n        self.nodes.insert(hash(name), node);\n    }\n\n    fn remove_node(&mut self, name: &'a str) {\n        self.nodes.remove(&hash(name));\n    }\n}\n```\n\nIn our example, we create a `Node` that contains a name and an array of `slots`. We then create a `Ring` using a `BTreeMap` with the key being the `hash(name)` and the value being the `Node`. The `add_node` method adds a new node to the ring, and the `remove_node` method removes a node from the ring.\n\nNext, we need to implement the algorithm for locating the node and slot for a given key:\n\n```rust\nfn locate<'a>(&'a self, key: &str) -> Option<(&'a str, u64)> {\n    if self.nodes.is_empty() {\n        return None;\n    }\n\n    let key_hash = hash(key);\n    let node = self\n        .nodes\n        .range((Included(&key_hash), Unbounded))\n        .next()\n        .or_else(|| self.nodes.iter().next());\n\n    if let Some((_, node)) = node {\n        let slot = node\n            .slots\n            .iter()\n            .find(|&&slot| slot >= key_hash)\n            .unwrap_or_else(|| &node.slots[0]);\n\n        Some((node.name, *slot))\n    } else {\n        None\n    }\n}\n```\n\nWe first check that the ring is not empty. We then use `range` to find the next node starting from the hash of the key. If there is no next node, the first node in the list is used instead. Once we have the node, we find the slot on that node that is greater than or equal to the hash of the key. If no such slot exists, we wrap back around to the beginning of the ring.\n\n## Conclusion\n\nConsistent Hashing is a useful algorithm for improving the scalability and resilience of distributed systems. In this post, we implemented a simple Consistent Hashing algorithm in Rust. Our implementation uses a `BTreeMap` to store the ring of nodes and `hash(name)` to map nodes to slots on the ring."
    },
    "finish_reason": "stop"
   }
  ],
  "usage": {
   "prompt_tokens": 2210,
   "completion_tokens": 999,
   "total_tokens": 3209
  }
 }
}
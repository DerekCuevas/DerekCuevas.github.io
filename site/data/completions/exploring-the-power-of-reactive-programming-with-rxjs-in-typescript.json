{
 "prompt": [
  {
   "role": "system",
   "content": "You are the author of a personal technical blog about software engineering and computer science subjects."
  },
  {
   "role": "system",
   "content": "New topics for blog posts should be based off of the technical skills, experience, and interests presented in the following resume:\n+++\ntitle = \"Résumé\"\ndescription = \"Derek Cuevas' Résumé\"\ndate = \"2023-06-11\"\nor = \"Derek Cuevas\"\n+++\n\n# Derek Cuevas\n\n[GitHub](https://github.com/derekcuevas) (contact email in bio) \n\n---\n\n## Summary\n\nSenior Software Engineer with 8 years of professional experience, specializing in systems software engineering and low-latency, real-time product development.\n\nExperienced in leading teams and delivering Emmy award-winning projects. Passionate about functional programming and building high performance real-time systems. Skilled in a variety of programming languages and technologies with expertise in [Rust](https://www.rust-lang.org/) and [TypeScript](https://www.typescriptlang.org/).\n\n---\n\n## Programming Languages\n\n- **Proficient:** Rust, TypeScript (& JavaScript), Clojure, Elm\n- **Experienced:** Swift, Elixir, Objective-C, SQL\n\n---\n\n## Technologies, Skills, and Interests\n\n- **Rust:** Tokio, Futures, Hyper, Actix, Warp\n- **Platforms and Services:** AWS, Docker,  PostgreSQL, Redis, Apache Pulsar, RabbitMQ, Prometheus, GitLab CI/CD, Node.js, Deno, HTML & CSS\n- **Tooling:** Git, Vim, Bash\n- **Frameworks:** React, React Native, Redux, RxJs, SwiftUI, Phoenix\n- **Protocols:** HTTP, GraphQL, WebSockets, ØMQ, Pub/Sub, JSON, MessagePack, Protobuf, FlatBuffers\n- **Paradigms:** Functional Programming, Real-time Systems\n\n---\n\n## Professional Experience\n\n### Senior Software Engineer II (Lead), Second Spectrum (acquired by Genius Sports)\n(*January 2021 - Current*)\n\n[https://geniussports.com/](https://geniussports.com/)\n\n- Technical lead for the \"Real-time Augmentation Engine\" project's system team, developing low-latency and real-time augmented reality experiences for live TV broadcasters of sporting events.\n- Led the development and integration of core systems using `Rust`, `Tokio`, `MPSC channels`, `FFmpeg`, and `Pulsar`.\n- Oversaw operational management and monitoring systems, release management, simulation systems, and data ingestion/export pipelines.\n- Optimized the overall pipeline for 60fps real-time rendering over high definition broadcast feeds.\n- Key contributor to projects recognized with multiple Emmy awards, including the prestigious [George Wensel Technical Achievement Award](https://geniussports.com/customer-stories/cbs-and-genius-win-sports-emmy-for-romovision/) and Amazon's [Outstanding Interactive Experience](https://www.aboutamazon.com/news/entertainment/thursday-night-football-on-prime-video-wins-sports-emmy-award) at the `Sports Emmys`.\n\n### Senior Software Engineer I (Lead), Second Spectrum\n(*January 2019 - January 2021*)\n\n[https://www.secondspectrum.com/](https://www.secondspectrum.com/)\n\n- Led a team in designing and developing the company's first `GraphQL` service serving as a unified gateway for various microservices. Built upon the `Apollo` server framework leveraging `Node.js`, `TypeScript`, `PostgreSQL`, and `Redis` for caching and pub/sub.\n- Developed a dashboard built with `Three.js` for visualizing 3D player tracking datasets and highlighting data discrepancies.\n- Created a prototype `iOS` application for video highlights using `Swift`, `SwiftUI`, and the `Combine` framework.\n- Mentored interns and fellow engineers, fostering collaboration and knowledge sharing.\n\n### Software Engineer, Second Spectrum\n(*August 2016 - January 2019*)\n\n[https://www.secondspectrum.com/](https://www.secondspectrum.com/)\n\n- Developed the operational and quality assurance management application for the company's optical player tracking system. Stack included `Elixir` (with the `Phoenix` framework), `React`, and heavy use of `WebSockets` to sync and display corrections to operators in near real-time.\n- Improved operator efficiency by 100% through the implementation of an automated task selection system.\n- Led the development of the LA Clipper's live streaming web and mobile application \"Clippers CourtVision\". Stack included `Elm` for the web front-end and `React Native` for the mobile app.\n\n### Software Engineer Intern, MindGraph Medical\n(*September 2015 - January 2016*)\n\n- Designed, developed, and deployed the MindGraph Medical website using `Node.js`, `jQuery`, and `Bootstrap`.\n\n---\n\n## Education\n\n**B.S. Computer Science, San Diego State University, San Diego**\n\n(*Class of 2016*)\n\n- [Advanced Certificate in Web and Mobile Applications Development](https://cs.sdsu.edu/about/)\n\n---\n\n## Personal Projects\n\n- [FYGT](https://github.com/DerekCuevas/derekcuevas.github.io): An experimental blog built with `Hugo`, `Deno`, and `ChatGPT`.\n- [Advent of Code 2022](https://github.com/DerekCuevas/advent-of-code-2022): Solutions to Advent of Code programming problems using functional approaches in `Clojure`.\n- [Interview Cake Algorithms Problem Set](https://github.com/DerekCuevas/interview-cake-clj): Solutions to the interview cake programming problems also by exploring functional approaches in `Clojure`.\n- [Friend List](https://github.com/DerekCuevas/friend-list): A non-trivial programming challenge exploring asynchronous side effects with different programming patterns.\n- [Redux Meta Reducer](https://github.com/DerekCuevas/redux-meta-reducer): A `Redux` higher-order reducer for simplifying the state of fetched data.\n- [Avowal](https://github.com/DerekCuevas/avowal): An asynchronous form validation library for `JavaScript`.\n"
  },
  {
   "role": "system",
   "content": "Your previous 60 posts include: \"Exploring the Power of Rust's Actix Web Framework for Building Real-Time Web Applications\", \"Exploring the Performance Benefits of Rust's Actix Web Framework for Building High-Performance Web Applications\", \"Exploring the Power of Rust's Tokio Framework for Building Asynchronous Applications\", \"Exploring the Power of Rust's Actix Web Framework for Building High-Performance Web Applications\", \"Understanding the Power of Rust's Actix actors for Concurrency and Scalability\", \"Exploring the Power of Rust's Actix-Web Framework for Building High-Performance Web Applications\", \"Exploring the Power of Rust's tokio Framework for Asynchronous Programming\", \"Exploring the Power of Differential Privacy in Data Analysis\", \"Exploring the Performance Benefits of ZeroMQ Pub/Sub Pattern\", \"Exploring the Performance Benefits of Reactive Programming in Rust\", \"Exploring the Power of React Hooks for State Management\", \"Designing Highly Available Systems with Active-Active Architecture\", \"Exploring the Power of Actors in Concurrent Systems\", \"Exploring the Asynchronous Execution Models in Rust\", \"How to Implement Optimistic Concurrency Control in Your Web Applications\", \"Building a Scalable and Secure Authorization System with Keycloak\", \"A Deep Dive into Rust's Ownership Model\", \"Best Practices for Building a High-Performance Web Application with Node.js\", \"Generating Synthetic Data with Python's Faker Library\", \"Understanding Rust's Unsafe Keyword\", \"How to use Access Control in Go\", \"Building a High-Performance Event Store with Apache Kafka\", \"Building a Highly Scalable Kafka Consumer in Go\", \"Building Type-Safe APIs with TypeScript\", \"Implementing the Flyweight Design Pattern in C\", \"Gaining Insights from Large Datasets Using Delta Lake\", \"Using the Observer Design Pattern in Scala\", \"The Builder Design Pattern in TypeScript\", \"Using Array Partitions in Python for Improved Performance\", \"Advanced Techniques for Debugging Rust Programs\", \"Writing a Domain-Specific Language (DSL) in Haskell\", \"Securely Managing Secrets in Production Applications\", \"Implementing the Factory Method Design Pattern in Dart\", \"Boosting Rust Performance with Allocator Selection\", \"Building Real-Time Audio Applications with WebRTC and Rust\", \"Rust's Pinning API: A Comprehensive Guide\", \"Building a Highly Scalable and Fault-Tolerant Load Balancer with Rust\", \"How to Use AWS Fargate for Highly Scalable and Serverless Containers\", \"How to Build a Recommendation Engine with Apache Spark\", \"Building a Distributed Key-Value Store on Top of Apache Kafka\", \"Building a GraphQL API with Actix-Web and Diesel\", \"Building a High-Performance HTTP Proxy with Nginx\", \"How to Use Kafka to Build Scalable and Fault-Tolerant Distributed Systems\", \"Advanced Techniques for Using PostgreSQL JSONB Data Type\", \"Writing Secure Rust Code: A Deep Dive into Memory Safety\", \"Fine-tuning BERT for Question Answering - A Step-by-Step Guide\", \"How to Use the Decorator Pattern for Flexible and Extensible Code\", \"A Deep Dive into Multithreading with Clojure\", \"How to Design Reactive Microservices Using Event-Driven Architecture\", \"Writing Efficient SQL Queries: Tips and Tricks\", \"Mastering Connection Pooling in Django\", \"Mastering the Actor Model Concurrency Paradigm in Elixir\", \"How to use Elm to build maintainable, efficient, and bug-free front-end applications\", \"How to Use Generators to Create Infinite Sequences in Python\", \"Building High Performance Distributed Data Pipelines with Apache Flink\", \"Implementing a Consistent Hashing Algorithm in TypeScript\", \"The Event Sourcing Design Pattern in TypeScript\", \"How to Write Fast Python Code\", \"Building a High-Availability Microservice Architecture with Modern C++\", \"How to Build a Realtime Collaborative Spreadsheet Application with Elixir and Phoenix LiveView\""
  },
  {
   "role": "user",
   "content": "Come up with an advanced topic for an expert level reader that is about a particular single feature, fact, pattern, paradigm, convention, theory, framework, library, or best practice."
  },
  {
   "role": "user",
   "content": "Write a post about the chosen topic following the instructions given below:"
  },
  {
   "role": "user",
   "content": "Your writing style is academic, informative, and focused on detailed technical information."
  },
  {
   "role": "user",
   "content": "The topic should not be related to a previous post."
  },
  {
   "role": "user",
   "content": "Use computer code snippets (in the relevant programming language) in order to illustrate the information presented."
  },
  {
   "role": "user",
   "content": "Format the body of the post in the markdown markup language."
  },
  {
   "role": "user",
   "content": "Come up with a title for the post and include it on the first line."
  },
  {
   "role": "user",
   "content": "Include one to three tags for the post on the second line formatted as a comma separated list, for example: \"Tags: <tag1>, <tag2>\"."
  },
  {
   "role": "user",
   "content": "The post should be multiple sections in length."
  },
  {
   "role": "user",
   "content": "Do not include links to images in the post."
  },
  {
   "role": "user",
   "content": "Do not include contact information in the post."
  },
  {
   "role": "user",
   "content": "Do not add extra whitespace around lists."
  }
 ],
 "completion": {
  "id": "chatcmpl-7TlCloQy2VdkVUWRHqSsmf7KEeVwr",
  "object": "chat.completion",
  "created": 1687327323,
  "model": "gpt-3.5-turbo-0613",
  "choices": [
   {
    "index": 0,
    "message": {
     "role": "assistant",
     "content": "Title: Exploring the Power of Reactive Programming with RxJS in TypeScript\n\nTags: Reactive Programming, RxJS, TypeScript\n\n---\n\nReactive programming is a powerful paradigm that enables the development of highly responsive and scalable applications. With the advent of modern web development, reactive programming has gained significant popularity, and RxJS has emerged as a leading library for implementing reactive programming in TypeScript.\n\nIn this post, we will explore the power of reactive programming with RxJS and how it can revolutionize the way we build applications. We'll cover the fundamental concepts of reactive programming, demonstrate how to leverage RxJS to create reactive streams, and highlight common use cases and best practices.\n\n## Table of Contents\n\n1. Introduction to Reactive Programming\n2. Getting Started with RxJS\n3. Creating Observables\n4. Transforming and Filtering Streams\n5. Combining Multiple Streams\n6. Error Handling and Recovery\n7. Managing Resources with Operators\n8. Implementing Backpressure and Debouncing\n9. Testing Reactive Code\n10. Best Practices for Reactive Programming in TypeScript\n\n## 1. Introduction to Reactive Programming\n\nReactive programming is a programming paradigm that allows us to capture and represent asynchronous data and events as streams. It provides a declarative way of handling data flow and enables us to react to changes in real-time, making our applications more responsive and efficient.\n\n## 2. Getting Started with RxJS\n\nRxJS is a powerful reactive programming library that provides a rich set of operators and features to handle asynchronous streams. To start using RxJS, we need to install it via NPM:\n\n```bash\nnpm install rxjs\n```\n\nOnce installed, we can import and use its functionalities in our TypeScript projects.\n\n## 3. Creating Observables\n\nObservables are the foundation of reactive programming in RxJS. They represent a stream of data or events that can be observed and transformed. We can create observables from various data sources such as events, HTTP requests, and timers.\n\n```typescript\nimport { Observable } from 'rxjs';\n\nconst observable = new Observable((subscriber) => {\n  subscriber.next('Hello');\n  subscriber.next('World');\n  subscriber.complete();\n});\n\nobservable.subscribe((value) => console.log(value));\n```\n\n## 4. Transforming and Filtering Streams\n\nOne of the key features of RxJS is its rich set of operators for transforming and filtering streams. These operators allow us to manipulate the data emitted by observables, apply transformations, and perform filtering operations.\n\n```typescript\nimport { of } from 'rxjs';\nimport { map, filter } from 'rxjs/operators';\n\nof(1, 2, 3, 4, 5)\n  .pipe(\n    map((value) => value * 2),\n    filter((value) => value > 5)\n  )\n  .subscribe((value) => console.log(value));\n```\n\n## 5. Combining Multiple Streams\n\nRxJS provides operators to combine multiple streams and perform operations such as merging, concatenating, and zippling them. This allows us to handle complex scenarios where we need to combine data from different sources.\n\n```typescript\nimport { merge, of, interval } from 'rxjs';\nimport { mapTo } from 'rxjs/operators';\n\nconst source1$ = of('A', 'B', 'C');\nconst source2$ = interval(1000).pipe(mapTo('X'));\n\nmerge(source1$, source2$).subscribe((value) => console.log(value));\n```\n\n## 6. Error Handling and Recovery\n\nIn reactive programming, it's important to handle errors gracefully. RxJS provides operators for error handling, which allows us to catch, recover, and gracefully propagate errors within our streams.\n\n```typescript\nimport { throwError } from 'rxjs';\nimport { catchError } from 'rxjs/operators';\n\nthrowError(new Error('Oops!'))\n  .pipe(\n    catchError((error) => {\n      console.error('An error occurred:', error.message);\n      return of('Default Value');\n    })\n  )\n  .subscribe((value) => console.log(value));\n```\n\n## 7. Managing Resources with Operators\n\nWhen working with resources such as HTTP requests or database connections, it's essential to manage them properly. RxJS provides operators like `switchMap`, `mergeMap`, and `concatMap` to handle resource management efficiently.\n\n```typescript\nimport { of, interval } from 'rxjs';\nimport { take, switchMap } from 'rxjs/operators';\n\ninterval(1000)\n  .pipe(\n    take(5),\n    switchMap((value) => of(value * 2))\n  )\n  .subscribe((value) => console.log(value));\n```\n\n## 8. Implementing Backpressure and Debouncing\n\nBackpressure is a technique that allows us to control the rate at which data is emitted by an observable. RxJS offers various strategies for handling backpressure, such as buffering, dropping, or emitting the latest value.\n\n```typescript\nimport { interval } from 'rxjs';\nimport { throttleTime } from 'rxjs/operators';\n\ninterval(100)\n  .pipe(throttleTime(1000))\n  .subscribe((value) => console.log(value));\n```\n\n## 9. Testing Reactive Code\n\nTesting reactive code can be challenging due to its asynchronous nature. RxJS provides utilities and testing operators that simplify the process of testing observables, ensuring that our reactive code behaves as expected.\n\n```typescript\nimport { of } from 'rxjs';\nimport { map } from 'rxjs/operators';\n\nof(1, 2, 3)\n  .pipe(\n    map((value) => value * 2)\n  )\n  .subscribe({\n    next: (value) => console.log(value),\n    complete: () => console.log('Complete'),\n  });\n```\n\n## 10. Best Practices for Reactive Programming in TypeScript\n\nTo effectively leverage reactive programming with RxJS in TypeScript, it's important to follow best practices. We'll cover topics such as handling subscriptions, memory management, error handling, and optimization techniques to write clean and efficient code.\n\n---\n\nReactive programming with RxJS in TypeScript opens up a world of possibilities for building responsive and scalable applications. By leveraging the power of reactive streams and operators, we can handle complex data flows with ease. This post has provided an overview of the key concepts and features of RxJS, allowing you to dive deeper into the world of reactive programming in TypeScript.\n\nStart exploring the power of reactive programming with RxJS today and unlock the full potential of your applications!"
    },
    "finish_reason": "stop"
   }
  ],
  "usage": {
   "prompt_tokens": 2296,
   "completion_tokens": 1312,
   "total_tokens": 3608
  }
 }
}
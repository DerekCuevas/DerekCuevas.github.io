{
 "prompt": [
  {
   "role": "system",
   "content": "You are the author of a personal technical blog about software engineering and computer science subjects."
  },
  {
   "role": "system",
   "content": "Write as though you are the author of this resume:\n+++\ntitle = \"Résumé\"\ndescription = \"Derek Cuevas' Résumé\"\ndate = \"2023-06-11\"\nor = \"Derek Cuevas\"\n+++\n\n# Derek Cuevas\n\n[GitHub](https://github.com/derekcuevas) (contact email in bio) \n\n---\n\n## Summary\n\nSenior Software Engineer with 8 years of professional experience, specializing in systems software engineering and low-latency, real-time product development.\n\nExperienced in leading teams and delivering Emmy award-winning projects. Passionate about functional programming and building high performance real-time systems. Skilled in a variety of programming languages and technologies with expertise in [Rust](https://www.rust-lang.org/) and [TypeScript](https://www.typescriptlang.org/).\n\n---\n\n## Programming Languages\n\n- **Proficient:** Rust, TypeScript (& JavaScript), Clojure, Elm\n- **Experienced:** Swift, Elixir, Objective-C, SQL\n\n---\n\n## Technologies, Skills, and Interests\n\n- **Rust:** Tokio, Futures, Hyper, Actix, Warp\n- **Platforms and Services:** AWS, Docker,  PostgreSQL, Redis, Apache Pulsar, RabbitMQ, Prometheus, GitLab CI/CD, Node.js, Deno, HTML & CSS\n- **Tooling:** Git, Vim, Bash\n- **Frameworks:** React, React Native, Redux, RxJs, SwiftUI, Phoenix\n- **Protocols:** HTTP, GraphQL, WebSockets, ØMQ, Pub/Sub, JSON, MessagePack, Protobuf, FlatBuffers\n- **Paradigms:** Functional Programming, Real-time Systems\n\n---\n\n## Professional Experience\n\n### Senior Software Engineer II (Lead), Second Spectrum (acquired by Genius Sports)\n(*January 2021 - Current*)\n\n[https://geniussports.com/](https://geniussports.com/)\n\n- Technical lead for the \"Real-time Augmentation Engine\" project's system team, developing low-latency and real-time augmented reality experiences for live TV broadcasters of sporting events.\n- Led the development and integration of core systems using `Rust`, `Tokio`, `MPSC channels`, `FFmpeg`, and `Pulsar`.\n- Oversaw operational management and monitoring systems, release management, simulation systems, and data ingestion/export pipelines.\n- Optimized the overall pipeline for 60fps real-time rendering over high definition broadcast feeds.\n- Key contributor to projects recognized with multiple Emmy awards, including the prestigious [George Wensel Technical Achievement Award](https://geniussports.com/customer-stories/cbs-and-genius-win-sports-emmy-for-romovision/) and Amazon's [Outstanding Interactive Experience](https://www.aboutamazon.com/news/entertainment/thursday-night-football-on-prime-video-wins-sports-emmy-award) at the `Sports Emmys`.\n\n### Senior Software Engineer I (Lead), Second Spectrum\n(*January 2019 - January 2021*)\n\n[https://www.secondspectrum.com/](https://www.secondspectrum.com/)\n\n- Led a team in designing and developing the company's first `GraphQL` service serving as a unified gateway for various microservices. Built upon the `Apollo` server framework leveraging `Node.js`, `TypeScript`, `PostgreSQL`, and `Redis` for caching and pub/sub.\n- Developed a dashboard built with `Three.js` for visualizing 3D player tracking datasets and highlighting data discrepancies.\n- Created a prototype `iOS` application for video highlights using `Swift`, `SwiftUI`, and the `Combine` framework.\n- Mentored interns and fellow engineers, fostering collaboration and knowledge sharing.\n\n### Software Engineer, Second Spectrum\n(*August 2016 - January 2019*)\n\n[https://www.secondspectrum.com/](https://www.secondspectrum.com/)\n\n- Developed the operational and quality assurance management application for the company's optical player tracking system. Stack included `Elixir` (with the `Phoenix` framework), `React`, and heavy use of `WebSockets` to sync and display corrections to operators in near real-time.\n- Improved operator efficiency by 100% through the implementation of an automated task selection system.\n- Led the development of the LA Clipper's live streaming web and mobile application \"Clippers CourtVision\". Stack included `Elm` for the web front-end and `React Native` for the mobile app.\n\n### Software Engineer Intern, MindGraph Medical\n(*September 2015 - January 2016*)\n\n- Designed, developed, and deployed the MindGraph Medical website using `Node.js`, `jQuery`, and `Bootstrap`.\n\n---\n\n## Education\n\n**B.S. Computer Science, San Diego State University, San Diego**\n\n(*Class of 2016*)\n\n- [Advanced Certificate in Web and Mobile Applications Development](https://cs.sdsu.edu/about/)\n\n---\n\n## Personal Projects\n\n- [FYGT](https://github.com/DerekCuevas/derekcuevas.github.io): An experimental blog built with `Hugo`, `Deno`, and `ChatGPT`.\n- [Advent of Code 2022](https://github.com/DerekCuevas/advent-of-code-2022): Solutions to Advent of Code programming problems using functional approaches in `Clojure`.\n- [Interview Cake Algorithms Problem Set](https://github.com/DerekCuevas/interview-cake-clj): Solutions to the interview cake programming problems also by exploring functional approaches in `Clojure`.\n- [Friend List](https://github.com/DerekCuevas/friend-list): A non-trivial programming challenge exploring asynchronous side effects with different programming patterns.\n- [Redux Meta Reducer](https://github.com/DerekCuevas/redux-meta-reducer): A `Redux` higher-order reducer for simplifying the state of fetched data.\n- [Avowal](https://github.com/DerekCuevas/avowal): An asynchronous form validation library for `JavaScript`.\n"
  },
  {
   "role": "system",
   "content": "New topics for the blog should be based off of the technical skills, experience, and interests presented in the resume."
  },
  {
   "role": "system",
   "content": "Your previous 40 posts include: \"Building a Scalable and Secure Authorization System with Keycloak\", \"A Deep Dive into Rust's Ownership Model\", \"Best Practices for Building a High-Performance Web Application with Node.js\", \"Generating Synthetic Data with Python's Faker Library\", \"Understanding Rust's Unsafe Keyword\", \"How to use Access Control in Go\", \"Building a High-Performance Event Store with Apache Kafka\", \"Building a Highly Scalable Kafka Consumer in Go\", \"Building Type-Safe APIs with TypeScript\", \"Implementing the Flyweight Design Pattern in C\", \"Gaining Insights from Large Datasets Using Delta Lake\", \"Using the Observer Design Pattern in Scala\", \"The Builder Design Pattern in TypeScript\", \"Using Array Partitions in Python for Improved Performance\", \"Advanced Techniques for Debugging Rust Programs\", \"Writing a Domain-Specific Language (DSL) in Haskell\", \"Securely Managing Secrets in Production Applications\", \"Implementing the Factory Method Design Pattern in Dart\", \"Boosting Rust Performance with Allocator Selection\", \"Building Real-Time Audio Applications with WebRTC and Rust\", \"Rust's Pinning API: A Comprehensive Guide\", \"Building a Highly Scalable and Fault-Tolerant Load Balancer with Rust\", \"How to Use AWS Fargate for Highly Scalable and Serverless Containers\", \"How to Build a Recommendation Engine with Apache Spark\", \"Building a Distributed Key-Value Store on Top of Apache Kafka\", \"Building a GraphQL API with Actix-Web and Diesel\", \"Building a High-Performance HTTP Proxy with Nginx\", \"How to Use Kafka to Build Scalable and Fault-Tolerant Distributed Systems\", \"Advanced Techniques for Using PostgreSQL JSONB Data Type\", \"Writing Secure Rust Code: A Deep Dive into Memory Safety\", \"Fine-tuning BERT for Question Answering - A Step-by-Step Guide\", \"How to Use the Decorator Pattern for Flexible and Extensible Code\", \"A Deep Dive into Multithreading with Clojure\", \"How to Design Reactive Microservices Using Event-Driven Architecture\", \"Writing Efficient SQL Queries: Tips and Tricks\", \"Mastering Connection Pooling in Django\", \"Mastering the Actor Model Concurrency Paradigm in Elixir\", \"How to use Elm to build maintainable, efficient, and bug-free front-end applications\", \"How to Use Generators to Create Infinite Sequences in Python\", \"Building High Performance Distributed Data Pipelines with Apache Flink\""
  },
  {
   "role": "system",
   "content": "Your writing style is concise, to the point, informative, and focused on detailed technical information."
  },
  {
   "role": "user",
   "content": "Come up with an advanced topic for an expert level reader that is about a particular single feature, fact, pattern, paradigm, convention, theory, framework, library, or best practice."
  },
  {
   "role": "user",
   "content": "The topic should not be related to a previous post."
  },
  {
   "role": "user",
   "content": "Write a post about the topic following the rules defined."
  },
  {
   "role": "user",
   "content": "Use computer code snippets (in the relevant programming language) in order to illustrate the information presented."
  },
  {
   "role": "user",
   "content": "Format the body of the post in the markdown markup language."
  },
  {
   "role": "user",
   "content": "Include the title of the post on the first line."
  },
  {
   "role": "user",
   "content": "Include one to three tags for the post on the second line formatted as a comma separated list, for example: \"Tags: <tag1>, <tag2>\"."
  },
  {
   "role": "user",
   "content": "Do not include or link to images in the post."
  },
  {
   "role": "user",
   "content": "The post should be multiple sections in length and come to a complete finish."
  }
 ],
 "completion": {
  "id": "chatcmpl-7SaD6iGXtieeBFyX1FyQCm0GWXBo5",
  "object": "chat.completion",
  "created": 1687046732,
  "model": "gpt-3.5-turbo-0301",
  "usage": {
   "prompt_tokens": 2011,
   "completion_tokens": 999,
   "total_tokens": 3010
  },
  "choices": [
   {
    "message": {
     "role": "assistant",
     "content": "How to Implement Optimistic Concurrency Control in Your Web Applications\n\nTags: Web Development, Concurrency Control\n\nOverview\n--------\nAs web applications become more complex and demand scalable and performant architectures, implementing concurrency control techniques becomes more critical. Optimistic concurrency control is a non-blocking approach to concurrency control that relies on assuming conflicts in writes are rare, which leads to better application performance. In this post, we'll explore how to implement optimistic concurrency control for your web applications.\n\nBackground on Optimistic Concurrency Control\n---------------------------------------------\nOptimistic concurrency control is a strategy for handling concurrent updates to a resource in a distributed system. The assumption in optimistic concurrency control is that write conflicts between concurrent requests are rare, and thus the locking mechanisms used with pessimistic concurrency control are not necessary. Instead, each request is granted access to the resource, and the resource checks if the version of the data being changed is consistent with the latest version in memory.\n\nIf the version is consistent, the request can go ahead and update the resource. If the version is inconsistent with the latest version in memory, the resource throws an error to the application layer that the data has changed since the client last read it and directs the application to try again.\n\nApproaches to Implementing Optimistic Concurrency Control\n---------------------------------------------------------\nThere are many different ways to implement optimistic concurrency control in a web application. Some common approaches include:\n\n1. Version Control: In this approach, a version number is associated with each resource record. Each time a record is updated, the version number is incremented. When a client wants to update the record, it first retrieves the record and its version number. When it submits an update request, it includes the version number in the request, which the server validates against the current version number in memory. If the version number is up-to-date, the update goes ahead, and otherwise, the server returns an error.\n\nHere's an example in JavaScript/Node.js:\n\n```\nconst updateRecord = async (recordId, data, version) => {\n  const result = await db.update({\n    _id: recordId,\n    version: version,\n  }, {\n    $set: data,\n    $inc: { version: 1 },\n  });\n  if (result.modifiedCount !== 1) {\n    throw new Error(`Update failed due to conflict with record ${recordId}`);\n  }\n};\n```\n\n2. Timestamps: In this approach, a timestamp is associated with each resource record. Each time a record is updated, the timestamp is updated. When a client wants to update the record, it first retrieves the record and its timestamp. When it submits an update request, it includes the timestamp in the request, which the server validates against the current timestamp in memory. If the timestamp is up-to-date, the update goes ahead, and otherwise, the server returns an error.\n\nHere's an example in PHP:\n\n```php\nfunction updateRecord($recordId, $data, $timestamp) {\n  $query = \"\n    UPDATE records\n    SET data = :data, timestamp = NOW()\n    WHERE id = :id AND timestamp = :timestamp\n  \";\n  $stmt = $db->prepare($query);\n  $stmt->bindParam(':id', $recordId);\n  $stmt->bindParam(':data', $data);\n  $stmt->bindParam(':timestamp', $timestamp);\n  $stmt->execute();\n  if ($stmt->rowCount() !== 1) {\n    throw new Exception(\"Update failed due to conflict with record $recordId\");\n  }\n}\n```\n\n3. Optimistic Offline Caching: In this approach, the client-side cache for offline data is periodically synchronized with the server-side data. In addition, the server side logic is used to check if the selected client-record is in-sync with the server-record. If there is a conflict, the client is warned and can proceed with the update or choose to abort the operation.\n\nHere's an example in React:\n\n```javascript\nasync function onUpdate() {\n  const recordFromLocalStorage = localStorage.getItem('record');\n  const latestServerRecord = await fetch('/server/record');\n  if (recordFromLocalStorage.version === latestServerRecord.version) {\n    // Persist the changes to localStorage\n    localStorage.setItem('record', updatedRecord);\n    // Synchronize the changes to the server\n    await fetch('/server/record', {\n      method: 'PUT',\n      headers: { 'Content-Type': 'application/json' },\n      body: JSON.stringify(updatedRecord),\n    });\n  } else {\n    alert('The record has been modified by another user. Please try again.')\n  }\n}\n```\nConclusion\n-----------\nImplementing optimistic concurrency control in a distributed environment is crucial to prevent data corruption and improve application performance. This post covered three approaches to implementing optimistic concurrency control in web applications: version control, timestamps, and optimistic offline caching. Depending on your specific application requirements, you can choose the approach that works best for you."
    },
    "finish_reason": "stop",
    "index": 0
   }
  ]
 }
}
{
 "model": "gpt-3.5-turbo-0301",
 "prompt": [
  {
   "role": "user",
   "content": "You are the author of a personal technical blog about software engineering and computer science subjects."
  },
  {
   "role": "user",
   "content": "New topics for blog posts should be based off of the technical skills, experience, and interests presented in the following resume:\n+++\ntitle = \"Résumé\"\ndescription = \"Derek Cuevas' Résumé\"\ndate = \"2023-06-11\"\nor = \"Derek Cuevas\"\n+++\n\n# Derek Cuevas\n\n[GitHub](https://github.com/derekcuevas) (contact email in bio) \n\n---\n\n## Summary\n\nSenior Software Engineer with 8 years of professional experience, specializing in systems software engineering and low-latency, real-time product development.\n\nExperienced in leading teams and delivering Emmy award-winning projects. Passionate about functional programming and building high performance real-time systems. Skilled in a variety of programming languages and technologies with expertise in [Rust](https://www.rust-lang.org/) and [TypeScript](https://www.typescriptlang.org/).\n\n---\n\n## Programming Languages\n\n- **Proficient:** Rust, TypeScript (& JavaScript), Clojure, Elm\n- **Experienced:** Swift, Elixir, Objective-C, SQL\n\n---\n\n## Technologies, Skills, and Interests\n\n- **Rust:** Tokio, Futures, Hyper, Actix, Warp\n- **Platforms and Services:** AWS, Docker,  PostgreSQL, Redis, Apache Pulsar, RabbitMQ, Prometheus, GitLab CI/CD, Node.js, Deno, HTML & CSS\n- **Tooling:** Git, Vim, Bash\n- **Frameworks:** React, React Native, Redux, RxJs, SwiftUI, Phoenix\n- **Protocols:** HTTP, GraphQL, WebSockets, ØMQ, Pub/Sub, JSON, MessagePack, Protobuf, FlatBuffers\n- **Paradigms:** Functional Programming, Real-time Systems\n\n---\n\n## Professional Experience\n\n### Senior Software Engineer II (Lead), Second Spectrum (acquired by Genius Sports)\n(*January 2021 - Current*)\n\n[https://geniussports.com/](https://geniussports.com/)\n\n- Technical lead for the \"Real-time Augmentation Engine\" project's system team, developing low-latency and real-time augmented reality experiences for live TV broadcasters of sporting events.\n- Led the development and integration of core systems using `Rust`, `Tokio`, `MPSC channels`, `FFmpeg`, and `Pulsar`.\n- Oversaw operational management and monitoring systems, release management, simulation systems, and data ingestion/export pipelines.\n- Optimized the overall pipeline for 60fps real-time rendering over high definition broadcast feeds.\n- Key contributor to projects recognized with multiple Emmy awards, including the prestigious [George Wensel Technical Achievement Award](https://geniussports.com/customer-stories/cbs-and-genius-win-sports-emmy-for-romovision/) and Amazon's [Outstanding Interactive Experience](https://www.aboutamazon.com/news/entertainment/thursday-night-football-on-prime-video-wins-sports-emmy-award) at the `Sports Emmys`.\n\n### Senior Software Engineer I (Lead), Second Spectrum\n(*January 2019 - January 2021*)\n\n[https://www.secondspectrum.com/](https://www.secondspectrum.com/)\n\n- Led a team in designing and developing the company's first `GraphQL` service serving as a unified gateway for various microservices. Built upon the `Apollo` server framework leveraging `Node.js`, `TypeScript`, `PostgreSQL`, and `Redis` for caching and pub/sub.\n- Developed a dashboard built with `Three.js` for visualizing 3D player tracking datasets and highlighting data discrepancies.\n- Created a prototype `iOS` application for video highlights using `Swift`, `SwiftUI`, and the `Combine` framework.\n- Mentored interns and fellow engineers, fostering collaboration and knowledge sharing.\n\n### Software Engineer, Second Spectrum\n(*August 2016 - January 2019*)\n\n[https://www.secondspectrum.com/](https://www.secondspectrum.com/)\n\n- Developed the operational and quality assurance management application for the company's optical player tracking system. Stack included `Elixir` (with the `Phoenix` framework), `React`, and heavy use of `WebSockets` to sync and display corrections to operators in near real-time.\n- Improved operator efficiency by 100% through the implementation of an automated task selection system.\n- Led the development of the LA Clipper's live streaming web and mobile application \"Clippers CourtVision\". Stack included `Elm` for the web front-end and `React Native` for the mobile app.\n\n### Software Engineer Intern, MindGraph Medical\n(*September 2015 - January 2016*)\n\n- Designed, developed, and deployed the MindGraph Medical website using `Node.js`, `jQuery`, and `Bootstrap`.\n\n---\n\n## Education\n\n**B.S. Computer Science, San Diego State University, San Diego**\n\n(*Class of 2016*)\n\n- [Advanced Certificate in Web and Mobile Applications Development](https://cs.sdsu.edu/about/)\n\n---\n\n## Personal Projects\n\n- [FYGT](https://github.com/DerekCuevas/derekcuevas.github.io): An experimental blog built with `Hugo`, `Deno`, and `ChatGPT`.\n- [Advent of Code 2022](https://github.com/DerekCuevas/advent-of-code-2022): Solutions to Advent of Code programming problems using functional approaches in `Clojure`.\n- [Interview Cake Algorithms Problem Set](https://github.com/DerekCuevas/interview-cake-clj): Solutions to the interview cake programming problems also by exploring functional approaches in `Clojure`.\n- [Friend List](https://github.com/DerekCuevas/friend-list): A non-trivial programming challenge exploring asynchronous side effects with different programming patterns.\n- [Redux Meta Reducer](https://github.com/DerekCuevas/redux-meta-reducer): A `Redux` higher-order reducer for simplifying the state of fetched data.\n- [Avowal](https://github.com/DerekCuevas/avowal): An asynchronous form validation library for `JavaScript`.\n"
  },
  {
   "role": "user",
   "content": "Your previous 60 posts include: \"Advanced Techniques for Building Serverless Applications with AWS Lambda\", \"Mastering HTTP/2 Server Push: A Comprehensive Guide\", \"Building Scalable Real-Time Applications with Warp in Rust\", \"Mastering Event Sourcing and CQRS: A Comprehensive Guide\", \"The Power of Rust's Ownership System: A Comprehensive Guide\", \"Mastering React Component Lifecycles: A Comprehensive Guide\", \"Practical Techniques for Working with Swift Optionals\", \"Mastering the Decorator Pattern in Clojure\", \"Understanding the Rust Standard Library's `time` Module\", \"The Power of Deno's Built-in Web Server\", \"Mastering Advanced TypeScript Patterns\", \"The Power of Kotlin's Inline Functions\", \"The Power of Rust's const_fn Feature\", \"Understanding the Power of Rust's `Option` Type\", \"Understanding the Principles of Event-Driven Architecture\", \"Mastering the Observer Pattern with Objective-C\", \"The Power of Clojure's Transducers: A Comprehensive Guide\", \"Understanding TypeScript's Union Types\", \"Mastering the Asynchronous Programming in Clojure\", \"Advanced Techniques for Scaling Distributed Systems with Apache Flink\", \"Understanding Rust's String Types\", \"Advanced Error Handling with Rust's Result Type\", \"Building Custom Data Types with Rust's derive Macro\", \"Writing Type-Safe Code with TypeScript's unknown Type\", \"Building High-Performance Websites with Deno\", \"Advanced Techniques for Implementing the Decorator Design Pattern in Rust\", \"Building Robust and Secure GraphQL Servers with Rust\", \"Advanced Techniques for Working with WebSockets in Rust\", \"Understanding the Principles of Reactive Programming in Java\", \"The Power of Rust's Const Generics\", \"Mastering Rust's Parallel Iterator: A Comprehensive Guide\", \"Exploring Advanced Types in TypeScript: Mapped & Conditional Types\", \"Exploring the Rust Standard Library's `io` Module\", \"Mastering the Decorator Pattern in TypeScript\", \"Mastering Protocol Buffers in Rust\", \"Mastering Rust's Memory Allocation System\", \"Modern Web Development with SwiftNIO\", \"Mastering Rust's Result Type\", \"Building High-Performance Machine Learning Pipelines with Rust\", \"Advanced Techniques for Working with PostgreSQL Arrays\", \"Mastering HTML and CSS Accessibility: A Comprehensive Guide\", \"Mastering Apache Pulsar's Message Retention Policy\", \"Mastering TypeScript's Record Type\", \"Mastering Rust's Async/Await Syntax\", \"Mastering the Decorator Pattern in Rust\", \"The Power of Rust's Multithreading Library: A Comprehensive Guide\", \"Mastering the Svelte Framework: A Comprehensive Guide\", \"Best Practices for Integrating React and TypeScript\", \"Deep Dive into Functional Reactive Programming with RxJS\", \"Understanding Java Memory Model: A Comprehensive Guide\", \"Understanding the Fundamentals of Distributed Systems Programming in Go\", \"Effective Techniques for Building Blazing-Fast Mobile Apps with React Native\", \"Understanding the SOLID Principles of Object-Oriented Design\", \"Advanced Techniques for Scaling Node.js Applications\", \"Implementing the Facade Design Pattern in Swift\", \"Building Efficient Mobile Apps with React Native Flexbox\", \"The Power of the Copy-on-Write Methodology\", \"Writing Correct Web3 Smart Contracts with Solidity's Concerned Oxide (SCOCO) Conventions\", \"Demystifying Rust's 'unwrap()' Method\", \"Mastering Rust's Pattern Matching\""
  },
  {
   "role": "user",
   "content": "Come up with an advanced topic for an expert level reader that is about a particular single feature, fact, pattern, paradigm, convention, theory, framework, library, or best practice."
  },
  {
   "role": "user",
   "content": "Write a post about the chosen topic following the instructions given below:"
  },
  {
   "role": "user",
   "content": "Your writing style is academic, informative, and focused on detailed technical information."
  },
  {
   "role": "user",
   "content": "The topic should not be related to a previous post."
  },
  {
   "role": "user",
   "content": "Use computer code snippets (in the relevant programming language) in order to illustrate the information presented."
  },
  {
   "role": "user",
   "content": "Format the body of the post in the markdown markup language."
  },
  {
   "role": "user",
   "content": "Come up with a title for the post and include it on the first line."
  },
  {
   "role": "user",
   "content": "Include one to three tags for the post on the second line formatted as a comma separated list, for example: \"Tags: <tag1>, <tag2>\"."
  },
  {
   "role": "user",
   "content": "The post should be multiple sections in length."
  },
  {
   "role": "user",
   "content": "Do not include links to images in the post."
  },
  {
   "role": "user",
   "content": "Do not include contact information in the post."
  },
  {
   "role": "user",
   "content": "Do not add extra whitespace around lists."
  }
 ],
 "completion": {
  "id": "chatcmpl-7b0jaUXBUAsQNltrVAlY2LvrShGRo",
  "object": "chat.completion",
  "created": 1689055314,
  "model": "gpt-3.5-turbo-0301",
  "choices": [
   {
    "index": 0,
    "message": {
     "role": "assistant",
     "content": "Title: Building High-Performance Microservices with Rust's Actix-Web Framework\n\nTags: Rust, Actix-Web, Microservices\n\nMicroservices are becoming more and more popular in modern software development, and Rust is a programming language that is quickly gaining popularity in the same space due to its focus on speed, reliability, and safety. One of Rust's most well-known web frameworks is Actix-Web, which provides a flexible and high-performing toolset for building microservices. In this post, we'll explore the Actix-Web framework and show how it can be used to develop high-performance microservices.\n\n## What is Actix-Web?\n\nActix-Web is a Rust web framework that prioritizes performance and scalability. It is built on top of the Actix actor framework, which allows for simple and efficient message-passing between components. Actix-Web provides support for HTTP/1.x and HTTP/2, as well as WebSockets, and is capable of handling thousands of requests per second on a single thread using asynchronous I/O.\n\nActix-Web's main features include:\n\n- Asynchronous I/O using Rust's async/await syntax\n- Support for HTTP/1.x and HTTP/2\n- WebSocket support\n- Support for middleware and request/response handling\n- Flexible routing system with parameter parsing and path extraction\n- Low overhead and high performance \n\nActix-Web is well-suited for building microservices due to its high performance and lightweight design.\n\n## Building a Microservice with Actix-Web\n\nLet's build a simple microservice with Actix-Web to demonstrate its capabilities. First, we'll need to add Actix-Web to our `Cargo.toml` file:\n\n```toml\n[dependencies]\nactix-web = \"4.0.0-rc.3\"\n```\n\nNext, we'll create a Rust file called `main.rs` and add the following code:\n\n```rust\nuse actix_web::{App, HttpServer, Responder};\n\nasync fn hello() -> impl Responder {\n    \"Hello, world!\"\n}\n\n#[actix_web::main]\nasync fn main() -> std::io::Result<()> {\n    HttpServer::new(|| {\n        App::new().service(\n            actix_web::web::resource(\"/\")\n                .route(actix_web::web::get().to(hello)),\n        )\n    })\n    .bind(\"127.0.0.1:8080\")?\n    .run()\n    .await\n}\n```\n\nThis code defines an asynchronous `hello` function that returns a simple string response. It then defines a main function that creates an HTTP server with Actix-Web, serving the `hello` function as a response at the root endpoint of the server.\n\nWe can run this microservice by building the project with `cargo build` and then starting the server with `cargo run`. If we navigate to `http://localhost:8080` in our web browser, we should see the \"Hello, world!\" response.\n\n## Handling Dynamic Routes\n\nActix-Web's routing system is flexible and allows for easy handling of dynamic routes with parameters. Let's modify our microservice to accept a name parameter and respond with a personalized greeting. We'll modify the `hello` function to accept a `name` parameter, and then add a new route to our server.\n\n```rust\nasync fn hello(name: actix_web::web::Path<String>) -> impl Responder {\n    format!(\"Hello, {}!\", name)\n}\n\n#[actix_web::main]\nasync fn main() -> std::io::Result<()> {\n    HttpServer::new(|| {\n        App::new().service(\n            actix_web::web::resource(\"/{name}\")\n                .route(actix_web::web::get().to(hello)),\n        )\n    })\n    .bind(\"127.0.0.1:8080\")?\n    .run()\n    .await\n}\n```\n\nNow, if we navigate to `http://localhost:8080/John`, for example, we should see the response \"Hello, John!\".\n\n## Adding Middleware\n\nActix-Web also supports the use of middleware, which can be used to modify requests/responses before they're processed by the server or endpoint functions. Middleware functions take an `HttpRequest` and an `HttpResponse` as arguments, and can be defined using Rust's async/await syntax.\n\nAs an example, let's add a middleware function to our microservice that adds a custom header to every response. We'll add a new middleware function called `add_custom_header`, and then use Actix-Web's `wrap` method to apply this middleware to our server during initialization.\n\n```rust\nuse actix_web::{dev, web, App, HttpResponse, HttpServer, Responder};\n\nasync fn hello(name: actix_web::web::Path<String>) -> impl Responder {\n    format!(\"Hello, {}!\", name)\n}\n\nasync fn add_custom_header(\n    req: dev::ServiceRequest,\n    srv: web::Data<HttpServer>,\n) -> Result<dev::ServiceResponse, actix_web::Error> {\n    let mut res = req.into_response(HttpResponse::Ok());\n    res.headers_mut().insert(\n        header::CONTENT_TYPE,\n        header::HeaderValue::from_static(\"text/plain\"),\n    );\n    Ok(res.into())\n}\n\n#[actix_web::main]\nasync fn main() -> std::io::Result<()> {\n    HttpServer::new(|| {\n        App::new()\n            .wrap(add_custom_header)\n            .service(actix_web::web::resource(\"/{name}\").route(actix_web::web::get().to(hello)))\n    })\n    .bind(\"127.0.0.1:8080\")?\n    .run()\n    .await\n}\n```\n\nNow, if we navigate to `http://localhost:8080/John` and inspect the response headers using our web browser's developer tools, we should see the new custom header included in the response.\n\n## Conclusion\n\nActix-Web is a high-performance, flexible, and lightweight Rust web framework that is well-suited for building microservices. Its support for asynchronous I/O, HTTP/1.x and HTTP/2, WebSockets, and middleware make it a powerful toolset for building modern microservices. By following the examples in this post, you should now have a basic understanding of how to build microservices with Actix-Web."
    },
    "finish_reason": "stop"
   }
  ],
  "usage": {
   "prompt_tokens": 2207,
   "completion_tokens": 1318,
   "total_tokens": 3525
  }
 }
}
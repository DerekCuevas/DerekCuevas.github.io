{
 "model": "gpt-3.5-turbo-0301",
 "prompt": [
  {
   "role": "user",
   "content": "You are the author of a personal technical blog about software engineering and computer science subjects."
  },
  {
   "role": "user",
   "content": "New topics for blog posts should be based off of the technical skills, experience, and interests presented in the following resume:\n+++\ntitle = \"Résumé\"\ndescription = \"Derek Cuevas' Résumé\"\ndate = \"2023-06-11\"\nor = \"Derek Cuevas\"\n+++\n\n# Derek Cuevas\n\n[GitHub](https://github.com/derekcuevas) (contact email in bio) \n\n---\n\n## Summary\n\nSenior Software Engineer with 8 years of professional experience, specializing in systems software engineering and low-latency, real-time product development.\n\nExperienced in leading teams and delivering Emmy award-winning projects. Passionate about functional programming and building high performance real-time systems. Skilled in a variety of programming languages and technologies with expertise in [Rust](https://www.rust-lang.org/) and [TypeScript](https://www.typescriptlang.org/).\n\n---\n\n## Programming Languages\n\n- **Proficient:** Rust, TypeScript (& JavaScript), Clojure, Elm\n- **Experienced:** Swift, Elixir, Objective-C, SQL\n\n---\n\n## Technologies, Skills, and Interests\n\n- **Rust:** Tokio, Futures, Hyper, Actix, Warp\n- **Platforms and Services:** AWS, Docker,  PostgreSQL, Redis, Apache Pulsar, RabbitMQ, Prometheus, GitLab CI/CD, Node.js, Deno, HTML & CSS\n- **Tooling:** Git, Vim, Bash\n- **Frameworks:** React, React Native, Redux, RxJs, SwiftUI, Phoenix\n- **Protocols:** HTTP, GraphQL, WebSockets, ØMQ, Pub/Sub, JSON, MessagePack, Protobuf, FlatBuffers\n- **Paradigms:** Functional Programming, Real-time Systems\n\n---\n\n## Professional Experience\n\n### Senior Software Engineer II (Lead), Second Spectrum (acquired by Genius Sports)\n(*January 2021 - Current*)\n\n[https://geniussports.com/](https://geniussports.com/)\n\n- Technical lead for the \"Real-time Augmentation Engine\" project's system team, developing low-latency and real-time augmented reality experiences for live TV broadcasters of sporting events.\n- Led the development and integration of core systems using `Rust`, `Tokio`, `MPSC channels`, `FFmpeg`, and `Pulsar`.\n- Oversaw operational management and monitoring systems, release management, simulation systems, and data ingestion/export pipelines.\n- Optimized the overall pipeline for 60fps real-time rendering over high definition broadcast feeds.\n- Key contributor to projects recognized with multiple Emmy awards, including the prestigious [George Wensel Technical Achievement Award](https://geniussports.com/customer-stories/cbs-and-genius-win-sports-emmy-for-romovision/) and Amazon's [Outstanding Interactive Experience](https://www.aboutamazon.com/news/entertainment/thursday-night-football-on-prime-video-wins-sports-emmy-award) at the `Sports Emmys`.\n\n### Senior Software Engineer I (Lead), Second Spectrum\n(*January 2019 - January 2021*)\n\n[https://www.secondspectrum.com/](https://www.secondspectrum.com/)\n\n- Led a team in designing and developing the company's first `GraphQL` service serving as a unified gateway for various microservices. Built upon the `Apollo` server framework leveraging `Node.js`, `TypeScript`, `PostgreSQL`, and `Redis` for caching and pub/sub.\n- Developed a dashboard built with `Three.js` for visualizing 3D player tracking datasets and highlighting data discrepancies.\n- Created a prototype `iOS` application for video highlights using `Swift`, `SwiftUI`, and the `Combine` framework.\n- Mentored interns and fellow engineers, fostering collaboration and knowledge sharing.\n\n### Software Engineer, Second Spectrum\n(*August 2016 - January 2019*)\n\n[https://www.secondspectrum.com/](https://www.secondspectrum.com/)\n\n- Developed the operational and quality assurance management application for the company's optical player tracking system. Stack included `Elixir` (with the `Phoenix` framework), `React`, and heavy use of `WebSockets` to sync and display corrections to operators in near real-time.\n- Improved operator efficiency by 100% through the implementation of an automated task selection system.\n- Led the development of the LA Clipper's live streaming web and mobile application \"Clippers CourtVision\". Stack included `Elm` for the web front-end and `React Native` for the mobile app.\n\n### Software Engineer Intern, MindGraph Medical\n(*September 2015 - January 2016*)\n\n- Designed, developed, and deployed the MindGraph Medical website using `Node.js`, `jQuery`, and `Bootstrap`.\n\n---\n\n## Education\n\n**B.S. Computer Science, San Diego State University, San Diego**\n\n(*Class of 2016*)\n\n- [Advanced Certificate in Web and Mobile Applications Development](https://cs.sdsu.edu/about/)\n\n---\n\n## Personal Projects\n\n- [FYGT](https://github.com/DerekCuevas/derekcuevas.github.io): An experimental blog built with `Hugo`, `Deno`, and `ChatGPT`.\n- [Advent of Code 2022](https://github.com/DerekCuevas/advent-of-code-2022): Solutions to Advent of Code programming problems using functional approaches in `Clojure`.\n- [Interview Cake Algorithms Problem Set](https://github.com/DerekCuevas/interview-cake-clj): Solutions to the interview cake programming problems also by exploring functional approaches in `Clojure`.\n- [Friend List](https://github.com/DerekCuevas/friend-list): A non-trivial programming challenge exploring asynchronous side effects with different programming patterns.\n- [Redux Meta Reducer](https://github.com/DerekCuevas/redux-meta-reducer): A `Redux` higher-order reducer for simplifying the state of fetched data.\n- [Avowal](https://github.com/DerekCuevas/avowal): An asynchronous form validation library for `JavaScript`.\n"
  },
  {
   "role": "user",
   "content": "Your previous 60 posts include: \"Advanced Techniques for Working with WebSockets in Rust\", \"Understanding the Principles of Reactive Programming in Java\", \"The Power of Rust's Const Generics\", \"Mastering Rust's Parallel Iterator: A Comprehensive Guide\", \"Exploring Advanced Types in TypeScript: Mapped & Conditional Types\", \"Exploring the Rust Standard Library's `io` Module\", \"Mastering the Decorator Pattern in TypeScript\", \"Mastering Protocol Buffers in Rust\", \"Mastering Rust's Memory Allocation System\", \"Modern Web Development with SwiftNIO\", \"Mastering Rust's Result Type\", \"Building High-Performance Machine Learning Pipelines with Rust\", \"Advanced Techniques for Working with PostgreSQL Arrays\", \"Mastering HTML and CSS Accessibility: A Comprehensive Guide\", \"Mastering Apache Pulsar's Message Retention Policy\", \"Mastering TypeScript's Record Type\", \"Mastering Rust's Async/Await Syntax\", \"Mastering the Decorator Pattern in Rust\", \"The Power of Rust's Multithreading Library: A Comprehensive Guide\", \"Mastering the Svelte Framework: A Comprehensive Guide\", \"Best Practices for Integrating React and TypeScript\", \"Deep Dive into Functional Reactive Programming with RxJS\", \"Understanding Java Memory Model: A Comprehensive Guide\", \"Understanding the Fundamentals of Distributed Systems Programming in Go\", \"Effective Techniques for Building Blazing-Fast Mobile Apps with React Native\", \"Understanding the SOLID Principles of Object-Oriented Design\", \"Advanced Techniques for Scaling Node.js Applications\", \"Implementing the Facade Design Pattern in Swift\", \"Building Efficient Mobile Apps with React Native Flexbox\", \"The Power of the Copy-on-Write Methodology\", \"Writing Correct Web3 Smart Contracts with Solidity's Concerned Oxide (SCOCO) Conventions\", \"Demystifying Rust's 'unwrap()' Method\", \"Mastering Rust's Pattern Matching\", \"The Power of Streams in Java\", \"Mastering C++17 Template Argument Deduction\", \"Mastering the Composite Design Pattern in C\", \"Implementing the Command Design Pattern in Kotlin\", \"Mastering the Observer Design Pattern in Rust\", \"Understanding Scala's Implicits: A Comprehensive Guide\", \"Mastering Terraform's State File\", \"Title:\", \"Mastering the Decorator Design Pattern in TypeScript\", \"Mastering the Decorator Pattern in Java\", \"The Fundamentals of Concurrency in Elixir\", \"Mastering the Singleton Design Pattern in Java\", \"Building a Scalable and Secure Authorization System with Keycloak\", \"A Deep Dive into Rust's Ownership Model\", \"Best Practices for Building a High-Performance Web Application with Node.js\", \"Generating Synthetic Data with Python's Faker Library\", \"Understanding Rust's Unsafe Keyword\", \"How to use Access Control in Go\", \"Building a High-Performance Event Store with Apache Kafka\", \"Building a Highly Scalable Kafka Consumer in Go\", \"Building Type-Safe APIs with TypeScript\", \"Implementing the Flyweight Design Pattern in C\", \"Gaining Insights from Large Datasets Using Delta Lake\", \"Using the Observer Design Pattern in Scala\", \"The Builder Design Pattern in TypeScript\", \"Using Array Partitions in Python for Improved Performance\", \"Advanced Techniques for Debugging Rust Programs\""
  },
  {
   "role": "user",
   "content": "Come up with an advanced topic for an expert level reader that is about a particular single feature, fact, pattern, paradigm, convention, theory, framework, library, or best practice."
  },
  {
   "role": "user",
   "content": "Write a post about the chosen topic following the instructions given below:"
  },
  {
   "role": "user",
   "content": "Your writing style is academic, informative, and focused on detailed technical information."
  },
  {
   "role": "user",
   "content": "The topic should not be related to a previous post."
  },
  {
   "role": "user",
   "content": "Use computer code snippets (in the relevant programming language) in order to illustrate the information presented."
  },
  {
   "role": "user",
   "content": "Format the body of the post in the markdown markup language."
  },
  {
   "role": "user",
   "content": "Come up with a title for the post and include it on the first line."
  },
  {
   "role": "user",
   "content": "Include one to three tags for the post on the second line formatted as a comma separated list, for example: \"Tags: <tag1>, <tag2>\"."
  },
  {
   "role": "user",
   "content": "The post should be multiple sections in length."
  },
  {
   "role": "user",
   "content": "Do not include links to images in the post."
  },
  {
   "role": "user",
   "content": "Do not include contact information in the post."
  },
  {
   "role": "user",
   "content": "Do not add extra whitespace around lists."
  }
 ],
 "completion": {
  "id": "chatcmpl-7YZ1bZxmYPCvHxKnkHxzSj1OYKqK6",
  "object": "chat.completion",
  "created": 1688472143,
  "model": "gpt-3.5-turbo-0301",
  "choices": [
   {
    "index": 0,
    "message": {
     "role": "assistant",
     "content": "Title: Building Robust and Secure GraphQL Servers with Rust\n\nTags: Rust, GraphQL, Web Development\n\nGraphQL is quickly becoming a go-to choice for web APIs due to its flexibility and ability to reduce network traffic. However, with great flexibility comes great responsibility. GraphQL APIs have unique security considerations, such as query complexity attacks, and require robust input validation that matches the GraphQL schema. Rust, with its memory safety and strong typing, is an excellent language to build secure and robust GraphQL servers.\n\nIn this post, we will explore how to use Rust to build secure and robust GraphQL servers. We will cover:\n\n1. Initializing a Rust project and adding dependencies\n2. Defining the GraphQL schema\n3. Validating inputs according to the schema\n4. Handling complex queries and security concerns\n\n## Initializing a Rust Project and Adding Dependencies\n\nWe will use the popular Rust web framework [Rocket](https://rocket.rs/) to build our GraphQL server. Rocket provides a clean and simple API for building web applications and has a growing library of plugins. To use Rocket in a new Rust project, we can use the following command:\n\n```bash\n$ cargo new my-graphql-server --bin\n```\n\nThis will create a new Rust project with a binary target, which is appropriate for a web server. Then we will add Rocket as a dependency in `Cargo.toml`.\n\n```toml\n[dependencies]\nrocket = \"0.5.0-rc.1\"\nserde = { version = \"1.0\", features = [\"derive\"] }\njuniper = \"0.16\"\n```\n\nWe will use serde for serialization and deserialization, and Juniper to define our GraphQL schema.\n\n## Defining the GraphQL Schema\n\nThe GraphQL schema defines the types and fields available in the API. Juniper uses Rust types to define the GraphQL schema. Here is an example schema:\n\n```rust\n#[derive(Clone, Debug, GraphQLObject)]\nstruct User {\n    id: ID,\n    name: String,\n    email: String,\n}\n\n#[derive(Clone, Debug, GraphQLObject)]\nstruct Task {\n    id: ID,\n    title: String,\n    description: String,\n    done: bool,\n}\n\n#[derive(Debug, Clone)]\nstruct Context {\n    users: Vec<User>,\n    tasks: Vec<Task>,\n}\n\n#[rocket::async_trait]\nimpl juniper::Context for Context {}\n\ntype Schema = juniper::RootNode<'static, Query, Mutation>;\n\nstruct Query;\n\n#[juniper::graphql_object(Context = Context)]\nimpl Query {\n    #[graphql(description = \"List all users\")]\n    async fn users() -> Vec<User> {\n        // implementation omitted\n    }\n\n    #[graphql(description = \"Get a user by ID\")]\n    async fn user(&self, id: ID) -> Option<User> {\n        // implementation omitted\n    }\n\n    #[graphql(description = \"List all tasks\")]\n    async fn tasks() -> Vec<Task> {\n        // implementation omitted\n    }\n}\n\nstruct Mutation;\n\n#[juniper::graphql_object(Context = Context)]\nimpl Mutation {\n    #[graphql(description = \"Create a new task\")]\n    async fn create_task(&self, title: String, description: String) -> Task {\n        // implementation omitted\n    }\n\n    #[graphql(description = \"Mark a task as done\")]\n    async fn mark_task_done(&self, id: ID) -> Option<Task> {\n        // implementation omitted\n    }\n}\n\nfn create_schema() -> Schema {\n    Schema::new(Query, Mutation)\n}\n```\n\nIn this example, we define two types, `User` and `Task`, and a context struct that holds some data. We implement the `juniper::Context` trait for the context struct so that it can be used in GraphQL resolvers.\n\nWe define the `Query` and `Mutation` structs which will be used by Juniper to generate resolvers. The `Query` struct defines functions that correspond to root query fields in the schema. Similarly, the `Mutation` struct defines functions that correspond to root mutation fields in the schema.\n\nFinally, we define a function `create_schema()` that returns a `Schema` object. This function takes the root query and mutation structs as arguments and generates a GraphQL schema that can be used in our application.\n\n## Validating Inputs According to the Schema\n\nOne of the benefits of GraphQL is that clients can specify exactly which fields they want in a query, leading to reduced network traffic. However, this also means that input validation is more important because a client could potentially request fields that don't exist or request data that they shouldn't have access to.\n\nJuniper automatically validates queries against the defined schema, so we don't have to worry about requests for nonexistent fields. However, we do have to make sure that the input data matches the schema. For example, if our schema specifies that a user's email must be a valid email address, we need to validate input to ensure that this requirement is met.\n\nTo validate input data, we can use Rust's strong typing and Rocket's request guard functionality. Here is an example of a guard that checks if an email address is valid:\n\n```rust\n#[rocket::async_trait]\nimpl<'r> rocket::request::FromRequest<'r> for Email {\n    type Error = String;\n\n    async fn from_request(\n        request: &'r rocket::Request<'_>,\n    ) -> rocket::request::Outcome<Self, Self::Error> {\n        let email: String = match request\n            .headers()\n            .get_one(\"X-Email\")\n            .ok_or_else(|| \"X-Email header is missing\".to_string())?\n        {\n            email if is_valid_email(&email) => Ok(email.to_string()),\n            _ => Err(\"Invalid email\".to_string()),\n        };\n\n        Outcome::Success(Email(email?))\n    }\n}\n\nstruct Email(String);\n\nfn is_valid_email(email: &str) -> bool {\n    // implementation omitted\n}\n```\n\nIn this example, we define a `FromRequest` guard that extracts an email address from the `X-Email` header and checks if it's a valid email address. If it's valid, we return an `Outcome::Success` with an `Email` object containing the email address. If it's not valid, we return an `Outcome::Failure` with an error message.\n\nGuards like these can be used to validate any input data that comes from a request, including data from query variables and mutations.\n\n## Handling Complex Queries and Security Concerns\n\nOne of the challenges of building a GraphQL server is handling complex queries from clients. Clients can define arbitrarily complex queries that join multiple types together, which can result in a large number of database queries. This can lead to performance problems and create a potential vulnerability for query complexity attacks.\n\nOne way to handle complex queries is to use a data loader. A data loader is a mechanism for batching and caching queries to a data source. By batching queries together, we can reduce the number of queries made to the database. By caching the results of queries, we can reduce the latency of subsequent requests.\n\nFor example, let's say we have a GraphQL query that requests a user's tasks and the names of their collaborators:\n\n```graphql\nquery GetUserTasks {\n  user(id: \"1\") {\n    name\n    tasks {\n      title\n      collaborators {\n        name\n      }\n    }\n  }\n}\n```\n\nIf we naively execute this query, we might end up issuing two database queries per task (one for the task's fields and one for the collaborator's fields). This can quickly become a performance bottleneck.\n\nTo solve this problem, we can use a data loader to batch and cache queries. Here is an example using the [dataloader](https://github.com/graphql-rust/dataloader) crate:\n\n```rust\nstruct CollaboratorLoader {\n    db: Database,\n}\n\nimpl CollaboratorLoader {\n    async fn load_collaborators(&self, task_ids: Vec<ID>) -> Result<Vec<Vec<Collaborator>>, Error> {\n        // implementation omitted\n    }\n}\n\nimpl juniper::Context for Context {}\n\nstruct Query;\n\n#[juniper::graphql_object(Context = Context)]\nimpl Query {\n    async fn user(&self, id: ID) -> Option<User> {\n        // implementation omitted\n    }\n\n    async fn task(&self, id: ID) -> Option<Task> {\n        // implementation omitted\n    }\n\n    async fn tasks(&self, user_id: Option<ID>) -> Vec<Task> {\n        // implementation omitted\n    }\n}\n\nfn create_collaborator_loader(db: Database) -> CollaboratorLoader {\n    CollaboratorLoader { db }\n}\n\ntype CollaboratorLoaderKey = String;\ntype CollaboratorLoaderValue = Vec<Collaborator>;\n\n#[rocket::async_trait]\nimpl<'a> FromRequest<'a> for Arc<DataLoader<CollaboratorLoaderKey, CollaboratorLoaderValue>> {\n    type Error = ();\n\n    async fn from_request(request: &'a Request<'_>) -> Outcome<Self, Self::Error> {\n        let db = request.local_cache(|| {\n            let db_url = std::env::var(\"DATABASE_URL\").expect(\"missing DATABASE_URL environment variable\");\n            Database::connect(&db_url).expect(\"failed to connect to database\")\n        });\n\n        let loader_key = \"collaborator\".to_string();\n        let loader = DataLoader::new(create_collaborator_loader(db), loader_key.clone());\n\n        Outcome::Success(Arc::new(loader))\n    }\n}\n\n"
    },
    "finish_reason": "length"
   }
  ],
  "usage": {
   "prompt_tokens": 2178,
   "completion_tokens": 1919,
   "total_tokens": 4097
  }
 }
}
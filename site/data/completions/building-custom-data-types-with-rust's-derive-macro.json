{
 "model": "gpt-3.5-turbo-0301",
 "prompt": [
  {
   "role": "user",
   "content": "You are the author of a personal technical blog about software engineering and computer science subjects."
  },
  {
   "role": "user",
   "content": "New topics for blog posts should be based off of the technical skills, experience, and interests presented in the following resume:\n+++\ntitle = \"Résumé\"\ndescription = \"Derek Cuevas' Résumé\"\ndate = \"2023-06-11\"\nor = \"Derek Cuevas\"\n+++\n\n# Derek Cuevas\n\n[GitHub](https://github.com/derekcuevas) (contact email in bio) \n\n---\n\n## Summary\n\nSenior Software Engineer with 8 years of professional experience, specializing in systems software engineering and low-latency, real-time product development.\n\nExperienced in leading teams and delivering Emmy award-winning projects. Passionate about functional programming and building high performance real-time systems. Skilled in a variety of programming languages and technologies with expertise in [Rust](https://www.rust-lang.org/) and [TypeScript](https://www.typescriptlang.org/).\n\n---\n\n## Programming Languages\n\n- **Proficient:** Rust, TypeScript (& JavaScript), Clojure, Elm\n- **Experienced:** Swift, Elixir, Objective-C, SQL\n\n---\n\n## Technologies, Skills, and Interests\n\n- **Rust:** Tokio, Futures, Hyper, Actix, Warp\n- **Platforms and Services:** AWS, Docker,  PostgreSQL, Redis, Apache Pulsar, RabbitMQ, Prometheus, GitLab CI/CD, Node.js, Deno, HTML & CSS\n- **Tooling:** Git, Vim, Bash\n- **Frameworks:** React, React Native, Redux, RxJs, SwiftUI, Phoenix\n- **Protocols:** HTTP, GraphQL, WebSockets, ØMQ, Pub/Sub, JSON, MessagePack, Protobuf, FlatBuffers\n- **Paradigms:** Functional Programming, Real-time Systems\n\n---\n\n## Professional Experience\n\n### Senior Software Engineer II (Lead), Second Spectrum (acquired by Genius Sports)\n(*January 2021 - Current*)\n\n[https://geniussports.com/](https://geniussports.com/)\n\n- Technical lead for the \"Real-time Augmentation Engine\" project's system team, developing low-latency and real-time augmented reality experiences for live TV broadcasters of sporting events.\n- Led the development and integration of core systems using `Rust`, `Tokio`, `MPSC channels`, `FFmpeg`, and `Pulsar`.\n- Oversaw operational management and monitoring systems, release management, simulation systems, and data ingestion/export pipelines.\n- Optimized the overall pipeline for 60fps real-time rendering over high definition broadcast feeds.\n- Key contributor to projects recognized with multiple Emmy awards, including the prestigious [George Wensel Technical Achievement Award](https://geniussports.com/customer-stories/cbs-and-genius-win-sports-emmy-for-romovision/) and Amazon's [Outstanding Interactive Experience](https://www.aboutamazon.com/news/entertainment/thursday-night-football-on-prime-video-wins-sports-emmy-award) at the `Sports Emmys`.\n\n### Senior Software Engineer I (Lead), Second Spectrum\n(*January 2019 - January 2021*)\n\n[https://www.secondspectrum.com/](https://www.secondspectrum.com/)\n\n- Led a team in designing and developing the company's first `GraphQL` service serving as a unified gateway for various microservices. Built upon the `Apollo` server framework leveraging `Node.js`, `TypeScript`, `PostgreSQL`, and `Redis` for caching and pub/sub.\n- Developed a dashboard built with `Three.js` for visualizing 3D player tracking datasets and highlighting data discrepancies.\n- Created a prototype `iOS` application for video highlights using `Swift`, `SwiftUI`, and the `Combine` framework.\n- Mentored interns and fellow engineers, fostering collaboration and knowledge sharing.\n\n### Software Engineer, Second Spectrum\n(*August 2016 - January 2019*)\n\n[https://www.secondspectrum.com/](https://www.secondspectrum.com/)\n\n- Developed the operational and quality assurance management application for the company's optical player tracking system. Stack included `Elixir` (with the `Phoenix` framework), `React`, and heavy use of `WebSockets` to sync and display corrections to operators in near real-time.\n- Improved operator efficiency by 100% through the implementation of an automated task selection system.\n- Led the development of the LA Clipper's live streaming web and mobile application \"Clippers CourtVision\". Stack included `Elm` for the web front-end and `React Native` for the mobile app.\n\n### Software Engineer Intern, MindGraph Medical\n(*September 2015 - January 2016*)\n\n- Designed, developed, and deployed the MindGraph Medical website using `Node.js`, `jQuery`, and `Bootstrap`.\n\n---\n\n## Education\n\n**B.S. Computer Science, San Diego State University, San Diego**\n\n(*Class of 2016*)\n\n- [Advanced Certificate in Web and Mobile Applications Development](https://cs.sdsu.edu/about/)\n\n---\n\n## Personal Projects\n\n- [FYGT](https://github.com/DerekCuevas/derekcuevas.github.io): An experimental blog built with `Hugo`, `Deno`, and `ChatGPT`.\n- [Advent of Code 2022](https://github.com/DerekCuevas/advent-of-code-2022): Solutions to Advent of Code programming problems using functional approaches in `Clojure`.\n- [Interview Cake Algorithms Problem Set](https://github.com/DerekCuevas/interview-cake-clj): Solutions to the interview cake programming problems also by exploring functional approaches in `Clojure`.\n- [Friend List](https://github.com/DerekCuevas/friend-list): A non-trivial programming challenge exploring asynchronous side effects with different programming patterns.\n- [Redux Meta Reducer](https://github.com/DerekCuevas/redux-meta-reducer): A `Redux` higher-order reducer for simplifying the state of fetched data.\n- [Avowal](https://github.com/DerekCuevas/avowal): An asynchronous form validation library for `JavaScript`.\n"
  },
  {
   "role": "user",
   "content": "Your previous 60 posts include: \"Writing Type-Safe Code with TypeScript's unknown Type\", \"Building High-Performance Websites with Deno\", \"Advanced Techniques for Implementing the Decorator Design Pattern in Rust\", \"Building Robust and Secure GraphQL Servers with Rust\", \"Advanced Techniques for Working with WebSockets in Rust\", \"Understanding the Principles of Reactive Programming in Java\", \"The Power of Rust's Const Generics\", \"Mastering Rust's Parallel Iterator: A Comprehensive Guide\", \"Exploring Advanced Types in TypeScript: Mapped & Conditional Types\", \"Exploring the Rust Standard Library's `io` Module\", \"Mastering the Decorator Pattern in TypeScript\", \"Mastering Protocol Buffers in Rust\", \"Mastering Rust's Memory Allocation System\", \"Modern Web Development with SwiftNIO\", \"Mastering Rust's Result Type\", \"Building High-Performance Machine Learning Pipelines with Rust\", \"Advanced Techniques for Working with PostgreSQL Arrays\", \"Mastering HTML and CSS Accessibility: A Comprehensive Guide\", \"Mastering Apache Pulsar's Message Retention Policy\", \"Mastering TypeScript's Record Type\", \"Mastering Rust's Async/Await Syntax\", \"Mastering the Decorator Pattern in Rust\", \"The Power of Rust's Multithreading Library: A Comprehensive Guide\", \"Mastering the Svelte Framework: A Comprehensive Guide\", \"Best Practices for Integrating React and TypeScript\", \"Deep Dive into Functional Reactive Programming with RxJS\", \"Understanding Java Memory Model: A Comprehensive Guide\", \"Understanding the Fundamentals of Distributed Systems Programming in Go\", \"Effective Techniques for Building Blazing-Fast Mobile Apps with React Native\", \"Understanding the SOLID Principles of Object-Oriented Design\", \"Advanced Techniques for Scaling Node.js Applications\", \"Implementing the Facade Design Pattern in Swift\", \"Building Efficient Mobile Apps with React Native Flexbox\", \"The Power of the Copy-on-Write Methodology\", \"Writing Correct Web3 Smart Contracts with Solidity's Concerned Oxide (SCOCO) Conventions\", \"Demystifying Rust's 'unwrap()' Method\", \"Mastering Rust's Pattern Matching\", \"The Power of Streams in Java\", \"Mastering C++17 Template Argument Deduction\", \"Mastering the Composite Design Pattern in C\", \"Implementing the Command Design Pattern in Kotlin\", \"Mastering the Observer Design Pattern in Rust\", \"Understanding Scala's Implicits: A Comprehensive Guide\", \"Mastering Terraform's State File\", \"Title:\", \"Mastering the Decorator Design Pattern in TypeScript\", \"Mastering the Decorator Pattern in Java\", \"The Fundamentals of Concurrency in Elixir\", \"Mastering the Singleton Design Pattern in Java\", \"Building a Scalable and Secure Authorization System with Keycloak\", \"A Deep Dive into Rust's Ownership Model\", \"Best Practices for Building a High-Performance Web Application with Node.js\", \"Generating Synthetic Data with Python's Faker Library\", \"Understanding Rust's Unsafe Keyword\", \"How to use Access Control in Go\", \"Building a High-Performance Event Store with Apache Kafka\", \"Building a Highly Scalable Kafka Consumer in Go\", \"Building Type-Safe APIs with TypeScript\", \"Implementing the Flyweight Design Pattern in C\", \"Gaining Insights from Large Datasets Using Delta Lake\""
  },
  {
   "role": "user",
   "content": "Come up with an advanced topic for an expert level reader that is about a particular single feature, fact, pattern, paradigm, convention, theory, framework, library, or best practice."
  },
  {
   "role": "user",
   "content": "Write a post about the chosen topic following the instructions given below:"
  },
  {
   "role": "user",
   "content": "Your writing style is academic, informative, and focused on detailed technical information."
  },
  {
   "role": "user",
   "content": "The topic should not be related to a previous post."
  },
  {
   "role": "user",
   "content": "Use computer code snippets (in the relevant programming language) in order to illustrate the information presented."
  },
  {
   "role": "user",
   "content": "Format the body of the post in the markdown markup language."
  },
  {
   "role": "user",
   "content": "Come up with a title for the post and include it on the first line."
  },
  {
   "role": "user",
   "content": "Include one to three tags for the post on the second line formatted as a comma separated list, for example: \"Tags: <tag1>, <tag2>\"."
  },
  {
   "role": "user",
   "content": "The post should be multiple sections in length."
  },
  {
   "role": "user",
   "content": "Do not include links to images in the post."
  },
  {
   "role": "user",
   "content": "Do not include contact information in the post."
  },
  {
   "role": "user",
   "content": "Do not add extra whitespace around lists."
  }
 ],
 "completion": {
  "id": "chatcmpl-7YvVM9weyPGGqhfwW3GKQH3OUfV2o",
  "object": "chat.completion",
  "created": 1688558556,
  "model": "gpt-3.5-turbo-0301",
  "choices": [
   {
    "index": 0,
    "message": {
     "role": "assistant",
     "content": "Title: Building Custom Data Types with Rust's derive Macro\n\nTags: Rust, Programming\n\nRust is a unique programming language with some remarkable features. Besides its memory safety guarantee, expressive syntax and performance, Rust seems to fit best for building systems-level software.\n\nAmong the most helpful Rust macros, `derive` is a keyword that can reduce boilerplate in implementations of commonly used traits. This makes it an excellent way to encode data types that conform to a specific pattern.\n\nIn this post, we'll explore how to build custom data types using Rust's `derive` macro.\n\n## What is a Derive Macro?\n\nA derive macro is a Rust macro that allows for the automatic generation of code implementing common Rust traits and interfaces. These derive macros have access to the AST of the item (struct, enum, union etc.) being derived, and can generate implementation code based on that information.\n\nRust includes support for several built-in derive macros:\n\n- `Clone`: creates a new instance of a struct that is a copy of an existing instance.\n- `Copy`: a struct that can be safely bit-copied, allowing for values to be easily moved around in memory.\n- `Debug`: formats a struct or enum in a way that is readable to humans and commonly used for debugging purposes.\n- `PartialEq`, `Eq`: checks whether one instance of a struct is equal to another.\n- `PartialOrd`, `Ord`: checks whether one instance is greater than, less than, or equal to another.\n- `Default`: returns a default instance of a struct.\n- `Hash`: creates a unique identifier for a struct, useful for hashing algorithms like those used in HashMap.\n- `Serialize`, `Deserialize`: encodes a struct or enum to or from a byte sequence.\n\n## Steps to Create Custom Data Types\n\nCustom data types can be created in Rust by declaring a struct or enum. Rust's `derive` macro makes it possible to derive implementation code for these custom data types easily. Here's how to create custom data types in Rust:\n\n### 1. Define the custom data types\n\nDefining custom structs in Rust is similar to defining a class or an object in other languages. Here we define a simple `Circle` struct with float type for radius.\n\n```rust\nstruct Circle {\n    radius: f32,\n}\n```\n\n### 2. Implement the custom traits for the defined data type using the derive macro.\n\nTo implement a trait for our custom data type, we use the `#[derive(trait_name)]` annotation. The `Clone` example would look like this:\n\n```rust\n#[derive(Clone)]\nstruct Circle {\n    radius: f32,\n}\n```\n\nIf we need to derive multiple traits, we can separate them with commas:\n\n```rust\n#[derive(Clone, Debug, PartialEq)]\nstruct Circle {\n    radius: f32,\n}\n```\n\n### 3. Generate code based on the defined data type\n\nOnce the traits are defined using `derive` , Rust will automatically generate implementations for the traits.\n\nFor example, if we were to use the clone implementation we defined earlier:\n\n```rust\nlet circle_1 = Circle { radius: 3.0 };\nlet circle_2 = circle_1.clone();\n```\n\nThis will create a copy of `circle_1` into `circle_2`.\n\n```rust\nprintln!(\"{:?}\", circle_2);\n```\n\nThis will print the debug view of `circle_2`.\n\n## Custom Derive Macros\n\nSo far, we've only looked at the built-in traits supported by Rust's `derive` macro. However, we are not limited to these built-in traits.\n\nWe can create custom traits and implement them using custom derive macros. These custom derive macros are created using a procedural macro crate called `proc-macro2`. This crate allows the creation of custom procedures for creating new syntactic constructs that can be used everywhere in Rust code.\n\nHere is a simple example of a custom derive macro to calculate the area of a circle based on its radius:\n\n```rust\nuse proc_macro::TokenStream;\nuse quote::quote;\nuse syn::{parse_macro_input, DeriveInput};\n\n#[proc_macro_derive(Area)]\npub fn area(input: TokenStream) -> TokenStream {\n    let ast = parse_macro_input!(input as DeriveInput);\n    let name = &ast.ident;\n    let gen = quote! {\n        impl #name {\n            pub fn area(&self) -> f64 {\n                self.radius * self.radius * std::f64::consts::PI\n            }\n        }\n    };\n    gen.into()\n}\n```\n\nThis macro can now be used to derive an area method for the `Circle` struct:\n\n```rust\n#[derive(Area)]\nstruct Circle {\n    radius: f64,\n}\n```\n\nAnd the `area` method can be accessed using:\n\n```rust\nlet circle = Circle { radius: 2.0 };\nprintln!(\"The area of the circle is {}\", circle.area());\n```\n\nThis will print the area of the `Circle` object.\n\n## Conclusion\n\nIn conclusion, we've looked at creating custom data types in Rust and how to use Rust's `derive` macro to automatically generate implementation code for commonly used Rust traits. We also explored how we can create our custom traits and implement them with custom derive macros using a procedural macro crate called `proc-macro2`.\n\nThe ability to derive traits for our custom data types helps eliminate boilerplate code and enables us to focus on what's essential: implementing the functionality we need. With Rust, we have limitless possibilities for creating custom data types and derive macros."
    },
    "finish_reason": "stop"
   }
  ],
  "usage": {
   "prompt_tokens": 2188,
   "completion_tokens": 1133,
   "total_tokens": 3321
  }
 }
}
{
 "prompt": [
  {
   "role": "system",
   "content": "You are the author of a personal technical blog about software engineering and computer science subjects."
  },
  {
   "role": "system",
   "content": "Write as though you are the author of this resume:\n+++\ntitle = \"Résumé\"\ndescription = \"Derek Cuevas' Résumé\"\ndate = \"2023-06-11\"\nor = \"Derek Cuevas\"\n+++\n\n# Derek Cuevas\n\nSenior Software Engineer | [GitHub](https://github.com/derekcuevas) (contact email in bio) \n\n---\n\n## Summary\n\nSenior Software Engineer with 8 years of professional experience, specializing in systems software engineering and low-latency, real-time product development.\n\nExperienced in leading teams and delivering Emmy award-winning projects. Passionate about functional programming and building high performance real-time systems. Skilled in a variety of programming languages and technologies with expertise in [Rust](https://www.rust-lang.org/) and [TypeScript](https://www.typescriptlang.org/).\n\n---\n\n## Programming Languages\n\n- **Proficient:** Rust, TypeScript (& JavaScript), Elm, Clojure\n- **Experienced:** Elixir, Swift, Objective-C, SQL\n\n---\n\n## Technologies, Skills, and Interests\n\n- **Rust:** Tokio, Futures, Hyper, Actix, Warp\n- **Platforms and Services:** AWS, Docker,  PostgreSQL, Redis, Apache Pulsar, RabbitMQ, Prometheus, GitLab CI/CD, Node.js, Deno, HTML & CSS\n- **Tooling:** Git, Vim, Bash\n- **Frameworks:** React, React Native, Redux, RxJs, SwiftUI, Phoenix\n- **Protocols:** HTTP, GraphQL, WebSockets, ØMQ, Pub/Sub, JSON, MessagePack, Protobuf, FlatBuffers\n- **Paradigms:** Functional Programming, Real-time Systems\n\n---\n\n## Professional Experience\n\n### Senior Software Engineer II (Lead), Second Spectrum (acquired by Genius Sports)\n(*January 2021 - Current*)\n\n[https://geniussports.com/](https://geniussports.com/)\n\n- Technical lead for the \"Real-time Augmentation Engine\" project's system team, developing low-latency and real-time augmented reality experiences for live TV broadcasters of sporting events.\n- Led the development and integration of core systems using `Rust`, `Tokio`, `MPSC channels`, `FFmpeg`, and `Pulsar`.\n- Oversaw operational management and monitoring systems, release management, simulation systems, and data ingestion/export pipelines.\n- Optimized the overall pipeline for 60fps real-time rendering over high definition broadcast feeds.\n- Key contributor to projects recognized with multiple Emmy awards, including the prestigious [George Wensel Technical Achievement Award](https://geniussports.com/customer-stories/cbs-and-genius-win-sports-emmy-for-romovision/) and Amazon's [Outstanding Interactive Experience](https://www.aboutamazon.com/news/entertainment/thursday-night-football-on-prime-video-wins-sports-emmy-award) at the `Sports Emmys`.\n\n### Senior Software Engineer I (Lead), Second Spectrum\n(*January 2019 - January 2021*)\n\n[https://www.secondspectrum.com/](https://www.secondspectrum.com/)\n\n- Led a team in designing and developing the company's first `GraphQL` service serving as a unified gateway for various microservices. Built upon the `Apollo` server framework leveraging `Node.js`, `TypeScript`, `PostgreSQL`, and `Redis` for caching and pub/sub.\n- Developed a dashboard built with `Three.js` for visualizing 3D player tracking datasets and highlighting data discrepancies.\n- Created a prototype `iOS` application for video highlights using `Swift`, `SwiftUI`, and the `Combine` framework.\n- Mentored interns and fellow engineers, fostering collaboration and knowledge sharing.\n\n### Software Engineer, Second Spectrum\n(*August 2016 - January 2019*)\n\n[https://www.secondspectrum.com/](https://www.secondspectrum.com/)\n\n- Developed the operational and quality assurance management application for the company's optical player tracking system. Stack included `Elixir` (with the `Phoenix` framework), `React`, and heavy use of `WebSockets` to sync and display corrections to operators in near real-time.\n- Improved operator efficiency by 100% through the implementation of an automated task selection system.\n- Led the development of the LA Clipper's live streaming web and mobile application \"Clippers CourtVision\". Stack included `Elm` for the web front-end and `React Native` for the mobile app.\n\n### Software Engineer Intern, MindGraph Medical\n(*September 2015 - January 2016*)\n\n- Designed, developed, and deployed the MindGraph Medical website using `Node.js`, `jQuery`, and `Bootstrap`.\n\n---\n\n## Education\n\n**B.S. Computer Science, San Diego State University, San Diego**\n\n(*Class of 2016*)\n\n- [Advanced Certificate in Web and Mobile Applications Development](https://cs.sdsu.edu/about/)\n\n---\n\n## Personal Projects\n\n- [FYGT](https://github.com/DerekCuevas/derekcuevas.github.io): An experimental blog built with `Hugo`, `Deno`, and `ChatGPT`.\n- [Advent of Code 2022](https://github.com/DerekCuevas/advent-of-code-2022): Solutions to Advent of Code programming problems using functional approaches in `Clojure`.\n- [Interview Cake Algorithms Problem Set](https://github.com/DerekCuevas/interview-cake-clj): Solutions to the interview cake programming problems also by exploring functional approaches in `Clojure`.\n- [Friend List](https://github.com/DerekCuevas/friend-list): A non-trivial programming challenge exploring asynchronous side effects with different programming patterns.\n- [Redux Meta Reducer](https://github.com/DerekCuevas/redux-meta-reducer): A `Redux` higher-order reducer for simplifying the state of fetched data.\n- [Avowal](https://github.com/DerekCuevas/avowal): An asynchronous form validation library for `JavaScript`.\n"
  },
  {
   "role": "system",
   "content": "New topics for the blog should be based off of the technical skills, experience, and interests presented in the resume."
  },
  {
   "role": "system",
   "content": "Your previous 40 posts include: \"Building a High-Performance Event Store with Apache Kafka\", \"Building a Highly Scalable Kafka Consumer in Go\", \"Building Type-Safe APIs with TypeScript\", \"Implementing the Flyweight Design Pattern in C\", \"Gaining Insights from Large Datasets Using Delta Lake\", \"Using the Observer Design Pattern in Scala\", \"The Builder Design Pattern in TypeScript\", \"Using Array Partitions in Python for Improved Performance\", \"Advanced Techniques for Debugging Rust Programs\", \"Writing a Domain-Specific Language (DSL) in Haskell\", \"Securely Managing Secrets in Production Applications\", \"Implementing the Factory Method Design Pattern in Dart\", \"Boosting Rust Performance with Allocator Selection\", \"Building Real-Time Audio Applications with WebRTC and Rust\", \"Rust's Pinning API: A Comprehensive Guide\", \"Building a Highly Scalable and Fault-Tolerant Load Balancer with Rust\", \"How to Use AWS Fargate for Highly Scalable and Serverless Containers\", \"How to Build a Recommendation Engine with Apache Spark\", \"Building a Distributed Key-Value Store on Top of Apache Kafka\", \"Building a GraphQL API with Actix-Web and Diesel\", \"Building a High-Performance HTTP Proxy with Nginx\", \"How to Use Kafka to Build Scalable and Fault-Tolerant Distributed Systems\", \"Advanced Techniques for Using PostgreSQL JSONB Data Type\", \"Writing Secure Rust Code: A Deep Dive into Memory Safety\", \"Fine-tuning BERT for Question Answering - A Step-by-Step Guide\", \"How to Use the Decorator Pattern for Flexible and Extensible Code\", \"A Deep Dive into Multithreading with Clojure\", \"How to Design Reactive Microservices Using Event-Driven Architecture\", \"Writing Efficient SQL Queries: Tips and Tricks\", \"Mastering Connection Pooling in Django\", \"Mastering the Actor Model Concurrency Paradigm in Elixir\", \"How to use Elm to build maintainable, efficient, and bug-free front-end applications\", \"How to Use Generators to Create Infinite Sequences in Python\", \"Building High Performance Distributed Data Pipelines with Apache Flink\", \"Implementing a Consistent Hashing Algorithm in TypeScript\", \"The Event Sourcing Design Pattern in TypeScript\", \"How to Write Fast Python Code\", \"Building a High-Availability Microservice Architecture with Modern C++\", \"How to Build a Realtime Collaborative Spreadsheet Application with Elixir and Phoenix LiveView\", \"Using the Adapter Pattern to Integrate Legacy Code\""
  },
  {
   "role": "system",
   "content": "Your writing style is concise, to the point, informative, and focused on detailed technical information."
  },
  {
   "role": "user",
   "content": "Come up with an advanced topic for an expert level reader that is about a particular single feature, fact, pattern, paradigm, convention, theory, framework, library, or best practice."
  },
  {
   "role": "user",
   "content": "The topic should not be related to a previous post."
  },
  {
   "role": "user",
   "content": "Write a post about the topic following the rules defined."
  },
  {
   "role": "user",
   "content": "Use computer code snippets (in the relevant programming language) in order to illustrate the information presented."
  },
  {
   "role": "user",
   "content": "Format the body of the post in the markdown markup language."
  },
  {
   "role": "user",
   "content": "Include the title of the post on the first line."
  },
  {
   "role": "user",
   "content": "Include one to three tags for the post on the second line formatted as a comma separated list, for example: \"Tags: <tag1>, <tag2>\"."
  },
  {
   "role": "user",
   "content": "Do not include or link to images in the post."
  },
  {
   "role": "user",
   "content": "The post should be multiple sections in length and come to a complete finish."
  }
 ],
 "completion": {
  "id": "chatcmpl-7RZ5Oo6NozCCW6SeEfWaONsHGGzEB",
  "object": "chat.completion",
  "created": 1686804082,
  "model": "gpt-3.5-turbo-0613",
  "choices": [
   {
    "index": 0,
    "message": {
     "role": "assistant",
     "content": "# Post Title: Exploring the Reactive Manifesto - Building Resilient and Responsive Systems\n\nTags: Reactive Programming, Resilience, Scalability\n\n---\n\n## Introduction\n\nIn the fast-paced world of software development, building resilient and responsive systems is critical to meet the increasing demands of modern applications. One approach that has gained significant traction in recent years is the Reactive Manifesto. In this post, we will explore the principles and practices behind the Reactive Manifesto and how they can help us build robust and scalable software systems.\n\n---\n\n## Understanding the Reactive Manifesto\n\nThe Reactive Manifesto is a set of principles that guide the design and architecture of responsive, resilient, and elastic systems. It focuses on four key traits: responsiveness, resilience, elasticity, and message-driven.\n\n### 1. Responsiveness\n\nResponsiveness is about providing timely responses to user interactions and maintaining a smooth user experience even under heavy load. Reactive systems should be able to handle a large number of concurrent requests without compromising performance. This can be achieved through the use of non-blocking I/O, asynchronous communication, and event-driven architectures.\n\nTo illustrate this, let's take a look at a simple example in TypeScript using the Node.js framework:\n\n```typescript\nimport { createServer } from 'http';\n\nconst server = createServer((req, res) => {\n  res.writeHead(200, { 'Content-Type': 'text/plain' });\n  res.end('Hello, World!');\n});\n\nserver.listen(3000, () => {\n  console.log('Server is listening on port 3000');\n});\n```\n\nIn this example, we create an HTTP server that responds with a simple message. By utilizing non-blocking I/O and an event-driven model, our server can handle multiple requests concurrently without blocking and slowing down the entire system.\n\n### 2. Resilience\n\nResilience is the ability of a system to recover from failures and continue functioning reliably. Reactive systems should be able to handle faults gracefully, isolate failures, and recover without compromising the overall system stability. Techniques such as circuit breakers, bulkheading, and failure handling strategies can enhance system resilience.\n\nLet's consider an example in Rust using the Actix framework:\n\n```rust\nuse actix_web::{get, web, App, HttpResponse, HttpServer, Responder};\nuse actix_cors::Cors;\n\n#[get(\"/hello\")]\nasync fn hello() -> impl Responder {\n    HttpResponse::Ok().body(\"Hello, World!\")\n}\n\n#[actix_web::main]\nasync fn main() -> std::io::Result<()> {\n    HttpServer::new(|| {\n        App::new()\n            .wrap(Cors::default())\n            .service(hello)\n    })\n    .bind(\"127.0.0.1:3000\")?\n    .run()\n    .await\n}\n```\n\nHere, we use the Actix framework to build a simple API endpoint. By implementing proper error handling and recovery mechanisms, our system can handle unexpected errors and failures, ensuring the overall system remains resilient and available.\n\n### 3. Elasticity\n\nElasticity refers to the ability of a system to dynamically adapt to varying workload and scale resources up or down as needed. Reactive systems should be able to scale horizontally by adding or removing resources to meet demand. Techniques such as auto-scaling, load balancing, and cloud-based deployments enable systems to dynamically adjust resource allocation.\n\nConsider a scenario where we have a Kafka-based messaging system implemented in Elixir using the Phoenix framework. By leveraging the scalability features of Kafka and deploying our application on the cloud, we can easily scale our system to handle increasing message throughput and adjust resource allocation based on demand.\n\n### 4. Message-Driven Architecture\n\nMessage-driven architectures are at the core of reactive systems. Instead of tightly coupling components and relying on synchronous request-response communication, reactive systems rely on asynchronous and loosely coupled message passing. This fosters better scalability, fault-tolerance, and decoupled relationships between components.\n\nLet's take an example of a microservices architecture implemented in Kotlin using Spring Cloud Stream:\n\n```kotlin\nimport org.springframework.boot.autoconfigure.SpringBootApplication\nimport org.springframework.boot.runApplication\nimport org.springframework.messaging.Message\n\n@SpringBootApplication\nclass EventProcessorApplication {\n    @KafkaListener(topics = [\"my-topic\"])\n    fun processMessage(message: Message<String>) {\n        // Process the received message asynchronously\n        println(\"Received Message: ${message.payload}\")\n    }\n}\n\nfun main(args: Array<String>) {\n    runApplication<EventProcessorApplication>(*args)\n}\n```\n\nIn this example, we utilize message-driven communication by consuming messages from a Kafka topic asynchronously. This allows us to process messages independently and ensures loose coupling between services.\n\n---\n\n## Conclusion\n\nThe Reactive Manifesto provides a holistic approach to building resilient and responsive systems in the face of increasing complexity and demands. By embracing the principles of responsiveness, resilience, elasticity, and message-driven architecture, developers can design systems that can handle demanding workloads, recover from failures, and scale dynamically.\n\nIn this post, we explored the four key traits of the Reactive Manifesto and provided code examples in TypeScript, Rust, Elixir, and Kotlin to illustrate these concepts. By incorporating these principles into your software architecture and design, you can create robust and scalable systems that meet the challenges of modern software development.\n\nSo, embrace the Reactive Manifesto, and empower your systems to be more responsive, resilient, and adaptive!"
    },
    "finish_reason": "stop"
   }
  ],
  "usage": {
   "prompt_tokens": 2012,
   "completion_tokens": 1087,
   "total_tokens": 3099
  }
 }
}
{
 "prompt": [
  {
   "role": "system",
   "content": "You are the author of a personal technical blog about software engineering and computer science subjects."
  },
  {
   "role": "system",
   "content": "Write as though you are the author of this resume:\n+++\ntitle = \"Résumé\"\ndescription = \"Derek Cuevas' Résumé\"\ndate = \"2023-06-11\"\nor = \"Derek Cuevas\"\n+++\n\n# Derek Cuevas\n\nSenior Software Engineer | [GitHub](https://github.com/derekcuevas) (contact email in bio) \n\n---\n\n## Summary\n\nSenior Software Engineer with 8 years of professional experience, specializing in systems software engineering and low-latency, real-time product development.\n\nExperienced in leading teams and delivering Emmy award-winning projects. Passionate about functional programming and building high performance real-time systems. Skilled in a variety of programming languages and technologies with expertise in [Rust](https://www.rust-lang.org/) and [TypeScript](https://www.typescriptlang.org/).\n\n---\n\n## Programming Languages\n\n- **Proficient:** Rust, TypeScript (& JavaScript), Elm, Clojure\n- **Experienced:** Elixir, Swift, Objective-C, SQL\n\n---\n\n## Technologies, Skills, and Interests\n\n- **Rust:** Tokio, Futures, Hyper, Actix, Warp\n- **Platforms and Services:** AWS, Docker,  PostgreSQL, Redis, Apache Pulsar, RabbitMQ, Prometheus, GitLab CI/CD, Node.js, Deno, HTML & CSS\n- **Tooling:** Git, Vim, Bash\n- **Frameworks:** React, React Native, Redux, RxJs, SwiftUI, Phoenix\n- **Protocols:** HTTP, GraphQL, WebSockets, ØMQ, Pub/Sub, JSON, MessagePack, Protobuf, FlatBuffers\n- **Paradigms:** Functional Programming, Real-time Systems\n\n---\n\n## Professional Experience\n\n### Senior Software Engineer II (Lead), Second Spectrum (acquired by Genius Sports)\n(*January 2021 - Current*)\n\n[https://geniussports.com/](https://geniussports.com/)\n\n- Technical lead for the \"Real-time Augmentation Engine\" project's system team, developing low-latency and real-time augmented reality experiences for live TV broadcasters of sporting events.\n- Led the development and integration of core systems using `Rust`, `Tokio`, `MPSC channels`, `FFmpeg`, and `Pulsar`.\n- Oversaw operational management and monitoring systems, release management, simulation systems, and data ingestion/export pipelines.\n- Optimized the overall pipeline for 60fps real-time rendering over high definition broadcast feeds.\n- Key contributor to projects recognized with multiple Emmy awards, including the prestigious [George Wensel Technical Achievement Award](https://geniussports.com/customer-stories/cbs-and-genius-win-sports-emmy-for-romovision/) and Amazon's [Outstanding Interactive Experience](https://www.aboutamazon.com/news/entertainment/thursday-night-football-on-prime-video-wins-sports-emmy-award) at the `Sports Emmys`.\n\n### Senior Software Engineer I (Lead), Second Spectrum\n(*January 2019 - January 2021*)\n\n[https://www.secondspectrum.com/](https://www.secondspectrum.com/)\n\n- Led a team in designing and developing the company's first `GraphQL` service serving as a unified gateway for various microservices. Built upon the `Apollo` server framework leveraging `Node.js`, `TypeScript`, `PostgreSQL`, and `Redis` for caching and pub/sub.\n- Developed a dashboard built with `Three.js` for visualizing 3D player tracking datasets and highlighting data discrepancies.\n- Created a prototype `iOS` application for video highlights using `Swift`, `SwiftUI`, and the `Combine` framework.\n- Mentored interns and fellow engineers, fostering collaboration and knowledge sharing.\n\n### Software Engineer, Second Spectrum\n(*August 2016 - January 2019*)\n\n[https://www.secondspectrum.com/](https://www.secondspectrum.com/)\n\n- Developed the operational and quality assurance management application for the company's optical player tracking system. Stack included `Elixir` (with the `Phoenix` framework), `React`, and heavy use of `WebSockets` to sync and display corrections to operators in near real-time.\n- Improved operator efficiency by 100% through the implementation of an automated task selection system.\n- Led the development of the LA Clipper's live streaming web and mobile application \"Clippers CourtVision\". Stack included `Elm` for the web front-end and `React Native` for the mobile app.\n\n### Software Engineer Intern, MindGraph Medical\n(*September 2015 - January 2016*)\n\n- Designed, developed, and deployed the MindGraph Medical website using `Node.js`, `jQuery`, and `Bootstrap`.\n\n---\n\n## Education\n\n**B.S. Computer Science, San Diego State University, San Diego**\n\n(*Class of 2016*)\n\n- [Advanced Certificate in Web and Mobile Applications Development](https://cs.sdsu.edu/about/)\n\n---\n\n## Personal Projects\n\n- [FYGT](https://github.com/DerekCuevas/derekcuevas.github.io): An experimental blog built with `Hugo`, `Deno`, and `ChatGPT`.\n- [Advent of Code 2022](https://github.com/DerekCuevas/advent-of-code-2022): Solutions to Advent of Code programming problems using functional approaches in `Clojure`.\n- [Interview Cake Algorithms Problem Set](https://github.com/DerekCuevas/interview-cake-clj): Solutions to the interview cake programming problems also by exploring functional approaches in `Clojure`.\n- [Friend List](https://github.com/DerekCuevas/friend-list): A non-trivial programming challenge exploring asynchronous side effects with different programming patterns.\n- [Redux Meta Reducer](https://github.com/DerekCuevas/redux-meta-reducer): A `Redux` higher-order reducer for simplifying the state of fetched data.\n- [Avowal](https://github.com/DerekCuevas/avowal): An asynchronous form validation library for `JavaScript`.\n"
  },
  {
   "role": "system",
   "content": "New topics for the blog should be based off of the technical skills, experience, and interests presented in the resume."
  },
  {
   "role": "system",
   "content": "Your previous 40 posts include: \"Post Exploring the Reactive Manifesto - Building Resilient and Responsive Systems\", \"Building a High-Performance Event Store with Apache Kafka\", \"Building a Highly Scalable Kafka Consumer in Go\", \"Building Type-Safe APIs with TypeScript\", \"Implementing the Flyweight Design Pattern in C\", \"Gaining Insights from Large Datasets Using Delta Lake\", \"Using the Observer Design Pattern in Scala\", \"The Builder Design Pattern in TypeScript\", \"Using Array Partitions in Python for Improved Performance\", \"Advanced Techniques for Debugging Rust Programs\", \"Writing a Domain-Specific Language (DSL) in Haskell\", \"Securely Managing Secrets in Production Applications\", \"Implementing the Factory Method Design Pattern in Dart\", \"Boosting Rust Performance with Allocator Selection\", \"Building Real-Time Audio Applications with WebRTC and Rust\", \"Rust's Pinning API: A Comprehensive Guide\", \"Building a Highly Scalable and Fault-Tolerant Load Balancer with Rust\", \"How to Use AWS Fargate for Highly Scalable and Serverless Containers\", \"How to Build a Recommendation Engine with Apache Spark\", \"Building a Distributed Key-Value Store on Top of Apache Kafka\", \"Building a GraphQL API with Actix-Web and Diesel\", \"Building a High-Performance HTTP Proxy with Nginx\", \"How to Use Kafka to Build Scalable and Fault-Tolerant Distributed Systems\", \"Advanced Techniques for Using PostgreSQL JSONB Data Type\", \"Writing Secure Rust Code: A Deep Dive into Memory Safety\", \"Fine-tuning BERT for Question Answering - A Step-by-Step Guide\", \"How to Use the Decorator Pattern for Flexible and Extensible Code\", \"A Deep Dive into Multithreading with Clojure\", \"How to Design Reactive Microservices Using Event-Driven Architecture\", \"Writing Efficient SQL Queries: Tips and Tricks\", \"Mastering Connection Pooling in Django\", \"Mastering the Actor Model Concurrency Paradigm in Elixir\", \"How to use Elm to build maintainable, efficient, and bug-free front-end applications\", \"How to Use Generators to Create Infinite Sequences in Python\", \"Building High Performance Distributed Data Pipelines with Apache Flink\", \"Implementing a Consistent Hashing Algorithm in TypeScript\", \"The Event Sourcing Design Pattern in TypeScript\", \"How to Write Fast Python Code\", \"Building a High-Availability Microservice Architecture with Modern C++\", \"How to Build a Realtime Collaborative Spreadsheet Application with Elixir and Phoenix LiveView\""
  },
  {
   "role": "system",
   "content": "Your writing style is concise, to the point, informative, and focused on detailed technical information."
  },
  {
   "role": "user",
   "content": "Come up with an advanced topic for an expert level reader that is about a particular single feature, fact, pattern, paradigm, convention, theory, framework, library, or best practice."
  },
  {
   "role": "user",
   "content": "The topic should not be related to a previous post."
  },
  {
   "role": "user",
   "content": "Write a post about the topic following the rules defined."
  },
  {
   "role": "user",
   "content": "Use computer code snippets (in the relevant programming language) in order to illustrate the information presented."
  },
  {
   "role": "user",
   "content": "Format the body of the post in the markdown markup language."
  },
  {
   "role": "user",
   "content": "Include the title of the post on the first line."
  },
  {
   "role": "user",
   "content": "Include one to three tags for the post on the second line formatted as a comma separated list, for example: \"Tags: <tag1>, <tag2>\"."
  },
  {
   "role": "user",
   "content": "Do not include or link to images in the post."
  },
  {
   "role": "user",
   "content": "The post should be multiple sections in length and come to a complete finish."
  }
 ],
 "completion": {
  "id": "chatcmpl-7RZ7mggYHKjjzB9KQVSHLchKCccbA",
  "object": "chat.completion",
  "created": 1686804230,
  "model": "gpt-3.5-turbo-0613",
  "choices": [
   {
    "index": 0,
    "message": {
     "role": "assistant",
     "content": "# Post Title: Exploring the Power of WebAssembly for High-Performance Computing\n\nTags: WebAssembly, Performance, Computing\n\n---\n\nWebAssembly (Wasm) has gained significant popularity in recent years as a powerful technology for running high-performance applications in web browsers. But its potential extends beyond the realm of web development. In this post, we'll dive deep into the world of WebAssembly and explore how it can be leveraged for high-performance computing.\n\n## What is WebAssembly?\n\nWebAssembly is a binary instruction format designed to be executed at near-native speed in web browsers. Originally created by a collaboration between major browser vendors, including Google, Mozilla, Microsoft, and Apple, WebAssembly offers a way to execute code written in languages other than JavaScript with near-native performance. It serves as a compilation target for languages like C, C++, Rust, and many more.\n\n## Benefits of WebAssembly for High-Performance Computing\n\n### Efficiency and Performance\n\nOne of the key advantages of WebAssembly for high-performance computing is its efficiency and performance. By harnessing the power of low-level operations, WebAssembly allows developers to write code that can be executed efficiently, making it ideal for computationally intensive tasks. The ability to interact with low-level memory and perform direct operations on it enables highly optimized algorithms and data manipulations, resulting in significant performance gains.\n\n### Portable and Platform Agnostic\n\nWebAssembly provides a portable execution environment that can run on various platforms, including desktop and mobile browsers. This platform independence allows high-performance computing applications written in languages like C++ or Rust to be executed seamlessly across different operating systems, making it easier to deploy and distribute performance-critical applications. \n\n### Access to Existing Libraries and Ecosystems\n\nWebAssembly enables seamless integration with existing libraries and ecosystems written in languages like C and C++. This opens up a world of possibilities, as developers can leverage well-established libraries and frameworks to enhance their high-performance computing applications. With tools like WebAssembly bindings and interop mechanisms, developers can easily access these libraries from WebAssembly and take advantage of their powerful functionality.\n\n## Real-World Use Cases\n\nLet's explore some real-world use cases where WebAssembly has been successfully applied for high-performance computing:\n\n### Scientific Computing\n\nWebAssembly has shown great potential for scientific computing tasks that require high-performance numeric calculations and complex simulations. By utilizing languages like C or Fortran, scientists and researchers can run their computationally intensive algorithms directly in the browser, allowing for interactive data visualization and analysis without compromising performance.\n\n```c\n#include <stdio.h>\n\nvoid performSimulation(double input) {\n  // Perform complex simulation here\n  printf(\"Simulation result: %f\", input * 10.0);\n}\n\nint main() {\n  performSimulation(5.0);\n  return 0;\n}\n```\n\n### Data Processing and Visualization\n\nWebAssembly has become a game-changer for data processing and visualization tasks, enabling powerful data manipulation and visualization libraries to run efficiently in the browser. With frameworks like D3.js, developers can create interactive data visualizations with millions of data points, perform complex filtering and transformations, and process large datasets with blazing-fast performance.\n\n```javascript\n// JavaScript code to call WebAssembly function\nconst wasmModule = new WebAssembly.Module(/* WebAssembly module */);\nconst wasmInstance = new WebAssembly.Instance(wasmModule);\n\nwasmInstance.exports.performDataProcessing(/* input data */);\n```\n\n### Virtualization and Emulation\n\nWebAssembly's ability to interact with low-level memory operations makes it an ideal candidate for virtualization and emulation tasks. Developers can leverage this feature to run virtual machines, emulate hardware components, and execute legacy software systems, all within the browser environment.\n\n## Conclusion\n\nWebAssembly holds tremendous potential for high-performance computing, enabling developers to unlock new possibilities in areas such as scientific computing, data processing, and virtualization. With its efficiency, portability, and access to existing libraries, WebAssembly opens up an exciting avenue for running performance-critical applications directly in the browser.\n\nAs WebAssembly continues to evolve and gain wider adoption, we can expect even more exciting use cases and performance improvements in the future. By exploring the power of WebAssembly and incorporating it into our high-performance computing workflows, we can push the boundaries of what's possible in the browser and beyond.\n\nSo, why not dive into the world of WebAssembly and unlock the true potential of high-performance computing?\n\nHappy coding!"
    },
    "finish_reason": "stop"
   }
  ],
  "usage": {
   "prompt_tokens": 2018,
   "completion_tokens": 884,
   "total_tokens": 2902
  }
 }
}
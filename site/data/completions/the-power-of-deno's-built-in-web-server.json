{
 "model": "gpt-3.5-turbo-0301",
 "prompt": [
  {
   "role": "user",
   "content": "You are the author of a personal technical blog about software engineering and computer science subjects."
  },
  {
   "role": "user",
   "content": "New topics for blog posts should be based off of the technical skills, experience, and interests presented in the following resume:\n+++\ntitle = \"Résumé\"\ndescription = \"Derek Cuevas' Résumé\"\ndate = \"2023-06-11\"\nor = \"Derek Cuevas\"\n+++\n\n# Derek Cuevas\n\n[GitHub](https://github.com/derekcuevas) (contact email in bio) \n\n---\n\n## Summary\n\nSenior Software Engineer with 8 years of professional experience, specializing in systems software engineering and low-latency, real-time product development.\n\nExperienced in leading teams and delivering Emmy award-winning projects. Passionate about functional programming and building high performance real-time systems. Skilled in a variety of programming languages and technologies with expertise in [Rust](https://www.rust-lang.org/) and [TypeScript](https://www.typescriptlang.org/).\n\n---\n\n## Programming Languages\n\n- **Proficient:** Rust, TypeScript (& JavaScript), Clojure, Elm\n- **Experienced:** Swift, Elixir, Objective-C, SQL\n\n---\n\n## Technologies, Skills, and Interests\n\n- **Rust:** Tokio, Futures, Hyper, Actix, Warp\n- **Platforms and Services:** AWS, Docker,  PostgreSQL, Redis, Apache Pulsar, RabbitMQ, Prometheus, GitLab CI/CD, Node.js, Deno, HTML & CSS\n- **Tooling:** Git, Vim, Bash\n- **Frameworks:** React, React Native, Redux, RxJs, SwiftUI, Phoenix\n- **Protocols:** HTTP, GraphQL, WebSockets, ØMQ, Pub/Sub, JSON, MessagePack, Protobuf, FlatBuffers\n- **Paradigms:** Functional Programming, Real-time Systems\n\n---\n\n## Professional Experience\n\n### Senior Software Engineer II (Lead), Second Spectrum (acquired by Genius Sports)\n(*January 2021 - Current*)\n\n[https://geniussports.com/](https://geniussports.com/)\n\n- Technical lead for the \"Real-time Augmentation Engine\" project's system team, developing low-latency and real-time augmented reality experiences for live TV broadcasters of sporting events.\n- Led the development and integration of core systems using `Rust`, `Tokio`, `MPSC channels`, `FFmpeg`, and `Pulsar`.\n- Oversaw operational management and monitoring systems, release management, simulation systems, and data ingestion/export pipelines.\n- Optimized the overall pipeline for 60fps real-time rendering over high definition broadcast feeds.\n- Key contributor to projects recognized with multiple Emmy awards, including the prestigious [George Wensel Technical Achievement Award](https://geniussports.com/customer-stories/cbs-and-genius-win-sports-emmy-for-romovision/) and Amazon's [Outstanding Interactive Experience](https://www.aboutamazon.com/news/entertainment/thursday-night-football-on-prime-video-wins-sports-emmy-award) at the `Sports Emmys`.\n\n### Senior Software Engineer I (Lead), Second Spectrum\n(*January 2019 - January 2021*)\n\n[https://www.secondspectrum.com/](https://www.secondspectrum.com/)\n\n- Led a team in designing and developing the company's first `GraphQL` service serving as a unified gateway for various microservices. Built upon the `Apollo` server framework leveraging `Node.js`, `TypeScript`, `PostgreSQL`, and `Redis` for caching and pub/sub.\n- Developed a dashboard built with `Three.js` for visualizing 3D player tracking datasets and highlighting data discrepancies.\n- Created a prototype `iOS` application for video highlights using `Swift`, `SwiftUI`, and the `Combine` framework.\n- Mentored interns and fellow engineers, fostering collaboration and knowledge sharing.\n\n### Software Engineer, Second Spectrum\n(*August 2016 - January 2019*)\n\n[https://www.secondspectrum.com/](https://www.secondspectrum.com/)\n\n- Developed the operational and quality assurance management application for the company's optical player tracking system. Stack included `Elixir` (with the `Phoenix` framework), `React`, and heavy use of `WebSockets` to sync and display corrections to operators in near real-time.\n- Improved operator efficiency by 100% through the implementation of an automated task selection system.\n- Led the development of the LA Clipper's live streaming web and mobile application \"Clippers CourtVision\". Stack included `Elm` for the web front-end and `React Native` for the mobile app.\n\n### Software Engineer Intern, MindGraph Medical\n(*September 2015 - January 2016*)\n\n- Designed, developed, and deployed the MindGraph Medical website using `Node.js`, `jQuery`, and `Bootstrap`.\n\n---\n\n## Education\n\n**B.S. Computer Science, San Diego State University, San Diego**\n\n(*Class of 2016*)\n\n- [Advanced Certificate in Web and Mobile Applications Development](https://cs.sdsu.edu/about/)\n\n---\n\n## Personal Projects\n\n- [FYGT](https://github.com/DerekCuevas/derekcuevas.github.io): An experimental blog built with `Hugo`, `Deno`, and `ChatGPT`.\n- [Advent of Code 2022](https://github.com/DerekCuevas/advent-of-code-2022): Solutions to Advent of Code programming problems using functional approaches in `Clojure`.\n- [Interview Cake Algorithms Problem Set](https://github.com/DerekCuevas/interview-cake-clj): Solutions to the interview cake programming problems also by exploring functional approaches in `Clojure`.\n- [Friend List](https://github.com/DerekCuevas/friend-list): A non-trivial programming challenge exploring asynchronous side effects with different programming patterns.\n- [Redux Meta Reducer](https://github.com/DerekCuevas/redux-meta-reducer): A `Redux` higher-order reducer for simplifying the state of fetched data.\n- [Avowal](https://github.com/DerekCuevas/avowal): An asynchronous form validation library for `JavaScript`.\n"
  },
  {
   "role": "user",
   "content": "Your previous 60 posts include: \"Mastering Advanced TypeScript Patterns\", \"The Power of Kotlin's Inline Functions\", \"The Power of Rust's const_fn Feature\", \"Understanding the Power of Rust's `Option` Type\", \"Understanding the Principles of Event-Driven Architecture\", \"Mastering the Observer Pattern with Objective-C\", \"The Power of Clojure's Transducers: A Comprehensive Guide\", \"Understanding TypeScript's Union Types\", \"Mastering the Asynchronous Programming in Clojure\", \"Advanced Techniques for Scaling Distributed Systems with Apache Flink\", \"Understanding Rust's String Types\", \"Advanced Error Handling with Rust's Result Type\", \"Building Custom Data Types with Rust's derive Macro\", \"Writing Type-Safe Code with TypeScript's unknown Type\", \"Building High-Performance Websites with Deno\", \"Advanced Techniques for Implementing the Decorator Design Pattern in Rust\", \"Building Robust and Secure GraphQL Servers with Rust\", \"Advanced Techniques for Working with WebSockets in Rust\", \"Understanding the Principles of Reactive Programming in Java\", \"The Power of Rust's Const Generics\", \"Mastering Rust's Parallel Iterator: A Comprehensive Guide\", \"Exploring Advanced Types in TypeScript: Mapped & Conditional Types\", \"Exploring the Rust Standard Library's `io` Module\", \"Mastering the Decorator Pattern in TypeScript\", \"Mastering Protocol Buffers in Rust\", \"Mastering Rust's Memory Allocation System\", \"Modern Web Development with SwiftNIO\", \"Mastering Rust's Result Type\", \"Building High-Performance Machine Learning Pipelines with Rust\", \"Advanced Techniques for Working with PostgreSQL Arrays\", \"Mastering HTML and CSS Accessibility: A Comprehensive Guide\", \"Mastering Apache Pulsar's Message Retention Policy\", \"Mastering TypeScript's Record Type\", \"Mastering Rust's Async/Await Syntax\", \"Mastering the Decorator Pattern in Rust\", \"The Power of Rust's Multithreading Library: A Comprehensive Guide\", \"Mastering the Svelte Framework: A Comprehensive Guide\", \"Best Practices for Integrating React and TypeScript\", \"Deep Dive into Functional Reactive Programming with RxJS\", \"Understanding Java Memory Model: A Comprehensive Guide\", \"Understanding the Fundamentals of Distributed Systems Programming in Go\", \"Effective Techniques for Building Blazing-Fast Mobile Apps with React Native\", \"Understanding the SOLID Principles of Object-Oriented Design\", \"Advanced Techniques for Scaling Node.js Applications\", \"Implementing the Facade Design Pattern in Swift\", \"Building Efficient Mobile Apps with React Native Flexbox\", \"The Power of the Copy-on-Write Methodology\", \"Writing Correct Web3 Smart Contracts with Solidity's Concerned Oxide (SCOCO) Conventions\", \"Demystifying Rust's 'unwrap()' Method\", \"Mastering Rust's Pattern Matching\", \"The Power of Streams in Java\", \"Mastering C++17 Template Argument Deduction\", \"Mastering the Composite Design Pattern in C\", \"Implementing the Command Design Pattern in Kotlin\", \"Mastering the Observer Design Pattern in Rust\", \"Understanding Scala's Implicits: A Comprehensive Guide\", \"Mastering Terraform's State File\", \"Title:\", \"Mastering the Decorator Design Pattern in TypeScript\", \"Mastering the Decorator Pattern in Java\""
  },
  {
   "role": "user",
   "content": "Come up with an advanced topic for an expert level reader that is about a particular single feature, fact, pattern, paradigm, convention, theory, framework, library, or best practice."
  },
  {
   "role": "user",
   "content": "Write a post about the chosen topic following the instructions given below:"
  },
  {
   "role": "user",
   "content": "Your writing style is academic, informative, and focused on detailed technical information."
  },
  {
   "role": "user",
   "content": "The topic should not be related to a previous post."
  },
  {
   "role": "user",
   "content": "Use computer code snippets (in the relevant programming language) in order to illustrate the information presented."
  },
  {
   "role": "user",
   "content": "Format the body of the post in the markdown markup language."
  },
  {
   "role": "user",
   "content": "Come up with a title for the post and include it on the first line."
  },
  {
   "role": "user",
   "content": "Include one to three tags for the post on the second line formatted as a comma separated list, for example: \"Tags: <tag1>, <tag2>\"."
  },
  {
   "role": "user",
   "content": "The post should be multiple sections in length."
  },
  {
   "role": "user",
   "content": "Do not include links to images in the post."
  },
  {
   "role": "user",
   "content": "Do not include contact information in the post."
  },
  {
   "role": "user",
   "content": "Do not add extra whitespace around lists."
  }
 ],
 "completion": {
  "id": "chatcmpl-7a6XW88LPZCJcizaWNQ5Cp9nKLhtn",
  "object": "chat.completion",
  "created": 1688839302,
  "model": "gpt-3.5-turbo-0301",
  "choices": [
   {
    "index": 0,
    "message": {
     "role": "assistant",
     "content": "Title: The Power of Deno's Built-in Web Server\n\nTags: Deno, Web Server, HTTP\n\nDeno is a modern JavaScript/TypeScript runtime designed with security and simplicity in mind. It comes with a built-in web server module that makes it easy to create and serve HTTP requests, making Deno an excellent choice for developing lightweight web applications or prototyping ideas. In this post, we'll explore the power of Deno's built-in web server and how to use it to develop RESTful web services.\n\n## Creating a Basic HTTP Server\nDeno's HTTP server API closely mirrors that of Node.js but comes with built-in TypeScript type definitions and better security features. The following example shows how to create a simple server that listens to incoming requests and returns a \"Hello World\" response.\n\n```typescript\nimport { serve } from 'https://deno.land/std/http/server.ts';\n\nconst PORT = 8080;\nconst server = serve({ port: PORT });\n\nconsole.log(`Server running on http://localhost:${PORT}/`);\n\nfor await (const request of server) {\n  request.respond({ body: \"Hello World\\n\" });\n}\n```\n\nIn this example, we use the `serve` function from the `std/http/server.ts` module to create an HTTP server that listens on port 8080. The `for await` loop listens for incoming requests, and for each request, we call the `respond` method of the request object with the response.\n\n## Handling GET Requests\nHandling HTTP GET requests is straightforward with Deno's web server. In the following example, we'll create a route that returns a JSON object containing a list of users.\n\n```typescript\nimport { serve } from 'https://deno.land/std/http/server.ts';\n\ninterface User {\n  id: number;\n  name: string;\n}\n\nconst users: User[] = [\n  { id: 1, name: \"Alice\" },\n  { id: 2, name: \"Bob\" },\n  { id: 3, name: \"Charlie\" },\n];\n\nconst PORT = 8080;\nconst server = serve({ port: PORT });\n\nconsole.log(`Server running on http://localhost:${PORT}/`);\n\nfor await (const request of server) {\n  if (request.method === \"GET\" && request.url === \"/users\") {\n    request.respond({\n      body: JSON.stringify(users),\n    });\n  } else {\n    request.respond({ status: 404 });\n  }\n}\n```\n\nIn this example, we define an interface for user objects and populate a list of three `User` objects. We then create a route that listens for GET requests to the `/users` URL path and responds by returning the `users` array as a JSON string using `JSON.stringify()`. If the request is not a GET request to the `/users` route, we simply return an HTTP 404 error response.\n\n## Parsing Request Data\nWhen building web applications, it's common to receive data as part of the request body or as URL parameters. Deno's HTTP server API provides methods to parse these request inputs easily. In the following example, we'll create a route that expects a `POST` request with a JSON object containing a user's `id` and `name`, and returns the user's `id` and `name` as part of a JSON object.\n\n```typescript\nimport { serve } from 'https://deno.land/std/http/server.ts';\n\ninterface User {\n  id: number;\n  name: string;\n}\n\nconst users: User[] = [];\n\nconst PORT = 8080;\nconst server = serve({ port: PORT });\n\nconsole.log(`Server running on http://localhost:${PORT}/`);\n\nfor await (const request of server) {\n  if (request.method === \"POST\" && request.url === \"/users\") {\n    const body = await request.json();\n\n    const { id, name }: { id: number, name: string } = body;\n\n    const user = { id, name };\n    users.push(user);\n\n    request.respond({\n      body: JSON.stringify(user),\n    });\n  } else {\n    request.respond({ status: 404 });\n  }\n}\n```\n\nIn this example, we define an empty list of `User` objects and create a route that listens for POST requests to the `/users` URL path. We use the `await request.json()` method to parse the request's JSON body and destructure the `id` and `name` properties into a new `user` object. We then add the user to the `users` array and return the user object as a response. Finally, if the request is not a POST request to the `/users` route, we return an HTTP 404 error response.\n\n## Conclusion\nDeno's built-in web server provides a simple and secure way to create RESTful web services in JavaScript/TypeScript. With the ability to easily handle HTTP requests and parse request data, Deno's HTTP server is an attractive option for developers looking for a lightweight, secure, and scalable way to build web applications and services."
    },
    "finish_reason": "stop"
   }
  ],
  "usage": {
   "prompt_tokens": 2178,
   "completion_tokens": 1028,
   "total_tokens": 3206
  }
 }
}
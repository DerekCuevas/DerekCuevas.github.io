{
 "prompt": [
  {
   "role": "system",
   "content": "You are the author of a personal technical blog about software engineering and computer science subjects."
  },
  {
   "role": "system",
   "content": "Write as though you are the author of this resume:\n+++\ntitle = \"Résumé\"\ndescription = \"Derek Cuevas' Résumé\"\ndate = \"2023-06-11\"\nor = \"Derek Cuevas\"\n+++\n\n# Derek Cuevas\n\n[GitHub](https://github.com/derekcuevas) (contact email in bio) \n\n---\n\n## Summary\n\nSenior Software Engineer with 8 years of professional experience, specializing in systems software engineering and low-latency, real-time product development.\n\nExperienced in leading teams and delivering Emmy award-winning projects. Passionate about functional programming and building high performance real-time systems. Skilled in a variety of programming languages and technologies with expertise in [Rust](https://www.rust-lang.org/) and [TypeScript](https://www.typescriptlang.org/).\n\n---\n\n## Programming Languages\n\n- **Proficient:** Rust, TypeScript (& JavaScript), Elm, Clojure\n- **Experienced:** Elixir, Swift, Objective-C, SQL\n\n---\n\n## Technologies, Skills, and Interests\n\n- **Rust:** Tokio, Futures, Hyper, Actix, Warp\n- **Platforms and Services:** AWS, Docker,  PostgreSQL, Redis, Apache Pulsar, RabbitMQ, Prometheus, GitLab CI/CD, Node.js, Deno, HTML & CSS\n- **Tooling:** Git, Vim, Bash\n- **Frameworks:** React, React Native, Redux, RxJs, SwiftUI, Phoenix\n- **Protocols:** HTTP, GraphQL, WebSockets, ØMQ, Pub/Sub, JSON, MessagePack, Protobuf, FlatBuffers\n- **Paradigms:** Functional Programming, Real-time Systems\n\n---\n\n## Professional Experience\n\n### Senior Software Engineer II (Lead), Second Spectrum (acquired by Genius Sports)\n(*January 2021 - Current*)\n\n[https://geniussports.com/](https://geniussports.com/)\n\n- Technical lead for the \"Real-time Augmentation Engine\" project's system team, developing low-latency and real-time augmented reality experiences for live TV broadcasters of sporting events.\n- Led the development and integration of core systems using `Rust`, `Tokio`, `MPSC channels`, `FFmpeg`, and `Pulsar`.\n- Oversaw operational management and monitoring systems, release management, simulation systems, and data ingestion/export pipelines.\n- Optimized the overall pipeline for 60fps real-time rendering over high definition broadcast feeds.\n- Key contributor to projects recognized with multiple Emmy awards, including the prestigious [George Wensel Technical Achievement Award](https://geniussports.com/customer-stories/cbs-and-genius-win-sports-emmy-for-romovision/) and Amazon's [Outstanding Interactive Experience](https://www.aboutamazon.com/news/entertainment/thursday-night-football-on-prime-video-wins-sports-emmy-award) at the `Sports Emmys`.\n\n### Senior Software Engineer I (Lead), Second Spectrum\n(*January 2019 - January 2021*)\n\n[https://www.secondspectrum.com/](https://www.secondspectrum.com/)\n\n- Led a team in designing and developing the company's first `GraphQL` service serving as a unified gateway for various microservices. Built upon the `Apollo` server framework leveraging `Node.js`, `TypeScript`, `PostgreSQL`, and `Redis` for caching and pub/sub.\n- Developed a dashboard built with `Three.js` for visualizing 3D player tracking datasets and highlighting data discrepancies.\n- Created a prototype `iOS` application for video highlights using `Swift`, `SwiftUI`, and the `Combine` framework.\n- Mentored interns and fellow engineers, fostering collaboration and knowledge sharing.\n\n### Software Engineer, Second Spectrum\n(*August 2016 - January 2019*)\n\n[https://www.secondspectrum.com/](https://www.secondspectrum.com/)\n\n- Developed the operational and quality assurance management application for the company's optical player tracking system. Stack included `Elixir` (with the `Phoenix` framework), `React`, and heavy use of `WebSockets` to sync and display corrections to operators in near real-time.\n- Improved operator efficiency by 100% through the implementation of an automated task selection system.\n- Led the development of the LA Clipper's live streaming web and mobile application \"Clippers CourtVision\". Stack included `Elm` for the web front-end and `React Native` for the mobile app.\n\n### Software Engineer Intern, MindGraph Medical\n(*September 2015 - January 2016*)\n\n- Designed, developed, and deployed the MindGraph Medical website using `Node.js`, `jQuery`, and `Bootstrap`.\n\n---\n\n## Education\n\n**B.S. Computer Science, San Diego State University, San Diego**\n\n(*Class of 2016*)\n\n- [Advanced Certificate in Web and Mobile Applications Development](https://cs.sdsu.edu/about/)\n\n---\n\n## Personal Projects\n\n- [FYGT](https://github.com/DerekCuevas/derekcuevas.github.io): An experimental blog built with `Hugo`, `Deno`, and `ChatGPT`.\n- [Advent of Code 2022](https://github.com/DerekCuevas/advent-of-code-2022): Solutions to Advent of Code programming problems using functional approaches in `Clojure`.\n- [Interview Cake Algorithms Problem Set](https://github.com/DerekCuevas/interview-cake-clj): Solutions to the interview cake programming problems also by exploring functional approaches in `Clojure`.\n- [Friend List](https://github.com/DerekCuevas/friend-list): A non-trivial programming challenge exploring asynchronous side effects with different programming patterns.\n- [Redux Meta Reducer](https://github.com/DerekCuevas/redux-meta-reducer): A `Redux` higher-order reducer for simplifying the state of fetched data.\n- [Avowal](https://github.com/DerekCuevas/avowal): An asynchronous form validation library for `JavaScript`.\n"
  },
  {
   "role": "system",
   "content": "New topics for the blog should be based off of the technical skills, experience, and interests presented in the resume."
  },
  {
   "role": "system",
   "content": "Your previous 40 posts include: \"Building a High-Performance Event Store with Apache Kafka\", \"Building a Highly Scalable Kafka Consumer in Go\", \"Building Type-Safe APIs with TypeScript\", \"Implementing the Flyweight Design Pattern in C\", \"Gaining Insights from Large Datasets Using Delta Lake\", \"Using the Observer Design Pattern in Scala\", \"The Builder Design Pattern in TypeScript\", \"Using Array Partitions in Python for Improved Performance\", \"Advanced Techniques for Debugging Rust Programs\", \"Writing a Domain-Specific Language (DSL) in Haskell\", \"Securely Managing Secrets in Production Applications\", \"Implementing the Factory Method Design Pattern in Dart\", \"Boosting Rust Performance with Allocator Selection\", \"Building Real-Time Audio Applications with WebRTC and Rust\", \"Rust's Pinning API: A Comprehensive Guide\", \"Building a Highly Scalable and Fault-Tolerant Load Balancer with Rust\", \"How to Use AWS Fargate for Highly Scalable and Serverless Containers\", \"How to Build a Recommendation Engine with Apache Spark\", \"Building a Distributed Key-Value Store on Top of Apache Kafka\", \"Building a GraphQL API with Actix-Web and Diesel\", \"Building a High-Performance HTTP Proxy with Nginx\", \"How to Use Kafka to Build Scalable and Fault-Tolerant Distributed Systems\", \"Advanced Techniques for Using PostgreSQL JSONB Data Type\", \"Writing Secure Rust Code: A Deep Dive into Memory Safety\", \"Fine-tuning BERT for Question Answering - A Step-by-Step Guide\", \"How to Use the Decorator Pattern for Flexible and Extensible Code\", \"A Deep Dive into Multithreading with Clojure\", \"How to Design Reactive Microservices Using Event-Driven Architecture\", \"Writing Efficient SQL Queries: Tips and Tricks\", \"Mastering Connection Pooling in Django\", \"Mastering the Actor Model Concurrency Paradigm in Elixir\", \"How to use Elm to build maintainable, efficient, and bug-free front-end applications\", \"How to Use Generators to Create Infinite Sequences in Python\", \"Building High Performance Distributed Data Pipelines with Apache Flink\", \"Implementing a Consistent Hashing Algorithm in TypeScript\", \"The Event Sourcing Design Pattern in TypeScript\", \"How to Write Fast Python Code\", \"Building a High-Availability Microservice Architecture with Modern C++\", \"How to Build a Realtime Collaborative Spreadsheet Application with Elixir and Phoenix LiveView\", \"Using the Adapter Pattern to Integrate Legacy Code\""
  },
  {
   "role": "system",
   "content": "Your writing style is concise, to the point, informative, and focused on detailed technical information."
  },
  {
   "role": "user",
   "content": "Come up with an advanced topic for an expert level reader that is about a particular single feature, fact, pattern, paradigm, convention, theory, framework, library, or best practice."
  },
  {
   "role": "user",
   "content": "The topic should not be related to a previous post."
  },
  {
   "role": "user",
   "content": "Write a post about the topic following the rules defined."
  },
  {
   "role": "user",
   "content": "Use computer code snippets (in the relevant programming language) in order to illustrate the information presented."
  },
  {
   "role": "user",
   "content": "Format the body of the post in the markdown markup language."
  },
  {
   "role": "user",
   "content": "Include the title of the post on the first line."
  },
  {
   "role": "user",
   "content": "Include one to three tags for the post on the second line formatted as a comma separated list, for example: \"Tags: <tag1>, <tag2>\"."
  },
  {
   "role": "user",
   "content": "Do not include or link to images in the post."
  },
  {
   "role": "user",
   "content": "The post should be multiple sections in length and come to a complete finish."
  }
 ],
 "completion": {
  "id": "chatcmpl-7S7jmZ75fGpe7CxhP7gCtae9EAJvf",
  "object": "chat.completion",
  "created": 1686937282,
  "model": "gpt-3.5-turbo-0301",
  "usage": {
   "prompt_tokens": 2022,
   "completion_tokens": 1132,
   "total_tokens": 3154
  },
  "choices": [
   {
    "message": {
     "role": "assistant",
     "content": "How to use Access Control in Go\n\nTags: Golang, Security, Authorization\n\nAs an application grows, it can become increasingly important to enforce access control on specific resources or functionality. In simpler terms, it’s the process of determining whether a user is permitted to access certain actions or parts of an application. As we write Go apps, we'll often want to add some form of access control to our code. This can be done in many ways, but using an access control library is a common solution.\n\nToday, we’ll discuss how to use the casbin access control library with Go and how to integrate it into a typical web application. We'll cover what casbin is, how to write access control policies, and how to enforce access control in a Go web application.\n\n## What is Casbin?\n\nCasbin is a powerful and flexible open-source access control library that provides familiar syntax for writing access control models and adapters for various storage systems (such as file systems, databases or key-value stores) that allow you to save and load the policies. It's unique due to its modularity, allowing you to easily switch between different access control models and policy storage systems.\n\nIt provides two types of access control: Role Based Access Control (RBAC) and Attribute Based Access Control (ABAC). In RBAC, permissions are assigned based on pre-defined roles, whereas in ABAC, permissions are assigned based on attributes, like user roles and custom properties.\n\nNow that we understand the basics of what casbin is, we can start using it in our Go applications.\n\n### Adding Casbin to a Go project\n\nTo add casbin to your Go project, run `go get github.com/casbin/casbin` in your terminal. Once installed, Casbin will have everything you need to add access control to your application.\n\n### Writing Access Control Policies\n\nBefore we can enforce access control on our resources, we need to define what access control looks like. Casbin implements a policy that uses plain english to define access control policies. Here is an example of what an access control policy looks like:\n\n```\np, alice, data1, read\np, bob, data2, write\ng, alice, group1, admin\n```\n\nThis policy defines the permissions for two resources: data1 and data2. Alice is allowed to read data1 and Bob is allowed to write to data2. Additionally, Alice is a member of group1, in which she has the admin role. \n\nYou can write your policies as CSV files, which then must be loaded into the casbin engine. Casbin provides several methods to load policies, but in most cases, you will want to use the `NewEnforcer` method and pass in your policy path and model path.\n\n### Enforcing Access Control\n\nNow that we have our policies defined and loaded, we need to enforce these policies. Once again, we can accomplish this in several ways, but one of the most common approaches is to use middleware.\n\nLet's build a sample web application with a protected route and show how to secure the route using casbin. We will use the popular web framework for Go, [Gin](https://github.com/gin-gonic/gin) for this example.\n\nHere's our work-in-progress web application:\n\n```\npackage main\n\nimport (\n\t\"fmt\"\n\t\"net/http\"\n\n\t\"github.com/gin-gonic/gin\"\n)\n\nfunc main() {\n\trouter := gin.Default()\n\n\trouter.GET(\"/admin\", func(c *gin.Context) {\n\t\tc.JSON(http.StatusOK, gin.H{\"message\": \"Hello from admin!\"})\n\t})\n\n\trouter.Run(\":8080\")\n}\n```\n\nTo add access control, we'll first need to add the casbin middleware. Here's how to add the middleware using casbin's gin adapter:\n\n```\npackage main\n\nimport (\n\t\"github.com/gin-gonic/gin\"\n\t\"github.com/casbin/casbin\"\n\t\"github.com/casbin/casbin/util\"\n)\n\nfunc main() {\n\te := casbin.NewEnforcer(\"path/to/policy.csv\", \"path/to/model.conf\")\n\tadapter := util.NewGinAdapter(router)\n\n\trouter := gin.Default()\n\n\trouter.Use(func(c *gin.Context) {\n\t    if !e.Enforce(c.Request.Header.Get(\"X-User\"), c.Request.RequestURI, c.Request.Method) {\n\t        c.AbortWithStatus(403)\n\t    }\n\n\t    c.Next()\n\t})\n\n\trouter.GET(\"/admin\", func(c *gin.Context) {\n\t\tc.JSON(http.StatusOK, gin.H{\"message\": \"Hello from admin!\"})\n\t})\n\n\trouter.Run(\":8080\")\n}\n```\n\nThe middleware is written as a closure that takes a gin.Context as an argument. We are checking if the request is authorized using the `Enforce` function from casbin. The function checks against the Enforcer policy, which we had loaded earlier. If authorized, the middleware calls c.Next to continue processing the request. Otherwise, the middleware aborts the request with a 403 Unauthorized response.\n\nAnd that's it! You now have the ability to control access to your protected routes based on policies in a CSV file. \n\n## Conclusion\n\nCasbin is an easy-to-use, flexible, and scalable access control library for Go. It provides powerful features for enforcing access control by using roles, attributes and policies defined in plain English sentences. In this post, we covered how to add casbin to a Go web application, how to define access control policies and how to enforce policies using middleware. By implementing access control with casbin, you can add secure, fine-grained permission controls to your applications."
    },
    "finish_reason": "stop",
    "index": 0
   }
  ]
 }
}
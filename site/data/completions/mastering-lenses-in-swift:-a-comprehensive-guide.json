{
 "model": "gpt-3.5-turbo-0301",
 "prompt": [
  {
   "role": "user",
   "content": "You are the author of a personal technical blog about software engineering and computer science subjects."
  },
  {
   "role": "user",
   "content": "New topics for blog posts should be based off of the technical skills, experience, and interests presented in the following resume:\n+++\ntitle = \"Résumé\"\ndescription = \"Derek Cuevas' Résumé\"\ndate = \"2023-06-11\"\nor = \"Derek Cuevas\"\n+++\n\n# Derek Cuevas\n\n[GitHub](https://github.com/derekcuevas) (contact email in bio) \n\n---\n\n## Summary\n\nSenior Software Engineer with 8 years of professional experience, specializing in systems software engineering and low-latency, real-time product development.\n\nExperienced in leading teams and delivering Emmy award-winning projects. Passionate about functional programming and building high performance real-time systems. Skilled in a variety of programming languages and technologies with expertise in [Rust](https://www.rust-lang.org/) and [TypeScript](https://www.typescriptlang.org/).\n\n---\n\n## Programming Languages\n\n- **Proficient:** Rust, TypeScript (& JavaScript), Clojure, Elm\n- **Experienced:** Swift, Elixir, Objective-C, SQL\n\n---\n\n## Technologies, Skills, and Interests\n\n- **Rust:** Tokio, Futures, Hyper, Actix, Warp\n- **Platforms and Services:** AWS, Docker,  PostgreSQL, Redis, Apache Pulsar, RabbitMQ, Prometheus, GitLab CI/CD, Node.js, Deno, HTML & CSS\n- **Tooling:** Git, Vim, Bash\n- **Frameworks:** React, React Native, Redux, RxJs, SwiftUI, Phoenix\n- **Protocols:** HTTP, GraphQL, WebSockets, ØMQ, Pub/Sub, JSON, MessagePack, Protobuf, FlatBuffers\n- **Paradigms:** Functional Programming, Real-time Systems\n\n---\n\n## Professional Experience\n\n### Senior Software Engineer II (Lead), Second Spectrum (acquired by Genius Sports)\n(*January 2021 - Current*)\n\n[https://geniussports.com/](https://geniussports.com/)\n\n- Technical lead for the \"Real-time Augmentation Engine\" project's system team, developing low-latency and real-time augmented reality experiences for live TV broadcasters of sporting events.\n- Led the development and integration of core systems using `Rust`, `Tokio`, `MPSC channels`, `FFmpeg`, and `Pulsar`.\n- Oversaw operational management and monitoring systems, release management, simulation systems, and data ingestion/export pipelines.\n- Optimized the overall pipeline for 60fps real-time rendering over high definition broadcast feeds.\n- Key contributor to projects recognized with multiple Emmy awards, including the prestigious [George Wensel Technical Achievement Award](https://geniussports.com/customer-stories/cbs-and-genius-win-sports-emmy-for-romovision/) and Amazon's [Outstanding Interactive Experience](https://www.aboutamazon.com/news/entertainment/thursday-night-football-on-prime-video-wins-sports-emmy-award) at the `Sports Emmys`.\n\n### Senior Software Engineer I (Lead), Second Spectrum\n(*January 2019 - January 2021*)\n\n[https://www.secondspectrum.com/](https://www.secondspectrum.com/)\n\n- Led a team in designing and developing the company's first `GraphQL` service serving as a unified gateway for various microservices. Built upon the `Apollo` server framework leveraging `Node.js`, `TypeScript`, `PostgreSQL`, and `Redis` for caching and pub/sub.\n- Developed a dashboard built with `Three.js` for visualizing 3D player tracking datasets and highlighting data discrepancies.\n- Created a prototype `iOS` application for video highlights using `Swift`, `SwiftUI`, and the `Combine` framework.\n- Mentored interns and fellow engineers, fostering collaboration and knowledge sharing.\n\n### Software Engineer, Second Spectrum\n(*August 2016 - January 2019*)\n\n[https://www.secondspectrum.com/](https://www.secondspectrum.com/)\n\n- Developed the operational and quality assurance management application for the company's optical player tracking system. Stack included `Elixir` (with the `Phoenix` framework), `React`, and heavy use of `WebSockets` to sync and display corrections to operators in near real-time.\n- Improved operator efficiency by 100% through the implementation of an automated task selection system.\n- Led the development of the LA Clipper's live streaming web and mobile application \"Clippers CourtVision\". Stack included `Elm` for the web front-end and `React Native` for the mobile app.\n\n### Software Engineer Intern, MindGraph Medical\n(*September 2015 - January 2016*)\n\n- Designed, developed, and deployed the MindGraph Medical website using `Node.js`, `jQuery`, and `Bootstrap`.\n\n---\n\n## Education\n\n**B.S. Computer Science, San Diego State University, San Diego**\n\n(*Class of 2016*)\n\n- [Advanced Certificate in Web and Mobile Applications Development](https://cs.sdsu.edu/about/)\n\n---\n\n## Personal Projects\n\n- [FYGT](https://github.com/DerekCuevas/derekcuevas.github.io): An experimental blog built with `Hugo`, `Deno`, and `ChatGPT`.\n- [Advent of Code 2022](https://github.com/DerekCuevas/advent-of-code-2022): Solutions to Advent of Code programming problems using functional approaches in `Clojure`.\n- [Interview Cake Algorithms Problem Set](https://github.com/DerekCuevas/interview-cake-clj): Solutions to the interview cake programming problems also by exploring functional approaches in `Clojure`.\n- [Friend List](https://github.com/DerekCuevas/friend-list): A non-trivial programming challenge exploring asynchronous side effects with different programming patterns.\n- [Redux Meta Reducer](https://github.com/DerekCuevas/redux-meta-reducer): A `Redux` higher-order reducer for simplifying the state of fetched data.\n- [Avowal](https://github.com/DerekCuevas/avowal): An asynchronous form validation library for `JavaScript`.\n"
  },
  {
   "role": "user",
   "content": "Your previous 60 posts include: \"Deep Dive into Pulsar's Schema Registry\", \"Mastering the Decorator Pattern in TypeScript: Best Practices and Examples\", \"Exploring the Benefits of Declarative Programming in React\", \"Understanding CQRS and Event Sourcing: A Comprehensive Guide\", \"Mastering Apache Flink for Stream Processing\", \"Demystifying Rust's Ownership Model: A Comprehensive Guide\", \"Mastering Java Generics: A Comprehensive Guide\", \"Mastering Reactive Programming with RxJS: Advanced Techniques\", \"A Comprehensive Guide to Threading in Rust\", \"Mastering the Observer Pattern with Rust\", \"Exploring the Power of Rust's Ownership Model: A Comprehensive Guide\", \"The Power of Rust's Clippy: A Comprehensive Guide\", \"Exploring the Disadvantages of Promises in JavaScript\", \"Exploring the Fundamentals of Tail-Call Optimization in JavaScript\", \"Mastering Distributed Systems with Apache BookKeeper\", \"Exploring the Power of Rust's Type System: A Comprehensive Guide\", \"Mastering Asynchronous Event-Driven Architecture with Apache Kafka\", \"Advanced Techniques for Distributed System Design using Apache Cassandra\", \"Exploring the Underlying Architecture of TypeScript\", \"Functional Reactive Programming with Elm: A Comprehensive Guide\", \"Exploring the Power of Clojure's Persistent Data Structures\", \"The Power of Rust's Multithreading Library: rayon\", \"The Power of the `async` Keyword in Rust: A Comprehensive Guide\", \"Mastering Cache Invalidation Strategies: A Comprehensive Guide\", \"Mastering Rust's Serialization and Deserialization: A Comprehensive Guide\", \"Mastering AWS S3 for High Availability: A Comprehensive Guide\", \"Exploring the Fundamentals of Reactive Programming\", \"Mastering Rust's Pinning: An Advanced Guide\", \"Understanding Higher Order Functions in TypeScript\", \"Mastering Async/Await in TypeScript: A Comprehensive Guide\", \"Building High Availability Systems with Apache ZooKeeper\", \"Mastering Rust's Unsafe Keyword: A Comprehensive Guide\", \"The Power of Immutable Data Structures in JavaScript\", \"Building a Highly Available System with Apache ZooKeeper\", \"Mastering Persistent Connections in Java\", \"Mastering Real-Time Communication with WebSockets in Elixir\", \"Understanding the Reactive Stream Pattern\", \"Understanding the Power of Rust's Macros\", \"Mastering Rust's Futures: An Advanced Guide\", \"Advanced Techniques for Working with Rust's Borrow Checker\", \"Understanding the Difference Between Block and Inline Elements in HTML\", \"Mastering Kafka Connect: A Comprehensive Guide\", \"Effective Error Handling in Swift: Best Practices and Patterns\", \"The Power of Kotlin's Coroutines: A Comprehensive Guide\", \"Mastering Asynchronous Programming in Rust: A Comprehensive Guide\", \"Building Custom Collectors in Java: A Comprehensive Guide\", \"The Art of Domain-Driven Design\", \"Exploring the Power of React's Context API: A Comprehensive Guide\", \"Mastering the Observer Pattern with Swift\", \"Mastering the Actor Model with Elixir\", \"Mastering Rust's Memory Safety Paradigm\", \"Mastering Quicksort Algorithm in Clojure\", \"Mastering the Builder Design Pattern in Java\", \"Building Resilient Distributed Systems with Flink\", \"Building Real-Time Applications with Go Channels\", \"Mastering Zero-Knowledge Proofs: A Comprehensive Guide\", \"The Power of Ruby's Metaprogramming Techniques\", \"Beyond the Basics of React Performance: Advanced Techniques for Optimizing your Application\", \"Mastering Zero-Copy I/O in Rust\", \"Mastering GraphQL Subscriptions with Rust\""
  },
  {
   "role": "user",
   "content": "Come up with an advanced topic for an expert level reader that is about a particular single feature, fact, pattern, paradigm, convention, theory, framework, library, or best practice."
  },
  {
   "role": "user",
   "content": "Write a post about the chosen topic following the instructions given below:"
  },
  {
   "role": "user",
   "content": "Your writing style is academic, informative, and focused on detailed technical information."
  },
  {
   "role": "user",
   "content": "The topic should not be related to a previous post."
  },
  {
   "role": "user",
   "content": "Use computer code snippets (in the relevant programming language) in order to illustrate the information presented."
  },
  {
   "role": "user",
   "content": "Format the body of the post in the markdown markup language."
  },
  {
   "role": "user",
   "content": "Come up with a title for the post and include it on the first line."
  },
  {
   "role": "user",
   "content": "Include one to three tags for the post on the second line formatted as a comma separated list, for example: \"Tags: <tag1>, <tag2>\"."
  },
  {
   "role": "user",
   "content": "The post should be multiple sections in length."
  },
  {
   "role": "user",
   "content": "Do not include links to images in the post."
  },
  {
   "role": "user",
   "content": "Do not include contact information in the post."
  },
  {
   "role": "user",
   "content": "Do not add extra whitespace around lists."
  }
 ],
 "completion": {
  "id": "chatcmpl-7wKWwfsJuVdqeyRfD2lS9zYDf3WMr",
  "object": "chat.completion",
  "created": 1694136298,
  "model": "gpt-3.5-turbo-0301",
  "choices": [
   {
    "index": 0,
    "message": {
     "role": "assistant",
     "content": "Title: Mastering Lenses in Swift: A Comprehensive Guide\n\nTags: Swift, Functional Programming, Lens\n\n## Introduction\n\nFunctional programming is a programming paradigm that focuses on functions as primary building blocks, and immutable data as primary inputs and outputs. Lenses are a functional programming concept that provide a way to access and modify nested data structures in a composable and type-safe manner.\n\nIn this post, we will explore what lenses are, and how to use them in Swift. We will start with the basics of functional programming, move on to lenses, and then delve into some advanced topics. By the end of this post, you'll have a solid understanding of lenses, and be able to use them in your own code.\n\n## Functional Programming Basics\n\nSwift supports many concepts from functional programming, including first-class functions, immutability, and higher-order functions. Let's start by reviewing these concepts briefly.\n\n### First-Class Functions\n\nIn Swift, functions are first-class citizens. This means that functions can be used just like any other type, including being passed as arguments to other functions, returned from functions, and stored in variables or constants. Here is an example:\n\n```swift\nfunc timesTwo(_ x: Int) -> Int {\n    return x * 2\n}\n\nlet array = [1, 2, 3, 4, 5]\nlet newArray = array.map(timesTwo)\nprint(newArray) // [2, 4, 6, 8, 10]\n```\n\nIn this example, `timesTwo` is a function that takes an `Int` and returns an `Int`. We then use this function as an argument to the `map` function, which applies `timesTwo` to each element of the array, and returns a new array with the results.\n\n### Immutability\n\nIn functional programming, data is immutable. This means that once a value is created, it cannot be changed. Instead, new values are created based on old values. Immutability has many advantages, including thread safety, more predictable code, and easier debugging.\n\nHere's an example of immutability in Swift:\n\n```swift\nstruct Point {\n    let x: Int\n    let y: Int\n}\n\nlet point = Point(x: 2, y: 3)\nlet newPoint = Point(x: point.x + 1, y: point.y + 1)\nprint(newPoint) // Point(x: 3, y: 4)\n```\n\nIn this example, `Point` is a struct with two immutable properties, `x` and `y`. We create a new point based on an old point, but we do not modify the original point.\n\n### Higher-Order Functions\n\nHigher-order functions are functions that take one or more functions as arguments, and/or return a function as a result. Functions like `map`, `filter`, and `reduce` are examples of higher-order functions.\n\n```swift\nlet array = [1, 2, 3, 4, 5]\nlet evenArray = array.filter { $0 % 2 == 0 }\nprint(evenArray) // [2, 4]\n```\n\nIn this example, `filter` is a higher-order function that takes a closure as an argument. The closure `$0 % 2 == 0` tests whether a given element of the array is even or odd.\n\n## Lenses\n\nNow that we've covered the basics of functional programming, let's talk about lenses. A lens is a functional programming construct that provides a way to get and set nested values in an immutable data structure. Think of a lens as a \"window\" into a data structure, that allows us to see and modify a specific part of it.\n\n### Creating a Lens\n\nIn Swift, a lens is typically implemented as a pair of functions: a `get` function that gets a value from a data structure, and a `set` function that sets a value in a data structure. Here's an example:\n\n```swift\nstruct Person {\n    let name: String\n    let address: Address\n}\n\nstruct Address {\n    let street: String\n    let city: String\n}\n\nlet person = Person(name: \"Alice\",\n                    address: Address(street: \"123 Main Street\",\n                                      city: \"Anytown\"))\n\nfunc addressLens() -> Lens<Person, Address> {\n    return Lens(\n        get: { (person: Person) -> Address in return person.address },\n        set: { (address: Address) -> (Person) -> Person in\n            return { (person: Person) -> Person in\n                return Person(name: person.name, address: address)\n            }\n        }\n    )\n}\n\nlet lens = addressLens()\nlet address = lens.get(person)\nprint(address) // Address(street: \"123 Main Street\", city: \"Anytown\")\n\nlet newPerson = lens.set(Address(street: \"456 First Ave\", city: \"New City\"))(person)\nprint(newPerson) // Person(name: \"Alice\", address: Address(street: \"456 First Ave\", city: \"New City\"))\n```\n\nIn this example, we define a `Person` struct with a nested `Address` struct. We then define a lens for the `Address` property of the `Person` struct, using a `get` function that returns the `Address` property of a given `Person`, and a `set` function that returns a new `Person` with the `Address` property replaced.\n\nWe can use the `get` and `set` functions to get and set the `Address` property of a `Person`, respectively. The `set` function returns a new `Person` with the `Address` property replaced, but leaves the original `Person` unchanged.\n\n### Composing Lenses\n\nOne of the key advantages of lenses is their composability. We can chain lenses together to create a lens that accesses a nested value of a nested value. Here's an example:\n\n```swift\nlet person = Person(name: \"Alice\",\n                    address: Address(street: \"123 Main Street\",\n                                      city: \"Anytown\"))\n\nfunc streetLens() -> Lens<Address, String> {\n    return Lens(\n        get: { (address: Address) -> String in return address.street },\n        set: { (street: String) -> (Address) -> Address in\n            return { (address: Address) -> Address in\n                return Address(street: street, city: address.city)\n            }\n        }\n    )\n}\n\nlet street = compose(lens1: addressLens(), lens2: streetLens())\nlet streetValue = street.get(person)\nprint(streetValue) // \"123 Main Street\"\n\nlet newPerson = street.set(\"456 First Ave\")(person)\nprint(newPerson) // Person(name: \"Alice\", address: Address(street: \"456 First Ave\", city: \"Anytown\"))\n```\n\nIn this example, we define a `streetLens` for the `street` property of an `Address` struct, and then use the `compose` function to create a new lens that accesses the `street` property of a nested `Address` property of a `Person` struct.\n\nThe `compose` function takes two lenses as arguments, and returns a new lens that accesses the nested value that the two lenses access together.\n\n### Lens Laws\n\nLenses have some laws that they must satisfy in order to be \"correct\". These laws include:\n\n- **Get-Set:** `lens.set(lens.get(a))(a) == a` for all values `a`.\n- **Set-Get:** `lens.get(lens.set(b)(a)) == b` for all values `a` and `b`.\n- **Set-Set:** `lens.set(b2)(lens.set(b1)(a)) == lens.set(b2)(a)` for all values `a`, `b1`, and `b2`.\n\nThese laws ensure that lenses behave predictably and consistently, and that they can be composed safely.\n\n## Conclusion\n\nLenses are a powerful tool in functional programming, allowing us to access and modify nested data structures in a type-safe and composable way. In this post, we covered the basics of functional programming in Swift, as well as how to create and compose lenses. We also discussed the lens laws, which ensure that lenses behave predictably.\n\nWith lenses, you can write more robust, predictable, and scalable code. Start using lenses in your own code today!"
    },
    "finish_reason": "stop"
   }
  ],
  "usage": {
   "prompt_tokens": 2232,
   "completion_tokens": 1728,
   "total_tokens": 3960
  }
 }
}
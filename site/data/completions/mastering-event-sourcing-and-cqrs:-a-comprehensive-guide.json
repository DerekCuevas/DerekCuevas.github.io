{
 "model": "gpt-3.5-turbo-0301",
 "prompt": [
  {
   "role": "user",
   "content": "You are the author of a personal technical blog about software engineering and computer science subjects."
  },
  {
   "role": "user",
   "content": "New topics for blog posts should be based off of the technical skills, experience, and interests presented in the following resume:\n+++\ntitle = \"Résumé\"\ndescription = \"Derek Cuevas' Résumé\"\ndate = \"2023-06-11\"\nor = \"Derek Cuevas\"\n+++\n\n# Derek Cuevas\n\n[GitHub](https://github.com/derekcuevas) (contact email in bio) \n\n---\n\n## Summary\n\nSenior Software Engineer with 8 years of professional experience, specializing in systems software engineering and low-latency, real-time product development.\n\nExperienced in leading teams and delivering Emmy award-winning projects. Passionate about functional programming and building high performance real-time systems. Skilled in a variety of programming languages and technologies with expertise in [Rust](https://www.rust-lang.org/) and [TypeScript](https://www.typescriptlang.org/).\n\n---\n\n## Programming Languages\n\n- **Proficient:** Rust, TypeScript (& JavaScript), Clojure, Elm\n- **Experienced:** Swift, Elixir, Objective-C, SQL\n\n---\n\n## Technologies, Skills, and Interests\n\n- **Rust:** Tokio, Futures, Hyper, Actix, Warp\n- **Platforms and Services:** AWS, Docker,  PostgreSQL, Redis, Apache Pulsar, RabbitMQ, Prometheus, GitLab CI/CD, Node.js, Deno, HTML & CSS\n- **Tooling:** Git, Vim, Bash\n- **Frameworks:** React, React Native, Redux, RxJs, SwiftUI, Phoenix\n- **Protocols:** HTTP, GraphQL, WebSockets, ØMQ, Pub/Sub, JSON, MessagePack, Protobuf, FlatBuffers\n- **Paradigms:** Functional Programming, Real-time Systems\n\n---\n\n## Professional Experience\n\n### Senior Software Engineer II (Lead), Second Spectrum (acquired by Genius Sports)\n(*January 2021 - Current*)\n\n[https://geniussports.com/](https://geniussports.com/)\n\n- Technical lead for the \"Real-time Augmentation Engine\" project's system team, developing low-latency and real-time augmented reality experiences for live TV broadcasters of sporting events.\n- Led the development and integration of core systems using `Rust`, `Tokio`, `MPSC channels`, `FFmpeg`, and `Pulsar`.\n- Oversaw operational management and monitoring systems, release management, simulation systems, and data ingestion/export pipelines.\n- Optimized the overall pipeline for 60fps real-time rendering over high definition broadcast feeds.\n- Key contributor to projects recognized with multiple Emmy awards, including the prestigious [George Wensel Technical Achievement Award](https://geniussports.com/customer-stories/cbs-and-genius-win-sports-emmy-for-romovision/) and Amazon's [Outstanding Interactive Experience](https://www.aboutamazon.com/news/entertainment/thursday-night-football-on-prime-video-wins-sports-emmy-award) at the `Sports Emmys`.\n\n### Senior Software Engineer I (Lead), Second Spectrum\n(*January 2019 - January 2021*)\n\n[https://www.secondspectrum.com/](https://www.secondspectrum.com/)\n\n- Led a team in designing and developing the company's first `GraphQL` service serving as a unified gateway for various microservices. Built upon the `Apollo` server framework leveraging `Node.js`, `TypeScript`, `PostgreSQL`, and `Redis` for caching and pub/sub.\n- Developed a dashboard built with `Three.js` for visualizing 3D player tracking datasets and highlighting data discrepancies.\n- Created a prototype `iOS` application for video highlights using `Swift`, `SwiftUI`, and the `Combine` framework.\n- Mentored interns and fellow engineers, fostering collaboration and knowledge sharing.\n\n### Software Engineer, Second Spectrum\n(*August 2016 - January 2019*)\n\n[https://www.secondspectrum.com/](https://www.secondspectrum.com/)\n\n- Developed the operational and quality assurance management application for the company's optical player tracking system. Stack included `Elixir` (with the `Phoenix` framework), `React`, and heavy use of `WebSockets` to sync and display corrections to operators in near real-time.\n- Improved operator efficiency by 100% through the implementation of an automated task selection system.\n- Led the development of the LA Clipper's live streaming web and mobile application \"Clippers CourtVision\". Stack included `Elm` for the web front-end and `React Native` for the mobile app.\n\n### Software Engineer Intern, MindGraph Medical\n(*September 2015 - January 2016*)\n\n- Designed, developed, and deployed the MindGraph Medical website using `Node.js`, `jQuery`, and `Bootstrap`.\n\n---\n\n## Education\n\n**B.S. Computer Science, San Diego State University, San Diego**\n\n(*Class of 2016*)\n\n- [Advanced Certificate in Web and Mobile Applications Development](https://cs.sdsu.edu/about/)\n\n---\n\n## Personal Projects\n\n- [FYGT](https://github.com/DerekCuevas/derekcuevas.github.io): An experimental blog built with `Hugo`, `Deno`, and `ChatGPT`.\n- [Advent of Code 2022](https://github.com/DerekCuevas/advent-of-code-2022): Solutions to Advent of Code programming problems using functional approaches in `Clojure`.\n- [Interview Cake Algorithms Problem Set](https://github.com/DerekCuevas/interview-cake-clj): Solutions to the interview cake programming problems also by exploring functional approaches in `Clojure`.\n- [Friend List](https://github.com/DerekCuevas/friend-list): A non-trivial programming challenge exploring asynchronous side effects with different programming patterns.\n- [Redux Meta Reducer](https://github.com/DerekCuevas/redux-meta-reducer): A `Redux` higher-order reducer for simplifying the state of fetched data.\n- [Avowal](https://github.com/DerekCuevas/avowal): An asynchronous form validation library for `JavaScript`.\n"
  },
  {
   "role": "user",
   "content": "Your previous 60 posts include: \"The Power of Rust's Ownership System: A Comprehensive Guide\", \"Mastering React Component Lifecycles: A Comprehensive Guide\", \"Practical Techniques for Working with Swift Optionals\", \"Mastering the Decorator Pattern in Clojure\", \"Understanding the Rust Standard Library's `time` Module\", \"The Power of Deno's Built-in Web Server\", \"Mastering Advanced TypeScript Patterns\", \"The Power of Kotlin's Inline Functions\", \"The Power of Rust's const_fn Feature\", \"Understanding the Power of Rust's `Option` Type\", \"Understanding the Principles of Event-Driven Architecture\", \"Mastering the Observer Pattern with Objective-C\", \"The Power of Clojure's Transducers: A Comprehensive Guide\", \"Understanding TypeScript's Union Types\", \"Mastering the Asynchronous Programming in Clojure\", \"Advanced Techniques for Scaling Distributed Systems with Apache Flink\", \"Understanding Rust's String Types\", \"Advanced Error Handling with Rust's Result Type\", \"Building Custom Data Types with Rust's derive Macro\", \"Writing Type-Safe Code with TypeScript's unknown Type\", \"Building High-Performance Websites with Deno\", \"Advanced Techniques for Implementing the Decorator Design Pattern in Rust\", \"Building Robust and Secure GraphQL Servers with Rust\", \"Advanced Techniques for Working with WebSockets in Rust\", \"Understanding the Principles of Reactive Programming in Java\", \"The Power of Rust's Const Generics\", \"Mastering Rust's Parallel Iterator: A Comprehensive Guide\", \"Exploring Advanced Types in TypeScript: Mapped & Conditional Types\", \"Exploring the Rust Standard Library's `io` Module\", \"Mastering the Decorator Pattern in TypeScript\", \"Mastering Protocol Buffers in Rust\", \"Mastering Rust's Memory Allocation System\", \"Modern Web Development with SwiftNIO\", \"Mastering Rust's Result Type\", \"Building High-Performance Machine Learning Pipelines with Rust\", \"Advanced Techniques for Working with PostgreSQL Arrays\", \"Mastering HTML and CSS Accessibility: A Comprehensive Guide\", \"Mastering Apache Pulsar's Message Retention Policy\", \"Mastering TypeScript's Record Type\", \"Mastering Rust's Async/Await Syntax\", \"Mastering the Decorator Pattern in Rust\", \"The Power of Rust's Multithreading Library: A Comprehensive Guide\", \"Mastering the Svelte Framework: A Comprehensive Guide\", \"Best Practices for Integrating React and TypeScript\", \"Deep Dive into Functional Reactive Programming with RxJS\", \"Understanding Java Memory Model: A Comprehensive Guide\", \"Understanding the Fundamentals of Distributed Systems Programming in Go\", \"Effective Techniques for Building Blazing-Fast Mobile Apps with React Native\", \"Understanding the SOLID Principles of Object-Oriented Design\", \"Advanced Techniques for Scaling Node.js Applications\", \"Implementing the Facade Design Pattern in Swift\", \"Building Efficient Mobile Apps with React Native Flexbox\", \"The Power of the Copy-on-Write Methodology\", \"Writing Correct Web3 Smart Contracts with Solidity's Concerned Oxide (SCOCO) Conventions\", \"Demystifying Rust's 'unwrap()' Method\", \"Mastering Rust's Pattern Matching\", \"The Power of Streams in Java\", \"Mastering C++17 Template Argument Deduction\", \"Mastering the Composite Design Pattern in C\", \"Implementing the Command Design Pattern in Kotlin\""
  },
  {
   "role": "user",
   "content": "Come up with an advanced topic for an expert level reader that is about a particular single feature, fact, pattern, paradigm, convention, theory, framework, library, or best practice."
  },
  {
   "role": "user",
   "content": "Write a post about the chosen topic following the instructions given below:"
  },
  {
   "role": "user",
   "content": "Your writing style is academic, informative, and focused on detailed technical information."
  },
  {
   "role": "user",
   "content": "The topic should not be related to a previous post."
  },
  {
   "role": "user",
   "content": "Use computer code snippets (in the relevant programming language) in order to illustrate the information presented."
  },
  {
   "role": "user",
   "content": "Format the body of the post in the markdown markup language."
  },
  {
   "role": "user",
   "content": "Come up with a title for the post and include it on the first line."
  },
  {
   "role": "user",
   "content": "Include one to three tags for the post on the second line formatted as a comma separated list, for example: \"Tags: <tag1>, <tag2>\"."
  },
  {
   "role": "user",
   "content": "The post should be multiple sections in length."
  },
  {
   "role": "user",
   "content": "Do not include links to images in the post."
  },
  {
   "role": "user",
   "content": "Do not include contact information in the post."
  },
  {
   "role": "user",
   "content": "Do not add extra whitespace around lists."
  }
 ],
 "completion": {
  "id": "chatcmpl-7aeGLwX8IAT8bwaGDITNXu3huwRhx",
  "object": "chat.completion",
  "created": 1688968933,
  "model": "gpt-3.5-turbo-0301",
  "choices": [
   {
    "index": 0,
    "message": {
     "role": "assistant",
     "content": "Title: Mastering Event Sourcing and CQRS: A Comprehensive Guide\n\nTags: event sourcing, cqrs, distributed systems\n\nEvent Sourcing and Command Query Responsibility Segregation (CQRS) are paradigms that have become increasingly popular in recent years, particularly in the context of distributed systems and microservices. In this guide, we will explore the concepts behind Event Sourcing and CQRS, their benefits and drawbacks, and how to implement them in your applications.\n\n## What is Event Sourcing? \n\nEvent Sourcing is a design pattern that involves storing the state of an application as a sequence of events rather than a current state. Each event represents a change to the state of the application and is immutable - once an event has been generated, it cannot be modified. Event Sourcing can be used in combination with other patterns like CQRS to implement complex applications.\n\n## What is CQRS?\n\nCommand Query Responsibility Segregation (CQRS) is a design pattern that separates the responsibilities of handling commands (i.e. writes) and queries (i.e. reads) into separate models. This allows for each model to be optimized for its specific use case and data retrieval needs.\n\n## Benefits of Event Sourcing and CQRS\n\n- **Complete Audit Trail** - Event Sourcing allows for a complete history of all changes to an application's state to be maintained. This can be useful for auditing, logging, and debugging purposes.\n\n- **Scalability** - CQRS makes it possible to scale writes and reads independently. \n\n- **Flexibility** - CQRS allows different models to be optimized for their specific use case, which can result in cleaner, simpler code.\n\n## Drawbacks of Event Sourcing and CQRS\n\n- **Complexity** - Implementing and maintaining Event Sourcing and CQRS can be complex and time-consuming.\n\n- **Higher Resource Usage** - Keeping an Event Store and maintaining multiple read models can require more resources than traditional approaches.\n\n- **Learning Curve** - Developers who are unfamiliar with Event Sourcing and CQRS may need time to adjust to the new paradigms.\n\n## Implementing Event Sourcing and CQRS \n\n### Event Sourcing\n\n#### Generating Events\n\nEvents should represent a complete and accurate description of what has happened in your application. For instance, if you have an application that processes orders, your events might include OrderCreated, OrderApproved, OrderShipped, and so on.\n\n```typescript\ninterface OrderCreated {\n  orderId: string;\n  customerName: string;\n  date: Date;\n  // ...\n}\n\ninterface OrderApproved {\n  orderId: string;\n  date: Date;\n  // ...\n}\n\ninterface OrderShipped {\n  orderId: string;\n  date: Date;\n  // ...\n}\n```\n\nWhen an event is generated, it should be written to an Event Store. The Event Store can be thought of as a database that stores events rather than state.\n\n```typescript\ninterface Event {\n  id: string;\n  aggregateId: string;\n  type: string;\n  data: Record<string, any>;\n  metadata: {\n    date: Date;\n    // ...\n  };\n}\n\ninterface EventStore {\n  writeEvents(aggregateId: string, events: Event[]): void;\n  getEvents(aggregateId: string): Event[];\n}\n```\n\n#### Replaying Events\n\nWhen state needs to be reconstructed, it is done by replaying the events in the Event Store. Each event is processed in the order it was generated, and the final state is the result of processing all events.\n\n```typescript\nfunction replayEvents(events: Event[]): State {\n  const state = initialState();\n  events.forEach((event) => {\n    switch (event.type) {\n      case \"OrderCreated\":\n        state.orders[event.data.orderId] = {\n          customerName: event.data.customerName,\n          // ...\n        };\n        break;\n\n      case \"OrderApproved\":\n        state.orders[event.data.orderId].approved = true;\n        break;\n\n      case \"OrderShipped\":\n        state.orders[event.data.orderId].shipped = true;\n        break;\n\n      // ...\n    }\n  });\n  return state;\n}\n```\n\n### CQRS\n\n#### Command Model\n\nThe Command Model is responsible for handling commands (i.e. writes). When a command is received, the Command Model checks its validity and generates an event representing the change to the application's state.\n\n```typescript\ninterface Command {\n  type: string;\n  data: Record<string, any>;\n}\n\ninterface CommandModel {\n  processCommand(command: Command): Event[];\n}\n\nclass OrderCommandModel implements CommandModel {\n  processCommand(command: Command): Event[] {\n    switch (command.type) {\n      case \"CreateOrder\":\n        return [\n          {\n            id: uuid(),\n            aggregateId: command.data.orderId,\n            type: \"OrderCreated\",\n            data: command.data,\n            metadata: { date: new Date() },\n          },\n        ];\n\n      case \"ApproveOrder\":\n        return [\n          {\n            id: uuid(),\n            aggregateId: command.data.orderId,\n            type: \"OrderApproved\",\n            data: command.data,\n            metadata: { date: new Date() },\n          },\n        ];\n\n      case \"ShipOrder\":\n        return [\n          {\n            id: uuid(),\n            aggregateId: command.data.orderId,\n            type: \"OrderShipped\",\n            data: command.data,\n            metadata: { date: new Date() },\n          },\n        ];\n\n      // ...\n    }\n  }\n}\n```\n\n#### Query Model\n\nThe Query Model is responsible for handling queries (i.e. reads). When a query is received, the Query Model retrieves the necessary data from the read model and returns it.\n\n```typescript\ninterface Query {\n  type: string;\n  data: Record<string, any>;\n}\n\ninterface QueryModel {\n  processQuery(query: Query): any;\n}\n\nclass OrderQueryModel implements QueryModel {\n  constructor(private readonly readModel: ReadModel) {}\n\n  processQuery(query: Query) {\n    switch (query.type) {\n      case \"GetOrder\":\n        return this.readModel.orders[query.data.orderId];\n\n      case \"ListOrders\":\n        return Object.values(this.readModel.orders);\n\n      // ...\n    }\n  }\n}\n```\n\n## Conclusion\n\nEvent Sourcing and CQRS can be powerful tools for implementing distributed systems. Event Sourcing provides a complete audit trail and allows for complex state transitions, while CQRS allows for scalability and flexibility. Despite their benefits, implementing and maintaining Event Sourcing and CQRS can be complex and time-consuming. When considering using these paradigms, weigh the benefits against the drawbacks and ensure that your team has the necessary expertise to implement them effectively."
    },
    "finish_reason": "stop"
   }
  ],
  "usage": {
   "prompt_tokens": 2195,
   "completion_tokens": 1349,
   "total_tokens": 3544
  }
 }
}
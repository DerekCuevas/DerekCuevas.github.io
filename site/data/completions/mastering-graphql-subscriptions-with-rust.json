{
 "model": "gpt-3.5-turbo-0301",
 "prompt": [
  {
   "role": "user",
   "content": "You are the author of a personal technical blog about software engineering and computer science subjects."
  },
  {
   "role": "user",
   "content": "New topics for blog posts should be based off of the technical skills, experience, and interests presented in the following resume:\n+++\ntitle = \"Résumé\"\ndescription = \"Derek Cuevas' Résumé\"\ndate = \"2023-06-11\"\nor = \"Derek Cuevas\"\n+++\n\n# Derek Cuevas\n\n[GitHub](https://github.com/derekcuevas) (contact email in bio) \n\n---\n\n## Summary\n\nSenior Software Engineer with 8 years of professional experience, specializing in systems software engineering and low-latency, real-time product development.\n\nExperienced in leading teams and delivering Emmy award-winning projects. Passionate about functional programming and building high performance real-time systems. Skilled in a variety of programming languages and technologies with expertise in [Rust](https://www.rust-lang.org/) and [TypeScript](https://www.typescriptlang.org/).\n\n---\n\n## Programming Languages\n\n- **Proficient:** Rust, TypeScript (& JavaScript), Clojure, Elm\n- **Experienced:** Swift, Elixir, Objective-C, SQL\n\n---\n\n## Technologies, Skills, and Interests\n\n- **Rust:** Tokio, Futures, Hyper, Actix, Warp\n- **Platforms and Services:** AWS, Docker,  PostgreSQL, Redis, Apache Pulsar, RabbitMQ, Prometheus, GitLab CI/CD, Node.js, Deno, HTML & CSS\n- **Tooling:** Git, Vim, Bash\n- **Frameworks:** React, React Native, Redux, RxJs, SwiftUI, Phoenix\n- **Protocols:** HTTP, GraphQL, WebSockets, ØMQ, Pub/Sub, JSON, MessagePack, Protobuf, FlatBuffers\n- **Paradigms:** Functional Programming, Real-time Systems\n\n---\n\n## Professional Experience\n\n### Senior Software Engineer II (Lead), Second Spectrum (acquired by Genius Sports)\n(*January 2021 - Current*)\n\n[https://geniussports.com/](https://geniussports.com/)\n\n- Technical lead for the \"Real-time Augmentation Engine\" project's system team, developing low-latency and real-time augmented reality experiences for live TV broadcasters of sporting events.\n- Led the development and integration of core systems using `Rust`, `Tokio`, `MPSC channels`, `FFmpeg`, and `Pulsar`.\n- Oversaw operational management and monitoring systems, release management, simulation systems, and data ingestion/export pipelines.\n- Optimized the overall pipeline for 60fps real-time rendering over high definition broadcast feeds.\n- Key contributor to projects recognized with multiple Emmy awards, including the prestigious [George Wensel Technical Achievement Award](https://geniussports.com/customer-stories/cbs-and-genius-win-sports-emmy-for-romovision/) and Amazon's [Outstanding Interactive Experience](https://www.aboutamazon.com/news/entertainment/thursday-night-football-on-prime-video-wins-sports-emmy-award) at the `Sports Emmys`.\n\n### Senior Software Engineer I (Lead), Second Spectrum\n(*January 2019 - January 2021*)\n\n[https://www.secondspectrum.com/](https://www.secondspectrum.com/)\n\n- Led a team in designing and developing the company's first `GraphQL` service serving as a unified gateway for various microservices. Built upon the `Apollo` server framework leveraging `Node.js`, `TypeScript`, `PostgreSQL`, and `Redis` for caching and pub/sub.\n- Developed a dashboard built with `Three.js` for visualizing 3D player tracking datasets and highlighting data discrepancies.\n- Created a prototype `iOS` application for video highlights using `Swift`, `SwiftUI`, and the `Combine` framework.\n- Mentored interns and fellow engineers, fostering collaboration and knowledge sharing.\n\n### Software Engineer, Second Spectrum\n(*August 2016 - January 2019*)\n\n[https://www.secondspectrum.com/](https://www.secondspectrum.com/)\n\n- Developed the operational and quality assurance management application for the company's optical player tracking system. Stack included `Elixir` (with the `Phoenix` framework), `React`, and heavy use of `WebSockets` to sync and display corrections to operators in near real-time.\n- Improved operator efficiency by 100% through the implementation of an automated task selection system.\n- Led the development of the LA Clipper's live streaming web and mobile application \"Clippers CourtVision\". Stack included `Elm` for the web front-end and `React Native` for the mobile app.\n\n### Software Engineer Intern, MindGraph Medical\n(*September 2015 - January 2016*)\n\n- Designed, developed, and deployed the MindGraph Medical website using `Node.js`, `jQuery`, and `Bootstrap`.\n\n---\n\n## Education\n\n**B.S. Computer Science, San Diego State University, San Diego**\n\n(*Class of 2016*)\n\n- [Advanced Certificate in Web and Mobile Applications Development](https://cs.sdsu.edu/about/)\n\n---\n\n## Personal Projects\n\n- [FYGT](https://github.com/DerekCuevas/derekcuevas.github.io): An experimental blog built with `Hugo`, `Deno`, and `ChatGPT`.\n- [Advent of Code 2022](https://github.com/DerekCuevas/advent-of-code-2022): Solutions to Advent of Code programming problems using functional approaches in `Clojure`.\n- [Interview Cake Algorithms Problem Set](https://github.com/DerekCuevas/interview-cake-clj): Solutions to the interview cake programming problems also by exploring functional approaches in `Clojure`.\n- [Friend List](https://github.com/DerekCuevas/friend-list): A non-trivial programming challenge exploring asynchronous side effects with different programming patterns.\n- [Redux Meta Reducer](https://github.com/DerekCuevas/redux-meta-reducer): A `Redux` higher-order reducer for simplifying the state of fetched data.\n- [Avowal](https://github.com/DerekCuevas/avowal): An asynchronous form validation library for `JavaScript`.\n"
  },
  {
   "role": "user",
   "content": "Your previous 60 posts include: \"Mastering Git's Interactive Rebase: A Comprehensive Guide\", \"Exploring the Power of Rust’s Generic Associated Types\", \"Mastering WebAssembly Text Format – A Comprehensive Guide\", \"Building Robust and Secure GraphQL Servers with Rust\", \"Mastering Debugging Techniques in Rust: A Comprehensive Guide\", \"Implementing a Consistent Hashing Algorithm in Rust\", \"Understanding Protocol Buffers Wire Format: A Comprehensive Guide\", \"Understanding Tail-Recursion in Elixir\", \"Exploring Kubernetes StatefulSets: A Comprehensive Guide\", \"The Science of Machine Learning: Explaining the Bias-Variance Tradeoff\", \"Mastering Advanced Feature-Driven Development: A Comprehensive Guide\", \"Mastering the Elm Architecture: A Comprehensive Guide\", \"Exploring the Rust Standard Library's `net` Module\", \"Understanding the Rust Trait System: A Comprehensive Guide\", \"Mastering Rust's Concurrency Primitives: A Comprehensive Guide\", \"Building High-Performance Microservices with Rust's Actix-Web Framework\", \"Advanced Techniques for Building Serverless Applications with AWS Lambda\", \"Mastering HTTP/2 Server Push: A Comprehensive Guide\", \"Building Scalable Real-Time Applications with Warp in Rust\", \"Mastering Event Sourcing and CQRS: A Comprehensive Guide\", \"The Power of Rust's Ownership System: A Comprehensive Guide\", \"Mastering React Component Lifecycles: A Comprehensive Guide\", \"Practical Techniques for Working with Swift Optionals\", \"Mastering the Decorator Pattern in Clojure\", \"Understanding the Rust Standard Library's `time` Module\", \"The Power of Deno's Built-in Web Server\", \"Mastering Advanced TypeScript Patterns\", \"The Power of Kotlin's Inline Functions\", \"The Power of Rust's const_fn Feature\", \"Understanding the Power of Rust's `Option` Type\", \"Understanding the Principles of Event-Driven Architecture\", \"Mastering the Observer Pattern with Objective-C\", \"The Power of Clojure's Transducers: A Comprehensive Guide\", \"Understanding TypeScript's Union Types\", \"Mastering the Asynchronous Programming in Clojure\", \"Advanced Techniques for Scaling Distributed Systems with Apache Flink\", \"Understanding Rust's String Types\", \"Advanced Error Handling with Rust's Result Type\", \"Building Custom Data Types with Rust's derive Macro\", \"Writing Type-Safe Code with TypeScript's unknown Type\", \"Building High-Performance Websites with Deno\", \"Advanced Techniques for Implementing the Decorator Design Pattern in Rust\", \"Building Robust and Secure GraphQL Servers with Rust\", \"Advanced Techniques for Working with WebSockets in Rust\", \"Understanding the Principles of Reactive Programming in Java\", \"The Power of Rust's Const Generics\", \"Mastering Rust's Parallel Iterator: A Comprehensive Guide\", \"Exploring Advanced Types in TypeScript: Mapped & Conditional Types\", \"Exploring the Rust Standard Library's `io` Module\", \"Mastering the Decorator Pattern in TypeScript\", \"Mastering Protocol Buffers in Rust\", \"Mastering Rust's Memory Allocation System\", \"Modern Web Development with SwiftNIO\", \"Mastering Rust's Result Type\", \"Building High-Performance Machine Learning Pipelines with Rust\", \"Advanced Techniques for Working with PostgreSQL Arrays\", \"Mastering HTML and CSS Accessibility: A Comprehensive Guide\", \"Mastering Apache Pulsar's Message Retention Policy\", \"Mastering TypeScript's Record Type\", \"Mastering Rust's Async/Await Syntax\""
  },
  {
   "role": "user",
   "content": "Come up with an advanced topic for an expert level reader that is about a particular single feature, fact, pattern, paradigm, convention, theory, framework, library, or best practice."
  },
  {
   "role": "user",
   "content": "Write a post about the chosen topic following the instructions given below:"
  },
  {
   "role": "user",
   "content": "Your writing style is academic, informative, and focused on detailed technical information."
  },
  {
   "role": "user",
   "content": "The topic should not be related to a previous post."
  },
  {
   "role": "user",
   "content": "Use computer code snippets (in the relevant programming language) in order to illustrate the information presented."
  },
  {
   "role": "user",
   "content": "Format the body of the post in the markdown markup language."
  },
  {
   "role": "user",
   "content": "Come up with a title for the post and include it on the first line."
  },
  {
   "role": "user",
   "content": "Include one to three tags for the post on the second line formatted as a comma separated list, for example: \"Tags: <tag1>, <tag2>\"."
  },
  {
   "role": "user",
   "content": "The post should be multiple sections in length."
  },
  {
   "role": "user",
   "content": "Do not include links to images in the post."
  },
  {
   "role": "user",
   "content": "Do not include contact information in the post."
  },
  {
   "role": "user",
   "content": "Do not add extra whitespace around lists."
  }
 ],
 "completion": {
  "warning": "This model version is deprecated and a newer version 'gpt-3.5-turbo-0613' is available. Migrate before September 13 to avoid disruption of service. Learn more https://platform.openai.com/docs/deprecations",
  "id": "chatcmpl-7cSdijhAb8T5J3mtKlplhWeovBwR2",
  "object": "chat.completion",
  "created": 1689400910,
  "model": "gpt-3.5-turbo-0301",
  "choices": [
   {
    "index": 0,
    "message": {
     "role": "assistant",
     "content": "Title: Mastering GraphQL Subscriptions with Rust\n\nTags: Rust, GraphQL, Real-time Systems\n\nGraphQL is a popular query language for APIs that provides a strong typing system and efficient, predictable queries. GraphQL subscriptions build on this by providing a framework for real-time communication between servers and clients. In this article, we will explore the basics of GraphQL subscriptions and demonstrate how Rust, with its powerful concurrency and real-time capabilities, can be used to build scalable and performant subscription servers.\n\n## GraphQL Subscriptions: An Overview\n\nGraphQL is an API query language that allows clients to specify exactly what data they need and receive it in a predictable and efficient manner. In addition to its query and mutation functionality, GraphQL also provides subscriptions, which allow clients to subscribe to real-time updates from a server.\n\nGraphQL subscriptions are implemented using WebSockets, a protocol that allows for bidirectional communication between a client and server over a single TCP connection. Clients can subscribe to a specific event (or set of events) on the server, and the server will send updates to all subscribed clients whenever those events occur. These updates can be in the form of any valid GraphQL document, allowing for a wide variety of use cases.\n\n## Implementing GraphQL Subscriptions in Rust\n\nImplementing GraphQL subscriptions in Rust is straightforward using libraries like [async-graphql](https://github.com/async-graphql/async-graphql) and [tokio](https://tokio.rs/). In this example, we will build a simple subscription server that sends updates whenever a counter variable changes.\n\nFirst, we will declare our GraphQL schema using the [async-graphql](https://github.com/async-graphql/async-graphql) crate:\n\n```rust\nuse async_graphql::*;\n\nstruct SubscriptionRoot;\n\n#[Object]\nimpl SubscriptionRoot {\n    async fn counter(&self) -> impl Stream<Item = i32> {\n        // ...\n    }\n}\n\nstruct QueryRoot;\n\n#[Object]\nimpl QueryRoot {\n    async fn hello(&self) -> String {\n        \"world\".to_string()\n    }\n}\n\ntype Schema = async_graphql::Schema<QueryRoot, MutationRoot, SubscriptionRoot>;\n```\n\nIn this example, we define a `SubscriptionRoot` struct that contains a single `counter` method. This method returns a `Stream<Item = i32>`, which is a Rust `Stream` that will be used to send updates to subscribed clients.\n\nTo start the subscription server, we can use the following code:\n\n```rust\n#[tokio::main]\nasync fn main() {\n    let schema = Schema::new(QueryRoot {}, MutationRoot {}, SubscriptionRoot {});\n\n    let addr = \"127.0.0.1:8000\".parse().unwrap();\n    let listener = TcpListener::bind(&addr).await.unwrap();\n    let schema = Arc::new(schema);\n\n    while let Ok((stream, _)) = listener.accept().await {\n        let peer_addr = stream.peer_addr().unwrap();\n        let schema = schema.clone();\n\n        tokio::spawn(async move {\n            if let Err(e) = async_graphql::http::WebSocket::new(async_graphql::http::WebSocketConfig::default(), stream, |value| async move {\n                let result = schema.execute(value).await;\n                Ok::<_, serde_json::Error>(serde_json::to_string(&result).unwrap())\n            })\n            .await\n            {\n                eprintln!(\"{}: failed to accept websocket: {:?}\", peer_addr, e);\n            }\n        });\n    }\n}\n```\n\nThis code creates a `TcpListener` that listens for incoming WebSocket connections on port 8000. Whenever a new connection is established, the server creates a new `async_graphql::http::WebSocket` and adds it to a `tokio::spawn` task for concurrency. The `WebSocket` is configured to use the previously defined GraphQL schema and to execute any received messages. The resulting GraphQL response is then sent back to the client over the WebSocket connection.\n\nTo implement the `counter` method, we will use Rust's `futures` and `tokio` libraries to create an `mpsc` channel that sends updates to subscribed clients. We will also add a simple `set_counter` mutation that updates the counter variable.\n\n```rust\nuse futures::stream::StreamExt;\nuse std::{sync::Arc, time::Duration};\nuse tokio::sync::mpsc;\n\nlet (tx, rx) = mpsc::unbounded_channel::<i32>();\n\ntokio::spawn(async move {\n    let mut count = 0;\n\n    loop {\n        count += 1;\n        tx.send(count).unwrap();\n        tokio::time::delay_for(Duration::from_secs(1)).await;\n    }\n});\n\n#[Object]\nimpl SubscriptionRoot {\n    async fn counter(&self) -> impl Stream<Item = i32> {\n        rx.map(|count| {\n            println!(\"Sending count of {}\", count);\n            count\n        })\n    }\n}\n\nstruct MutationRoot;\n\n#[Object]\nimpl MutationRoot {\n    async fn set_counter(&self, counter: i32) -> i32 {\n        tx.send(counter).unwrap();\n        counter\n    }\n}\n```\n\nIn this example, we create an unbounded `mpsc` channel that will be used to send updates to subscribed clients. We then spawn a new task using `tokio::spawn` that increments the counter variable every second and sends it over the channel. The `counter` method on `SubscriptionRoot` simply returns a new Rust `Stream` created from the channel's receiver, which will send updates to any subscribed clients. Finally, we define a `set_counter` mutation that allows clients to manually set the counter variable.\n\n## Conclusion\n\nGraphQL subscriptions provide a powerful framework for real-time communication between servers and clients. Rust's real-time capabilities and powerful concurrency make it an excellent choice for building GraphQL subscription servers that can scale to handle high volumes of real-time data. By leveraging Rust's async/await syntax and libraries like `async-graphql` and `tokio`, developers can quickly build efficient and scalable subscription servers that provide real-time updates to clients."
    },
    "finish_reason": "stop"
   }
  ],
  "usage": {
   "prompt_tokens": 2215,
   "completion_tokens": 1235,
   "total_tokens": 3450
  }
 }
}
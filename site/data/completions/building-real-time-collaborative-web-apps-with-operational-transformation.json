{
 "prompt": [
  {
   "role": "system",
   "content": "You are the author of a personal technical blog about software engineering and computer science subjects."
  },
  {
   "role": "system",
   "content": "Write as though you are the author of this resume:\n+++\ntitle = \"Résumé\"\ndescription = \"Derek Cuevas's Résumé\"\ndate = \"2023-05-20\"\nauthor = \"Derek Cuevas\"\n+++\n\nSenior Software Engineering Tech Lead with 8 years of professional experience building full stack applications and highly available, performance critical, realtime systems and services.\n\n## Programming Languages\n\n- Rust\n- TypeScript\n- Elm\n- Swift\n- Elixir\n- Clojure\n- SQL\n- HTML & CSS\n\n## Technologies, Skills, and Interests\n\n- **Paradigms:** Functional Programming, Realtime Systems, Distributed Systems, Data Structures, Algorithms\n- **Rust:** Futures, Async/Await, Tokio, Hyper, Actix, MPSC Channels, Serde\n- **Protocols:** HTTP, GraphQL, WebSockets, TCP, HLS, DASH, ZMQ, Flatbuffers, Protobuf, MsgPack, JSON\n- **Services:** Node.js, AWS (S3, EC2, SQS, ect.), PostgreSQL, Redis, Pulsar, RabbitMQ\n- **Frameworks:** React, React Native, Redux, RxJs, SwiftUI\n- **Tooling:** Git, Vim, Docker, Bash\n"
  },
  {
   "role": "system",
   "content": "New topics for the blog should be based off of the technical skills, experience, and interests presented in the resume."
  },
  {
   "role": "system",
   "content": "Your previous 20 posts include: \"Mastering Clojure's Reducers\", \"How to Use Swift's Result Type for Error Handling\", \"Mastering Rust Ownership Rules and Borrowing Rules for Type-Safe and Performant Programs\", \"Projecting Elixir's Enum Module into Batches\", \"Mastering Browser Storage in TypeScript\", \"Mastering Rust's `std::env::args_os()`\", \"Building Composable, Scalable, and Reusable Redux Reducers\", \"Exploring Rust's `mem::replace()` Function\", \"Advanced TypeScript: Custom Type Guards\", \"Mastering Elixir's GenServer Callbacks\", \"The Magic of High-Level Streams\", \"Using Rust's Pinning API for Safe and Performant Async Programming\", \"Building Scalable REST APIs with Node.js and PostgreSQL\", \"How to Build High-Availability WebSocket Services with Rust and Actix-Web\", \"A Practical Introduction to the Actor Model in Elixir\", \"Mastering JavaScript's Array.concat() Method for High-Performance and Scalable Code\", \"Building High-Performance, Real-time Message-Based Applications with Rust and Pulsar\", \"The Art of Error Handling in Node.js\", \"JSON Data Validation with Rust's `serde_json` Library\", \"Exploring the Rust Standard Library's VecDeque\""
  },
  {
   "role": "system",
   "content": "Your writing style is concise, to the point, informative, and focused on detailed technical information."
  },
  {
   "role": "user",
   "content": "Come up with an advanced topic for an expert level reader that is about a particular single feature, fact, pattern, paradigm, convention, theory, framework, library, practical example, or best practice."
  },
  {
   "role": "user",
   "content": "The topic should not be related to a previous post."
  },
  {
   "role": "user",
   "content": "Write a post about the topic following the rules defined."
  },
  {
   "role": "user",
   "content": "Use computer code snippets (in the relevant programming language) in order to illustrate the information presented."
  },
  {
   "role": "user",
   "content": "Format the body of the post in the markdown markup language."
  },
  {
   "role": "user",
   "content": "Include the title of the post on the first line."
  },
  {
   "role": "user",
   "content": "Include one to three tags for the post on the second line formatted as a comma separated list, for example: \"Tags: <tag1>, <tag2>\"."
  },
  {
   "role": "user",
   "content": "Do not include images in the post."
  },
  {
   "role": "user",
   "content": "The post should be multiple sections in length and come to a complete finish."
  }
 ],
 "completion": {
  "id": "chatcmpl-7NmKaYjDRzoihD8iMBZiKHtsRig02",
  "object": "chat.completion",
  "created": 1685901684,
  "model": "gpt-3.5-turbo-0301",
  "usage": {
   "prompt_tokens": 819,
   "completion_tokens": 708,
   "total_tokens": 1527
  },
  "choices": [
   {
    "message": {
     "role": "assistant",
     "content": "Title: Building real-time collaborative web apps with Operational Transformation\n\nTags: Web Development, Operational Transformation, Collaborative Applications\n\n## Introduction\nReal-time collaborative web applications, such as Google Docs and Trello boards, have become an integral part of our personal and professional lives. These applications allow multiple users to work together on the same document or board at the same time and see each other's changes in real-time. This is accomplished using Operational Transformation (OT) - a technique used to synchronize changes between different users and their client-side representations of data. \n\nIn this post, we will explore the basics of OT and learn how to implement OT-based real-time collaborative features in our web applications.\n\n## Operational Transformation (OT)\nOperational Transformation is a technique used to synchronize changes across multiple clients in real-time. It is used to ensure that all clients have the same view of data at any given point in time, regardless of who made the changes and when.\n\nOT is based on the concept of transforming operations using a sequence of operations. When a user makes a change to a document or board, the change is transformed before it is sent to other clients. This is done by comparing the change with the changes made by other clients, and then applying certain rules to transform the change.\n\n## Understanding OT in Action\nLet’s consider an example. Suppose two users, Alice and Bob, are collaborating on a Google Docs document. Alice types the word \"operational\" and Bob types the word \"transformation\". Both of these changes are sent to the server.\n\nLet’s assume that the server receives Alice’s change first. The server will then transform Bob’s change to reflect Alice’s change as follows:\n```\nTransform(\"transformation\", Insert(12, \"operational\"))\n```\nThis operation takes the original string \"transformation\" and inserts the text \"operational\" at index 12, giving us the final string \"transformational\".\n\nThis transformed operation is then sent back to Bob’s client, which updates its representation of the document.\n\nThis is just a basic example of how OT works, but it gives you an idea of how the technique is used to synchronize changes across multiple clients.\n\n## Implementing OT in Web Applications\nImplementing OT in web applications can be challenging, but it is made easier with existing libraries and tools. Here are a few options to consider:\n\n### ShareDB\nShareDB is a client-server database that automatically syncs data between clients. It is built on top of Operational Transformation and supports both JSON and rich-text formats. ShareDB uses a WebSocket connection for real-time communication and conflict resolution.\n\n### Yjs\nYjs is a JavaScript framework that enables real-time collaboration in web applications. It is built on top of CRDTs and uses Operational Transformation to resolve conflicts. Yjs supports multiple types of data, including text, JSON, and XML.\n\n### Automerge\nAutomerge is a library for building real-time collaborative applications. It uses a unique conflict resolution technique based on \"mergeable replicated data types\" (MRDTs) that can automatically resolve conflicts. Automerge is designed to work with any programming language or database, and uses JSON for data storage and transfer.\n\n## Conclusion\nOperational Transformation is a powerful technique that enables real-time collaboration in web applications. While implementing OT can be challenging, there are existing libraries and frameworks that make it much easier. By understanding the basics of OT and using these tools, you can build real-time collaborative applications that can transform the way we work and collaborate online."
    },
    "finish_reason": "stop",
    "index": 0
   }
  ]
 }
}
{
 "prompt": [
  {
   "role": "system",
   "content": "You are the author of a personal technical blog about software engineering and computer science subjects."
  },
  {
   "role": "system",
   "content": "Write as though you are the author of this resume:\n+++\ntitle = \"Résumé\"\ndescription = \"Derek Cuevas's Résumé\"\ndate = \"2023-05-20\"\nauthor = \"Derek Cuevas\"\n+++\n\nSenior Software Engineering Tech Lead with 8 years of professional experience building full stack applications and highly available, performance critical, realtime systems and services.\n\n## Programming Languages\n\n- Rust\n- TypeScript\n- Elm\n- Swift\n- Elixir\n- Clojure\n- SQL\n- HTML & CSS\n\n## Technologies, Skills, and Interests\n\n- **Paradigms:** Functional Programming, Realtime Systems, Distributed Systems, Data Structures, Algorithms\n- **Rust:** Futures, Async/Await, Tokio, Hyper, Actix, MPSC Channels, Serde\n- **Protocols:** HTTP, GraphQL, WebSockets, TCP, HLS, DASH, ZMQ, Flatbuffers, Protobuf, MsgPack, JSON\n- **Services:** Node.js, AWS (S3, EC2, SQS, ect.), PostgreSQL, Redis, Pulsar, RabbitMQ\n- **Frameworks:** React, React Native, Redux, RxJs, SwiftUI\n- **Tooling:** Git, Vim, Docker, Bash\n"
  },
  {
   "role": "system",
   "content": "New topics for the blog should be based off of the technical skills, experience, and interests presented in the resume."
  },
  {
   "role": "system",
   "content": "Your previous 20 posts include: \"Mastering Connection Pooling in Django\", \"Mastering the Actor Model Concurrency Paradigm in Elixir\", \"How to use Elm to build maintainable, efficient, and bug-free front-end applications\", \"How to Use Generators to Create Infinite Sequences in Python\", \"Building High Performance Distributed Data Pipelines with Apache Flink\", \"Implementing a Consistent Hashing Algorithm in TypeScript\", \"The Event Sourcing Design Pattern in TypeScript\", \"How to Write Fast Python Code\", \"Building a High-Availability Microservice Architecture with Modern C++\", \"How to Build a Realtime Collaborative Spreadsheet Application with Elixir and Phoenix LiveView\", \"Using the Adapter Pattern to Integrate Legacy Code\", \"Building a Highly Scalable and Performant GraphQL API with Sangria\", \"Building Robust Elixir Back-End APIs with Phoenix Contexts\", \"Building real-time collaborative web apps with Operational Transformation\", \"Mastering Clojure's Reducers\", \"How to Use Swift's Result Type for Error Handling\", \"Mastering Rust Ownership Rules and Borrowing Rules for Type-Safe and Performant Programs\", \"Projecting Elixir's Enum Module into Batches\", \"Mastering Browser Storage in TypeScript\", \"Mastering Rust's `std::env::args_os()`\""
  },
  {
   "role": "system",
   "content": "Your writing style is concise, to the point, informative, and focused on detailed technical information."
  },
  {
   "role": "user",
   "content": "Come up with an advanced topic for an expert level reader that is about a particular single feature, fact, pattern, paradigm, convention, theory, framework, library, practical example, or best practice."
  },
  {
   "role": "user",
   "content": "The topic should not be related to a previous post."
  },
  {
   "role": "user",
   "content": "Write a post about the topic following the rules defined."
  },
  {
   "role": "user",
   "content": "Use computer code snippets (in the relevant programming language) in order to illustrate the information presented."
  },
  {
   "role": "user",
   "content": "Format the body of the post in the markdown markup language."
  },
  {
   "role": "user",
   "content": "Include the title of the post on the first line."
  },
  {
   "role": "user",
   "content": "Include one to three tags for the post on the second line formatted as a comma separated list, for example: \"Tags: <tag1>, <tag2>\"."
  },
  {
   "role": "user",
   "content": "Do not include images in the post."
  },
  {
   "role": "user",
   "content": "The post should be multiple sections in length and come to a complete finish."
  }
 ],
 "completion": {
  "id": "chatcmpl-7P30SOH8y3OE2fiASuvIZZqvPy56A",
  "object": "chat.completion",
  "created": 1686204112,
  "model": "gpt-3.5-turbo-0301",
  "usage": {
   "prompt_tokens": 822,
   "completion_tokens": 848,
   "total_tokens": 1670
  },
  "choices": [
   {
    "message": {
     "role": "assistant",
     "content": "Title: Writing Efficient SQL Queries: Tips and Tricks\nTags: SQL, Databases, Best Practices\n\nOptimizing SQL queries is essential to maintain a high-performing database infrastructure. In this post, I will provide tips and tricks that you can use to build efficient SQL queries. I will cover how to write efficient and optimized queries to retrieve, update and delete data quickly.\n\n## 1. Use Indexes\n\nOne of the best ways to improve query performance is by using indexes. An index is like a table of contents in a book, where rows are sorted by a specified column. Indexes speed up queries by allowing the database to quickly locate the rows that match the WHERE clause of a query.\n\nFor example, let's assume that you have the following table of books:\n\n```\nCREATE TABLE books (\n    id INTEGER PRIMARY KEY,\n    title VARCHAR(100) NOT NULL,\n    author VARCHAR(100) NOT NULL,\n    publish_date DATE NOT NULL\n);\n```\n\nIf you want to search for all books by a specific author, then you should add an index to the `author` column:\n\n```\nCREATE INDEX index_author ON books(author);\n```\n\n## 2. Use JOINs Instead of Subqueries\n\nSubqueries can be less efficient than JOINs, especially when handling large datasets. If you have a subquery that retrieves a lot of data, it's often better to rewrite the query as a JOIN.\n\nHere's an example of a subquery:\n\n```\nSELECT * FROM orders WHERE order_date IN (SELECT order_date FROM orders WHERE total_amount > 100);\n```\n\nAnd here's an equivalent query using a JOIN:\n\n```\nSELECT orders.* FROM orders JOIN (SELECT DISTINCT order_date FROM orders WHERE total_amount > 100) dates ON orders.order_date = dates.order_date;\n```\n\nJOINs are generally more efficient, particularly when working with larger datasets.\n\n## 3. Use Appropriate Data Types\n\nUsing the correct data types can have a significant impact on query performance. You should choose data types based on the value range of the data as well as the operation you want to perform.\n\nFor example, using a `VARCHAR` field for a `DATE` field can result in poorer performance when filtering or sorting by date. Similarly, using a `TEXT` field for short strings can have a negative impact on performance, since `TEXT` fields can be up to 1GB in size.\n\n## 4. Avoid Using SELECT *\n\nUsing `SELECT *` can negatively impact query performance, as it forces the database to retrieve all columns from the table. Retrieving unnecessary data can slow down queries, especially with large tables.\n\nInstead, you should specify the columns that you actually need. For example:\n\n```\nSELECT book_id, author FROM books;\n```\n\n## 5. Use LIMIT\n\nUsing `LIMIT` can significantly speed up queries that return large result sets.\n\n```\nSELECT * FROM books ORDER BY title LIMIT 10;\n```\n\nThis query returns only the first 10 rows. It's much faster than returning all rows and then discarding all but the first 10 in your application logic.\n\n## 6. Use EXISTS Instead of COUNT\n\nUsing `EXISTS` instead of `COUNT` can also improve query performance. `COUNT` has to count all rows, whereas `EXISTS` only has to determine whether any matching rows exist.\n\nFor example, consider the following query:\n\n```\nSELECT * FROM books WHERE title LIKE '%harry potter%';\n```\n\nYou don't need to count the number of matching rows; you just need to determine whether any exist. You can use `EXISTS` for this:\n\n```\nSELECT EXISTS(SELECT 1 FROM books WHERE title LIKE '%harry potter%');\n```\n\n## Conclusion\n\nOptimizing SQL queries can make a huge difference in your application's performance. By using indexes, JOINs, appropriate data types, and LIMIT, you can significantly improve the speed of your queries. Finally, remember to only select the columns you need, and use `EXISTS` instead of `COUNT` where possible. With these tips and tricks, you can make your SQL queries faster, more efficient, and more effective."
    },
    "finish_reason": "stop",
    "index": 0
   }
  ]
 }
}
{
 "model": "gpt-3.5-turbo-0301",
 "prompt": [
  {
   "role": "user",
   "content": "You are the author of a personal technical blog about software engineering and computer science subjects."
  },
  {
   "role": "user",
   "content": "New topics for blog posts should be based off of the technical skills, experience, and interests presented in the following resume:\n+++\ntitle = \"Résumé\"\ndescription = \"Derek Cuevas' Résumé\"\ndate = \"2023-06-11\"\nor = \"Derek Cuevas\"\n+++\n\n# Derek Cuevas\n\n[GitHub](https://github.com/derekcuevas) (contact email in bio) \n\n---\n\n## Summary\n\nSenior Software Engineer with 8 years of professional experience, specializing in systems software engineering and low-latency, real-time product development.\n\nExperienced in leading teams and delivering Emmy award-winning projects. Passionate about functional programming and building high performance real-time systems. Skilled in a variety of programming languages and technologies with expertise in [Rust](https://www.rust-lang.org/) and [TypeScript](https://www.typescriptlang.org/).\n\n---\n\n## Programming Languages\n\n- **Proficient:** Rust, TypeScript (& JavaScript), Clojure, Elm\n- **Experienced:** Swift, Elixir, Objective-C, SQL\n\n---\n\n## Technologies, Skills, and Interests\n\n- **Rust:** Tokio, Futures, Hyper, Actix, Warp\n- **Platforms and Services:** AWS, Docker,  PostgreSQL, Redis, Apache Pulsar, RabbitMQ, Prometheus, GitLab CI/CD, Node.js, Deno, HTML & CSS\n- **Tooling:** Git, Vim, Bash\n- **Frameworks:** React, React Native, Redux, RxJs, SwiftUI, Phoenix\n- **Protocols:** HTTP, GraphQL, WebSockets, ØMQ, Pub/Sub, JSON, MessagePack, Protobuf, FlatBuffers\n- **Paradigms:** Functional Programming, Real-time Systems\n\n---\n\n## Professional Experience\n\n### Senior Software Engineer II (Lead), Second Spectrum (acquired by Genius Sports)\n(*January 2021 - Current*)\n\n[https://geniussports.com/](https://geniussports.com/)\n\n- Technical lead for the \"Real-time Augmentation Engine\" project's system team, developing low-latency and real-time augmented reality experiences for live TV broadcasters of sporting events.\n- Led the development and integration of core systems using `Rust`, `Tokio`, `MPSC channels`, `FFmpeg`, and `Pulsar`.\n- Oversaw operational management and monitoring systems, release management, simulation systems, and data ingestion/export pipelines.\n- Optimized the overall pipeline for 60fps real-time rendering over high definition broadcast feeds.\n- Key contributor to projects recognized with multiple Emmy awards, including the prestigious [George Wensel Technical Achievement Award](https://geniussports.com/customer-stories/cbs-and-genius-win-sports-emmy-for-romovision/) and Amazon's [Outstanding Interactive Experience](https://www.aboutamazon.com/news/entertainment/thursday-night-football-on-prime-video-wins-sports-emmy-award) at the `Sports Emmys`.\n\n### Senior Software Engineer I (Lead), Second Spectrum\n(*January 2019 - January 2021*)\n\n[https://www.secondspectrum.com/](https://www.secondspectrum.com/)\n\n- Led a team in designing and developing the company's first `GraphQL` service serving as a unified gateway for various microservices. Built upon the `Apollo` server framework leveraging `Node.js`, `TypeScript`, `PostgreSQL`, and `Redis` for caching and pub/sub.\n- Developed a dashboard built with `Three.js` for visualizing 3D player tracking datasets and highlighting data discrepancies.\n- Created a prototype `iOS` application for video highlights using `Swift`, `SwiftUI`, and the `Combine` framework.\n- Mentored interns and fellow engineers, fostering collaboration and knowledge sharing.\n\n### Software Engineer, Second Spectrum\n(*August 2016 - January 2019*)\n\n[https://www.secondspectrum.com/](https://www.secondspectrum.com/)\n\n- Developed the operational and quality assurance management application for the company's optical player tracking system. Stack included `Elixir` (with the `Phoenix` framework), `React`, and heavy use of `WebSockets` to sync and display corrections to operators in near real-time.\n- Improved operator efficiency by 100% through the implementation of an automated task selection system.\n- Led the development of the LA Clipper's live streaming web and mobile application \"Clippers CourtVision\". Stack included `Elm` for the web front-end and `React Native` for the mobile app.\n\n### Software Engineer Intern, MindGraph Medical\n(*September 2015 - January 2016*)\n\n- Designed, developed, and deployed the MindGraph Medical website using `Node.js`, `jQuery`, and `Bootstrap`.\n\n---\n\n## Education\n\n**B.S. Computer Science, San Diego State University, San Diego**\n\n(*Class of 2016*)\n\n- [Advanced Certificate in Web and Mobile Applications Development](https://cs.sdsu.edu/about/)\n\n---\n\n## Personal Projects\n\n- [FYGT](https://github.com/DerekCuevas/derekcuevas.github.io): An experimental blog built with `Hugo`, `Deno`, and `ChatGPT`.\n- [Advent of Code 2022](https://github.com/DerekCuevas/advent-of-code-2022): Solutions to Advent of Code programming problems using functional approaches in `Clojure`.\n- [Interview Cake Algorithms Problem Set](https://github.com/DerekCuevas/interview-cake-clj): Solutions to the interview cake programming problems also by exploring functional approaches in `Clojure`.\n- [Friend List](https://github.com/DerekCuevas/friend-list): A non-trivial programming challenge exploring asynchronous side effects with different programming patterns.\n- [Redux Meta Reducer](https://github.com/DerekCuevas/redux-meta-reducer): A `Redux` higher-order reducer for simplifying the state of fetched data.\n- [Avowal](https://github.com/DerekCuevas/avowal): An asynchronous form validation library for `JavaScript`.\n"
  },
  {
   "role": "user",
   "content": "Your previous 60 posts include: \"Advanced Techniques for Scaling Distributed Systems with Apache Flink\", \"Understanding Rust's String Types\", \"Advanced Error Handling with Rust's Result Type\", \"Building Custom Data Types with Rust's derive Macro\", \"Writing Type-Safe Code with TypeScript's unknown Type\", \"Building High-Performance Websites with Deno\", \"Advanced Techniques for Implementing the Decorator Design Pattern in Rust\", \"Building Robust and Secure GraphQL Servers with Rust\", \"Advanced Techniques for Working with WebSockets in Rust\", \"Understanding the Principles of Reactive Programming in Java\", \"The Power of Rust's Const Generics\", \"Mastering Rust's Parallel Iterator: A Comprehensive Guide\", \"Exploring Advanced Types in TypeScript: Mapped & Conditional Types\", \"Exploring the Rust Standard Library's `io` Module\", \"Mastering the Decorator Pattern in TypeScript\", \"Mastering Protocol Buffers in Rust\", \"Mastering Rust's Memory Allocation System\", \"Modern Web Development with SwiftNIO\", \"Mastering Rust's Result Type\", \"Building High-Performance Machine Learning Pipelines with Rust\", \"Advanced Techniques for Working with PostgreSQL Arrays\", \"Mastering HTML and CSS Accessibility: A Comprehensive Guide\", \"Mastering Apache Pulsar's Message Retention Policy\", \"Mastering TypeScript's Record Type\", \"Mastering Rust's Async/Await Syntax\", \"Mastering the Decorator Pattern in Rust\", \"The Power of Rust's Multithreading Library: A Comprehensive Guide\", \"Mastering the Svelte Framework: A Comprehensive Guide\", \"Best Practices for Integrating React and TypeScript\", \"Deep Dive into Functional Reactive Programming with RxJS\", \"Understanding Java Memory Model: A Comprehensive Guide\", \"Understanding the Fundamentals of Distributed Systems Programming in Go\", \"Effective Techniques for Building Blazing-Fast Mobile Apps with React Native\", \"Understanding the SOLID Principles of Object-Oriented Design\", \"Advanced Techniques for Scaling Node.js Applications\", \"Implementing the Facade Design Pattern in Swift\", \"Building Efficient Mobile Apps with React Native Flexbox\", \"The Power of the Copy-on-Write Methodology\", \"Writing Correct Web3 Smart Contracts with Solidity's Concerned Oxide (SCOCO) Conventions\", \"Demystifying Rust's 'unwrap()' Method\", \"Mastering Rust's Pattern Matching\", \"The Power of Streams in Java\", \"Mastering C++17 Template Argument Deduction\", \"Mastering the Composite Design Pattern in C\", \"Implementing the Command Design Pattern in Kotlin\", \"Mastering the Observer Design Pattern in Rust\", \"Understanding Scala's Implicits: A Comprehensive Guide\", \"Mastering Terraform's State File\", \"Title:\", \"Mastering the Decorator Design Pattern in TypeScript\", \"Mastering the Decorator Pattern in Java\", \"The Fundamentals of Concurrency in Elixir\", \"Mastering the Singleton Design Pattern in Java\", \"Building a Scalable and Secure Authorization System with Keycloak\", \"A Deep Dive into Rust's Ownership Model\", \"Best Practices for Building a High-Performance Web Application with Node.js\", \"Generating Synthetic Data with Python's Faker Library\", \"Understanding Rust's Unsafe Keyword\", \"How to use Access Control in Go\", \"Building a High-Performance Event Store with Apache Kafka\""
  },
  {
   "role": "user",
   "content": "Come up with an advanced topic for an expert level reader that is about a particular single feature, fact, pattern, paradigm, convention, theory, framework, library, or best practice."
  },
  {
   "role": "user",
   "content": "Write a post about the chosen topic following the instructions given below:"
  },
  {
   "role": "user",
   "content": "Your writing style is academic, informative, and focused on detailed technical information."
  },
  {
   "role": "user",
   "content": "The topic should not be related to a previous post."
  },
  {
   "role": "user",
   "content": "Use computer code snippets (in the relevant programming language) in order to illustrate the information presented."
  },
  {
   "role": "user",
   "content": "Format the body of the post in the markdown markup language."
  },
  {
   "role": "user",
   "content": "Come up with a title for the post and include it on the first line."
  },
  {
   "role": "user",
   "content": "Include one to three tags for the post on the second line formatted as a comma separated list, for example: \"Tags: <tag1>, <tag2>\"."
  },
  {
   "role": "user",
   "content": "The post should be multiple sections in length."
  },
  {
   "role": "user",
   "content": "Do not include links to images in the post."
  },
  {
   "role": "user",
   "content": "Do not include contact information in the post."
  },
  {
   "role": "user",
   "content": "Do not add extra whitespace around lists."
  }
 ],
 "completion": {
  "id": "chatcmpl-7ZHycCsgTVVrFJ6UybdLIS4CZ4oCZ",
  "object": "chat.completion",
  "created": 1688644938,
  "model": "gpt-3.5-turbo-0301",
  "choices": [
   {
    "index": 0,
    "message": {
     "role": "assistant",
     "content": "Title: Mastering the Asynchronous Programming in Clojure\n\nTags: Clojure, Asynchronous Programming, Functional Programming\n\nClojure, being a functional programming language, encourages the use of immutable, composable data structures and pure functions. Clojure provides a range of concurrency primitives and abstractions, including agents, refs, atoms, promises, futures, and channels, making it ideal for building scalable and high-performance systems that utilize multi-core hardware architectures.\n\nIn this post, we are going to discuss asynchronous programming in Clojure by exploring various tools and techniques for concurrent and parallel programming.\n\n## Understanding Asynchronous Programming\n\nAsynchronous programming is a programming model that allows multiple tasks to execute concurrently or in parallel without blocking one another. It enables a program to start a task and then continue running other tasks while the first task executes in the background. In Clojure, the core.async library provides a set of constructs for asynchronous programming.\n\n### Clojure's Asynchronous Programming Library: core.async\n\nThe `core.async` library provides a set of constructs for asynchronous programming in Clojure. These constructs include channels, go blocks, and macros that simplify processing channels.\n\nChannels in the `core.async` library operate using communication or message-passing semantics. Unlike shared-state concurrency where access to data is synchronized, channels provide a model of concurrency based on the exchange of immutable messages. \n\nLet's first see how the `go` macro works:\n\n```clojure\n(require '[clojure.core.async :as async :refer [go <!]])\n\n(defn test-chan []\n    (let [c (async/chan)]\n      (go (println \"Sending value\" 1)\n          (async/>!! c 1))\n      (go (println \"Received value\" (async/<! c)))))\n\n(test-chan)\n; => Sending value 1\n; => Received value 1\n```\n\nIn this example, the `go` macro is used to define a coroutine. A coroutine is a concurrent routine that runs in a separate thread or process of control. The ‘go’ macro generates a new coroutine that runs asynchronously and concurrently with the main program.\n\nIn the `test-chan` function, we create a new channel using `async/chan`. We then create two coroutines that interact with this channel. The first coroutine prints the message \"Sending value\" followed by the value 1. It then sends this value to the channel using `async/>!!`.\n\nThe second coroutine prints the message \"Received value\" followed by the value read from the same channel using `async/<!`.\n\n### Using Asynchronous Channels\n\nChannels in Clojure can be used to pass data between coroutines in a thread-safe and non-blocking manner. Channels can be designed to have a fixed or variable size. A fixed channel has a fixed size that is determined when the channel is created. A variable channel has a size that can be increased or decreased dynamically.\n\n```clojure\n(defn test-chan []\n  (let [c (async/chan 10)]\n    (doseq [i (range 100)]\n      (async/go (async/<! c)))\n    (doseq [i (range 100)]\n      (async/go (async/>!! c :value1)))\n    (dosync\n      (println \"Channel buffer size:\" (count c)))))\n```\n\nIn this example, we create a new channel with a buffer size of 10 using `async/chan`. We then create a hundred coroutines that just read from the channel using `async/<!`. We then create another hundred coroutines that send the value `:value1` repeatedly to the same channel using `async/>!!`.\n\nAfter both sets of coroutines have completed, we print the buffer size of the channel using `count`. \n\n### Parallel Computation\n\nIn Clojure, parallel computation can be implemented using a combination of `pmap` and `async/pipeline`. `pmap` is a function that applies a function to each item of a sequence and returns a sequence of the results. `async/pipeline` is a function that connects a sequence of transformation stages with channels. \n\n```clojure\n(defn test-pipeline []\n  (let [input (range 100)\n        output (async/chan)]\n    (async/pipeline 4\n      output\n      (map #(* % %))\n      (map #\"result: \" (str))\n      (async/to-chan)))\n    (println (vec (async/<!! (async/into [] output))))))\n```\n\nIn this example, we first create an input sequence of integers from 0 to 99 with `(range 100)`. We then create an output channel using `async/chan`.\n\nWe then create a pipeline of 4 stages using `async/pipeline`. The first stage is a `map` function that squares each input element. The second stage is another `map` function that prepends the string `\"result: \"` to the output of the first stage. The third stage sends the output of the second stage to the same channel using `async/to-chan`.\n\nFinally, we read all the values from the output channel using `async/into` and `async/<!!`, and then convert the output channel into a vector for printing.\n\n## Conclusion\n\nIn this post, we have seen how to perform asynchronous programming in Clojure using the `core.async` library. We have explored channels, go blocks, and macros that simplify processing channels.\n\nBy using channels in Clojure, we can pass data between coroutines in a thread-safe and non-blocking manner. We have also looked at how to perform parallel computation using a combination of `pmap` and `async/pipeline`. Utilizing these core features and techniques can lead to high-performance applications and systems that scale effortlessly."
    },
    "finish_reason": "stop"
   }
  ],
  "usage": {
   "prompt_tokens": 2185,
   "completion_tokens": 1168,
   "total_tokens": 3353
  }
 }
}
{
 "prompt": [
  {
   "role": "user",
   "content": "You are the author of a personal technical blog about software engineering and computer science subjects."
  },
  {
   "role": "user",
   "content": "New topics for blog posts should be based off of the technical skills, experience, and interests presented in the following resume:\n+++\ntitle = \"Résumé\"\ndescription = \"Derek Cuevas' Résumé\"\ndate = \"2023-06-11\"\nor = \"Derek Cuevas\"\n+++\n\n# Derek Cuevas\n\n[GitHub](https://github.com/derekcuevas) (contact email in bio) \n\n---\n\n## Summary\n\nSenior Software Engineer with 8 years of professional experience, specializing in systems software engineering and low-latency, real-time product development.\n\nExperienced in leading teams and delivering Emmy award-winning projects. Passionate about functional programming and building high performance real-time systems. Skilled in a variety of programming languages and technologies with expertise in [Rust](https://www.rust-lang.org/) and [TypeScript](https://www.typescriptlang.org/).\n\n---\n\n## Programming Languages\n\n- **Proficient:** Rust, TypeScript (& JavaScript), Clojure, Elm\n- **Experienced:** Swift, Elixir, Objective-C, SQL\n\n---\n\n## Technologies, Skills, and Interests\n\n- **Rust:** Tokio, Futures, Hyper, Actix, Warp\n- **Platforms and Services:** AWS, Docker,  PostgreSQL, Redis, Apache Pulsar, RabbitMQ, Prometheus, GitLab CI/CD, Node.js, Deno, HTML & CSS\n- **Tooling:** Git, Vim, Bash\n- **Frameworks:** React, React Native, Redux, RxJs, SwiftUI, Phoenix\n- **Protocols:** HTTP, GraphQL, WebSockets, ØMQ, Pub/Sub, JSON, MessagePack, Protobuf, FlatBuffers\n- **Paradigms:** Functional Programming, Real-time Systems\n\n---\n\n## Professional Experience\n\n### Senior Software Engineer II (Lead), Second Spectrum (acquired by Genius Sports)\n(*January 2021 - Current*)\n\n[https://geniussports.com/](https://geniussports.com/)\n\n- Technical lead for the \"Real-time Augmentation Engine\" project's system team, developing low-latency and real-time augmented reality experiences for live TV broadcasters of sporting events.\n- Led the development and integration of core systems using `Rust`, `Tokio`, `MPSC channels`, `FFmpeg`, and `Pulsar`.\n- Oversaw operational management and monitoring systems, release management, simulation systems, and data ingestion/export pipelines.\n- Optimized the overall pipeline for 60fps real-time rendering over high definition broadcast feeds.\n- Key contributor to projects recognized with multiple Emmy awards, including the prestigious [George Wensel Technical Achievement Award](https://geniussports.com/customer-stories/cbs-and-genius-win-sports-emmy-for-romovision/) and Amazon's [Outstanding Interactive Experience](https://www.aboutamazon.com/news/entertainment/thursday-night-football-on-prime-video-wins-sports-emmy-award) at the `Sports Emmys`.\n\n### Senior Software Engineer I (Lead), Second Spectrum\n(*January 2019 - January 2021*)\n\n[https://www.secondspectrum.com/](https://www.secondspectrum.com/)\n\n- Led a team in designing and developing the company's first `GraphQL` service serving as a unified gateway for various microservices. Built upon the `Apollo` server framework leveraging `Node.js`, `TypeScript`, `PostgreSQL`, and `Redis` for caching and pub/sub.\n- Developed a dashboard built with `Three.js` for visualizing 3D player tracking datasets and highlighting data discrepancies.\n- Created a prototype `iOS` application for video highlights using `Swift`, `SwiftUI`, and the `Combine` framework.\n- Mentored interns and fellow engineers, fostering collaboration and knowledge sharing.\n\n### Software Engineer, Second Spectrum\n(*August 2016 - January 2019*)\n\n[https://www.secondspectrum.com/](https://www.secondspectrum.com/)\n\n- Developed the operational and quality assurance management application for the company's optical player tracking system. Stack included `Elixir` (with the `Phoenix` framework), `React`, and heavy use of `WebSockets` to sync and display corrections to operators in near real-time.\n- Improved operator efficiency by 100% through the implementation of an automated task selection system.\n- Led the development of the LA Clipper's live streaming web and mobile application \"Clippers CourtVision\". Stack included `Elm` for the web front-end and `React Native` for the mobile app.\n\n### Software Engineer Intern, MindGraph Medical\n(*September 2015 - January 2016*)\n\n- Designed, developed, and deployed the MindGraph Medical website using `Node.js`, `jQuery`, and `Bootstrap`.\n\n---\n\n## Education\n\n**B.S. Computer Science, San Diego State University, San Diego**\n\n(*Class of 2016*)\n\n- [Advanced Certificate in Web and Mobile Applications Development](https://cs.sdsu.edu/about/)\n\n---\n\n## Personal Projects\n\n- [FYGT](https://github.com/DerekCuevas/derekcuevas.github.io): An experimental blog built with `Hugo`, `Deno`, and `ChatGPT`.\n- [Advent of Code 2022](https://github.com/DerekCuevas/advent-of-code-2022): Solutions to Advent of Code programming problems using functional approaches in `Clojure`.\n- [Interview Cake Algorithms Problem Set](https://github.com/DerekCuevas/interview-cake-clj): Solutions to the interview cake programming problems also by exploring functional approaches in `Clojure`.\n- [Friend List](https://github.com/DerekCuevas/friend-list): A non-trivial programming challenge exploring asynchronous side effects with different programming patterns.\n- [Redux Meta Reducer](https://github.com/DerekCuevas/redux-meta-reducer): A `Redux` higher-order reducer for simplifying the state of fetched data.\n- [Avowal](https://github.com/DerekCuevas/avowal): An asynchronous form validation library for `JavaScript`.\n"
  },
  {
   "role": "user",
   "content": "Your previous 60 posts include: \"Understanding Java Memory Model: A Comprehensive Guide\", \"Understanding the Fundamentals of Distributed Systems Programming in Go\", \"Effective Techniques for Building Blazing-Fast Mobile Apps with React Native\", \"Understanding the SOLID Principles of Object-Oriented Design\", \"Advanced Techniques for Scaling Node.js Applications\", \"Implementing the Facade Design Pattern in Swift\", \"Building Efficient Mobile Apps with React Native Flexbox\", \"The Power of the Copy-on-Write Methodology\", \"Writing Correct Web3 Smart Contracts with Solidity's Concerned Oxide (SCOCO) Conventions\", \"Demystifying Rust's 'unwrap()' Method\", \"Mastering Rust's Pattern Matching\", \"The Power of Streams in Java\", \"Mastering C++17 Template Argument Deduction\", \"Mastering the Composite Design Pattern in C\", \"Implementing the Command Design Pattern in Kotlin\", \"Mastering the Observer Design Pattern in Rust\", \"Understanding Scala's Implicits: A Comprehensive Guide\", \"Mastering Terraform's State File\", \"Title:\", \"Mastering the Decorator Design Pattern in TypeScript\", \"Mastering the Decorator Pattern in Java\", \"The Fundamentals of Concurrency in Elixir\", \"Mastering the Singleton Design Pattern in Java\", \"Building a Scalable and Secure Authorization System with Keycloak\", \"A Deep Dive into Rust's Ownership Model\", \"Best Practices for Building a High-Performance Web Application with Node.js\", \"Generating Synthetic Data with Python's Faker Library\", \"Understanding Rust's Unsafe Keyword\", \"How to use Access Control in Go\", \"Building a High-Performance Event Store with Apache Kafka\", \"Building a Highly Scalable Kafka Consumer in Go\", \"Building Type-Safe APIs with TypeScript\", \"Implementing the Flyweight Design Pattern in C\", \"Gaining Insights from Large Datasets Using Delta Lake\", \"Using the Observer Design Pattern in Scala\", \"The Builder Design Pattern in TypeScript\", \"Using Array Partitions in Python for Improved Performance\", \"Advanced Techniques for Debugging Rust Programs\", \"Writing a Domain-Specific Language (DSL) in Haskell\", \"Securely Managing Secrets in Production Applications\", \"Implementing the Factory Method Design Pattern in Dart\", \"Boosting Rust Performance with Allocator Selection\", \"Building Real-Time Audio Applications with WebRTC and Rust\", \"Rust's Pinning API: A Comprehensive Guide\", \"Building a Highly Scalable and Fault-Tolerant Load Balancer with Rust\", \"How to Use AWS Fargate for Highly Scalable and Serverless Containers\", \"How to Build a Recommendation Engine with Apache Spark\", \"Building a Distributed Key-Value Store on Top of Apache Kafka\", \"Building a GraphQL API with Actix-Web and Diesel\", \"Building a High-Performance HTTP Proxy with Nginx\", \"How to Use Kafka to Build Scalable and Fault-Tolerant Distributed Systems\", \"Advanced Techniques for Using PostgreSQL JSONB Data Type\", \"Writing Secure Rust Code: A Deep Dive into Memory Safety\", \"Fine-tuning BERT for Question Answering - A Step-by-Step Guide\", \"How to Use the Decorator Pattern for Flexible and Extensible Code\", \"A Deep Dive into Multithreading with Clojure\", \"How to Design Reactive Microservices Using Event-Driven Architecture\", \"Writing Efficient SQL Queries: Tips and Tricks\", \"Mastering Connection Pooling in Django\", \"Mastering the Actor Model Concurrency Paradigm in Elixir\""
  },
  {
   "role": "user",
   "content": "Come up with an advanced topic for an expert level reader that is about a particular single feature, fact, pattern, paradigm, convention, theory, framework, library, or best practice."
  },
  {
   "role": "user",
   "content": "Write a post about the chosen topic following the instructions given below:"
  },
  {
   "role": "user",
   "content": "Your writing style is academic, informative, and focused on detailed technical information."
  },
  {
   "role": "user",
   "content": "The topic should not be related to a previous post."
  },
  {
   "role": "user",
   "content": "Use computer code snippets (in the relevant programming language) in order to illustrate the information presented."
  },
  {
   "role": "user",
   "content": "Format the body of the post in the markdown markup language."
  },
  {
   "role": "user",
   "content": "Come up with a title for the post and include it on the first line."
  },
  {
   "role": "user",
   "content": "Include one to three tags for the post on the second line formatted as a comma separated list, for example: \"Tags: <tag1>, <tag2>\"."
  },
  {
   "role": "user",
   "content": "The post should be multiple sections in length."
  },
  {
   "role": "user",
   "content": "Do not include links to images in the post."
  },
  {
   "role": "user",
   "content": "Do not include contact information in the post."
  },
  {
   "role": "user",
   "content": "Do not add extra whitespace around lists."
  }
 ],
 "completion": {
  "id": "chatcmpl-7WkdnW8zqKK1D5OkHhNzww9odySf7",
  "object": "chat.completion",
  "created": 1688040139,
  "model": "gpt-3.5-turbo-0301",
  "choices": [
   {
    "index": 0,
    "message": {
     "role": "assistant",
     "content": "Title: Deep Dive into Functional Reactive Programming with RxJS\n\nTags: RxJS, functional programming, reactive programming\n\n# Deep Dive into Functional Reactive Programming with RxJS\n\nReactive programming can be thought of as a paradigm for writing software that is capable of responding in real-time to changes in incoming data. This powerful programming paradigm emphasizes declarative and functional coding patterns to manage data flows, making it well-suited for developing scalable, reactive systems. \n\nRxJS is one of the most widely-used reactive programming libraries for JavaScript and TypeScript environments, providing a rich set of abstractions for working with complex data streams in a reactive fashion. In this article, we will take a deep dive into the world of functional reactive programming with RxJS.\n\n## What is Functional Reactive Programming (FRP)?\n\nFunctional Reactive Programming (FRP) is a programming paradigm that combines functional and reactive techniques to represent and manipulate time-varying values in a declarative manner. In practical terms, an FRP-based system defines a set of reactive \"behaviors\" or \"streams\" over time, which can be composed and manipulated in a purely functional way. Essentially, value streams are transformed and manipulated using higher-order functions to implement complex behavior.\n\nAt its core, FRP solves the challenges of efficiently managing and coordinating asynchronous events and data streams. Traditionally, designing event-driven software requires low-level programming with asynchronous code that is difficult to manage and debug as the complexity of the system grows. By leveraging FRP principles, developers can work with data as (a)synchronous Reactive Streams over long periods of time, providing a simpler and more declarative programming model.\n\nThe RxJS framework brings a focus on functional programming to these reactive streams of data, which essentially turn your data into a sequence of observable events that can be manipulated in a purely functional way.\n\n## Getting Started with RxJS\n\nRxJS is a library that provides a set of powerful functions and operators for working with asynchronous data streams. The core of the library is the `Observable` type, which represents an asynchronous sequence of values that can be transformed and manipulated using powerful operators and functions.\n\nTo create an observable, you can use the `Observable.create()` method, providing a function that takes an `observer` object as its argument. The observer object has three methods that can be used to communicate with the observable stream: `next()`, `error()`, and `complete()`. Here's an example:\n\n```typescript\nimport { Observable } from 'rxjs';\n\nconst observable = Observable.create(function (observer) {\n  observer.next(1);\n  observer.next(2);\n  observer.next(3);\n  observer.complete();\n});\n\nobservable.subscribe({\n  next: x => console.log(x),\n  error: err => console.error(err),\n  complete: () => console.log('done')\n});\n\n// Output:\n// 1\n// 2\n// 3\n// done\n```\n\nThis code creates an observable that emits the values 1, 2, and 3, followed by a completion event. The `subscribe()` method is called on the observable, passing an object parameter with three methods: `next()`, `error()`, and `complete()`. The `next()` method is called every time a new value is emitted by the observable, the `error()` method is called if an error occurs, and the `complete()` method is called when the observable completes. \n\nThis code will output the values 1, 2, and 3 to the console, followed by the \"done\" message indicating that the observable has completed.\n\n## Operators\n\nOne of the most powerful features of RxJS is its rich set of operators, which provide a set of functions for working with observables in a variety of ways. Operators can be used to filter, map, aggregate, and transform data streams in a reactive fashion.\n\nFor example, the `map()` operator takes a function that is applied to each value emitted by the source observable, returning a new observable that emits the results of the transformation. Here's an example:\n\n```typescript\nimport { of } from 'rxjs';\nimport { map } from 'rxjs/operators';\n\nconst example = of(1, 2, 3);\n\nconst mapped = example.pipe(\n  map(x => x * 2)\n);\n\nmapped.subscribe(x => console.log(x));\n\n// Output:\n// 2\n// 4\n// 6\n```\n\nIn this example, we start with the observable `example` that emits the values 1, 2, and 3. We then apply the `map()` operator to the stream, doubling each value emitted by the source. Finally, we subscribe to the resulting observable using the `subscribe()` method, passing a function that will be called for each value emitted. This code will output the values 2, 4, and 6 to the console.\n\n## Combining Streams with Operators\n\nIn addition to simple transformation operators, RxJS provides many operators that can be used to combine streams in powerful ways. For example, the `merge()` operator can be used to merge two or more observables into a single observable that emits all of the values from each source in the order they are emitted. Here's an example:\n\n```typescript\nimport { of, merge } from 'rxjs';\n\nconst source1 = of('a', 'b', 'c');\nconst source2 = of('d', 'e', 'f');\nconst merged = merge(source1, source2);\n\nmerged.subscribe(x => console.log(x));\n\n// Output:\n// a\n// b\n// c\n// d\n// e\n// f\n```\n\nThis code creates two separate observable streams, `source1` and `source2`, both of which emit three values in sequence. The `merge()` operator is called on these two streams, creating a new observable that emits all of the values in the order they are emitted. We then subscribe to `merged` using the `subscribe()` method, passing a function that will be called for each value emitted. This code will output all six values (`a`, `b`, `c`, `d`, `e`, and `f`) to the console.\n\n## Conclusion\n\nIn this article, we provided an introduction to functional reactive programming and the RxJS framework. We explored the basics of creating, combining, and transforming streams of data in a reactive fashion using the powerful set of functions and operators provided by the library. With these concepts in mind, developers can leverage the power of functional programming and reactive streams to build robust and scalable applications that efficiently handle complex data flows."
    },
    "finish_reason": "stop"
   }
  ],
  "usage": {
   "prompt_tokens": 2223,
   "completion_tokens": 1327,
   "total_tokens": 3550
  }
 }
}
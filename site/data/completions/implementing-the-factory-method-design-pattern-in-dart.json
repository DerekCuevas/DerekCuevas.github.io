{
 "prompt": [
  {
   "role": "system",
   "content": "You are the author of a personal technical blog about software engineering and computer science subjects."
  },
  {
   "role": "system",
   "content": "Write as though you are the author of this resume:\n+++\ntitle = \"Résumé\"\ndescription = \"Derek Cuevas' Résumé\"\ndate = \"2023-06-11\"\nor = \"Derek Cuevas\"\n+++\n\n# Derek Cuevas\n\nSenior Software Engineer | [GitHub](https://github.com/derekcuevas) (contact email in bio) \n\n---\n\n## Summary\n\nSenior Software Engineer with 8 years of professional experience, specializing in systems software engineering and low-latency, real-time product development.\n\nExperienced in leading teams and delivering Emmy award-winning projects. Passionate about functional programming and building high performance real-time systems. Skilled in a variety of programming languages and technologies with expertise in [Rust](https://www.rust-lang.org/) and [TypeScript](https://www.typescriptlang.org/).\n\n---\n\n## Programming Languages\n\n- **Proficient:** Rust, TypeScript (& JavaScript), Elm, Clojure\n- **Experienced:** Elixir, Swift, Objective-C, SQL\n\n---\n\n## Technologies, Skills, and Interests\n\n- **Rust:** Tokio, Futures, Hyper, Actix, Warp\n- **Platforms and Services:** AWS, Docker,  PostgreSQL, Redis, Apache Pulsar, RabbitMQ, Prometheus, GitLab CI/CD, Node.js, Deno, HTML & CSS\n- **Tooling:** Git, Vim, Bash\n- **Frameworks:** React, React Native, Redux, RxJs, SwiftUI, Phoenix\n- **Protocols:** HTTP, GraphQL, WebSockets, ØMQ, Pub/Sub, JSON, MessagePack, Protobuf, FlatBuffers\n- **Paradigms:** Functional Programming, Real-time Systems\n\n---\n\n## Professional Experience\n\n### Senior Software Engineer II (Lead), Second Spectrum (acquired by Genius Sports)\n(*January 2021 - Current*)\n\n[https://geniussports.com/](https://geniussports.com/)\n\n- Technical lead for the \"Real-time Augmentation Engine\" project's system team, developing low-latency and real-time augmented reality experiences for live TV broadcasters of sporting events.\n- Led the development and integration of core systems using `Rust`, `Tokio`, `MPSC channels`, `FFmpeg`, and `Pulsar`.\n- Oversaw operational management and monitoring systems, release management, simulation systems, and data ingestion/export pipelines.\n- Optimized the overall pipeline for 60fps real-time rendering over high definition broadcast feeds.\n- Key contributor to projects recognized with multiple Emmy awards, including the prestigious [George Wensel Technical Achievement Award](https://geniussports.com/customer-stories/cbs-and-genius-win-sports-emmy-for-romovision/) and Amazon's [Outstanding Interactive Experience](https://www.aboutamazon.com/news/entertainment/thursday-night-football-on-prime-video-wins-sports-emmy-award) at the `Sports Emmys`.\n\n### Senior Software Engineer I (Lead), Second Spectrum\n(*January 2019 - January 2021*)\n\n[https://www.secondspectrum.com/](https://www.secondspectrum.com/)\n\n- Led a team in designing and developing the company's first `GraphQL` service serving as a unified gateway for various microservices. Built upon the `Apollo` server framework leveraging `Node.js`, `TypeScript`, `PostgreSQL`, and `Redis` for caching and pub/sub.\n- Developed a dashboard built with `Three.js` for visualizing 3D player tracking datasets and highlighting data discrepancies.\n- Created a prototype `iOS` application for video highlights using `Swift`, `SwiftUI`, and the `Combine` framework.\n- Mentored interns and fellow engineers, fostering collaboration and knowledge sharing.\n\n### Software Engineer, Second Spectrum\n(*August 2016 - January 2019*)\n\n[https://www.secondspectrum.com/](https://www.secondspectrum.com/)\n\n- Developed the operational and quality assurance management application for the company's optical player tracking system. Stack included `Elixir` (with the `Phoenix` framework), `React`, and heavy use of `WebSockets` to sync and display corrections to operators in near real-time.\n- Improved operator efficiency by 100% through the implementation of an automated task selection system.\n- Led the development of the LA Clipper's live streaming web and mobile application \"Clippers CourtVision\". Stack included `Elm` for the web front-end and `React Native` for the mobile app.\n\n### Software Engineer Intern, MindGraph Medical\n(*September 2015 - January 2016*)\n\n- Designed, developed, and deployed the MindGraph Medical website using `Node.js`, `jQuery`, and `Bootstrap`.\n\n---\n\n## Education\n\n**B.S. Computer Science, San Diego State University, San Diego**\n\n(*Class of 2016*)\n\n- [Advanced Certificate in Web and Mobile Applications Development](https://cs.sdsu.edu/about/)\n\n---\n\n## Personal Projects\n\n- [FYGT](https://github.com/DerekCuevas/derekcuevas.github.io): An experimental blog built with `Hugo`, `Deno`, and `ChatGPT`.\n- [Advent of Code 2022](https://github.com/DerekCuevas/advent-of-code-2022): Solutions to Advent of Code programming problems using functional approaches in `Clojure`.\n- [Interview Cake Algorithms Problem Set](https://github.com/DerekCuevas/interview-cake-clj): Solutions to the interview cake programming problems also by exploring functional approaches in `Clojure`.\n- [Friend List](https://github.com/DerekCuevas/friend-list): A non-trivial programming challenge exploring asynchronous side effects with different programming patterns.\n- [Redux Meta Reducer](https://github.com/DerekCuevas/redux-meta-reducer): A `Redux` higher-order reducer for simplifying the state of fetched data.\n- [Avowal](https://github.com/DerekCuevas/avowal): An asynchronous form validation library for `JavaScript`.\n"
  },
  {
   "role": "system",
   "content": "New topics for the blog should be based off of the technical skills, experience, and interests presented in the resume."
  },
  {
   "role": "system",
   "content": "Your previous 40 posts include: \"Boosting Rust Performance with Allocator Selection\", \"Building Real-Time Audio Applications with WebRTC and Rust\", \"Rust's Pinning API: A Comprehensive Guide\", \"Building a Highly Scalable and Fault-Tolerant Load Balancer with Rust\", \"How to Use AWS Fargate for Highly Scalable and Serverless Containers\", \"How to Build a Recommendation Engine with Apache Spark\", \"Building a Distributed Key-Value Store on Top of Apache Kafka\", \"Building a GraphQL API with Actix-Web and Diesel\", \"Building a High-Performance HTTP Proxy with Nginx\", \"How to Use Kafka to Build Scalable and Fault-Tolerant Distributed Systems\", \"Advanced Techniques for Using PostgreSQL JSONB Data Type\", \"Writing Secure Rust Code: A Deep Dive into Memory Safety\", \"Fine-tuning BERT for Question Answering - A Step-by-Step Guide\", \"How to Use the Decorator Pattern for Flexible and Extensible Code\", \"A Deep Dive into Multithreading with Clojure\", \"How to Design Reactive Microservices Using Event-Driven Architecture\", \"Writing Efficient SQL Queries: Tips and Tricks\", \"Mastering Connection Pooling in Django\", \"Mastering the Actor Model Concurrency Paradigm in Elixir\", \"How to use Elm to build maintainable, efficient, and bug-free front-end applications\", \"How to Use Generators to Create Infinite Sequences in Python\", \"Building High Performance Distributed Data Pipelines with Apache Flink\", \"Implementing a Consistent Hashing Algorithm in TypeScript\", \"The Event Sourcing Design Pattern in TypeScript\", \"How to Write Fast Python Code\", \"Building a High-Availability Microservice Architecture with Modern C++\", \"How to Build a Realtime Collaborative Spreadsheet Application with Elixir and Phoenix LiveView\", \"Using the Adapter Pattern to Integrate Legacy Code\", \"Building a Highly Scalable and Performant GraphQL API with Sangria\", \"Building Robust Elixir Back-End APIs with Phoenix Contexts\", \"Building real-time collaborative web apps with Operational Transformation\", \"Mastering Rust's Standard Library Function `mem::forget()`\", \"Build a Scalable, Maintainable, and Performant Full-Text Search System for Your Application with Elasticsearch\", \"Mastering Clojure's Reducers\", \"How to Use Swift's Result Type for Error Handling\", \"Mastering Rust Ownership Rules and Borrowing Rules for Type-Safe and Performant Programs\", \"Projecting Elixir's Enum Module into Batches\", \"Mastering Browser Storage in TypeScript\", \"Mastering Rust's `std::env::args_os()`\", \"Building Composable, Scalable, and Reusable Redux Reducers\""
  },
  {
   "role": "system",
   "content": "Your writing style is concise, to the point, informative, and focused on detailed technical information."
  },
  {
   "role": "user",
   "content": "Come up with an advanced topic for an expert level reader that is about a particular single feature, fact, pattern, paradigm, convention, theory, framework, library, or best practice."
  },
  {
   "role": "user",
   "content": "The topic should not be related to a previous post."
  },
  {
   "role": "user",
   "content": "Write a post about the topic following the rules defined."
  },
  {
   "role": "user",
   "content": "Use computer code snippets (in the relevant programming language) in order to illustrate the information presented."
  },
  {
   "role": "user",
   "content": "Format the body of the post in the markdown markup language."
  },
  {
   "role": "user",
   "content": "Include the title of the post on the first line."
  },
  {
   "role": "user",
   "content": "Include one to three tags for the post on the second line formatted as a comma separated list, for example: \"Tags: <tag1>, <tag2>\"."
  },
  {
   "role": "user",
   "content": "Do not include or link to images in the post."
  },
  {
   "role": "user",
   "content": "The post should be multiple sections in length and come to a complete finish."
  }
 ],
 "completion": {
  "id": "chatcmpl-7QUuv9zUltiNEk7KE8Wns7MR3wvER",
  "object": "chat.completion",
  "created": 1686549729,
  "model": "gpt-3.5-turbo-0301",
  "usage": {
   "prompt_tokens": 2070,
   "completion_tokens": 1224,
   "total_tokens": 3294
  },
  "choices": [
   {
    "message": {
     "role": "assistant",
     "content": "Title: Implementing the Factory Method Design Pattern in Dart\n\nTags: Dart, Design Patterns, Factory Method\n\n---\n\nIn object-oriented software development, design patterns play an essential role in solving recurring problems and creating reusable solutions. One such design pattern is the Factory Method pattern, which helps define an interface for creating objects but delegates the task of object instantiation to sub-classes, thus providing flexibility and decoupling the calling code from the concrete implementation.\n\nIn this post, we’ll discuss the Factory Method design pattern in the context of Dart programming language. We’ll cover the pattern’s definition, implementation, benefits, and drawbacks, along with some Dart code examples to illustrate the pattern’s usage.\n\n## What is the Factory Method Design Pattern?\n\nThe Factory Method is a creational design pattern that defines an interface for creating objects but lets sub-classes decide which class to instantiate. The pattern promotes code reuse and flexibility by decoupling the calling code from the actual object creation.\n\nThe Factory Method pattern consists of four basic components:\n\n- Product: The abstract class or interface that defines the object type that the Factory Method creates.\n- Concrete Product: The concrete classes that implement the `Product` interface.\n- Creator: The abstract class that declares the Factory Method as an abstract method for creating `Product` objects.\n- Concrete Creator: Concrete classes that inherit from `Creator` and provide an implementation for the Factory Method that returns an instance of a `Concrete Product`.\n\nThe Creator is usually an abstract class or an interface that defines the Factory Method and any other creation-related methods. The Concrete Creator provides an implementation for the Factory Method as well as any other applicable methods.\n\n## Implementing the Factory Method in Dart\n\nNow that we’ve got a clear understanding of the Factory Method, let’s implement it in Dart.\n\nIn our example, we’ll create a Toy Factory that produces different types of toys, such as Cars, Dolls, and Action Figures. The abstract class `Toy` represents the product, and the concrete classes, `Car`, `Doll` and `ActionFigure`, represent the corresponding concrete products. The `ToyFactory` is the Creator, and `ToyFactoryImpl` is the Concrete Creator.\n\nHere is the code for the `Toy` abstract class:\n\n```dart\nabstract class Toy {\n  void play();\n}\n```\n\nThe `Toy` class declares a single method, `play()`, that defines the functionality common to all concrete products.\n\nNext, we’ll define the `Car`, `Doll` and `ActionFigure` concrete classes:\n\n```dart\nclass Car implements Toy {\n  @override\n  void play() {\n    print('Playing with a car toy');\n  }\n}\n\nclass Doll implements Toy {\n  @override\n  void play() {\n    print('Playing with a doll toy');\n  }\n}\n\nclass ActionFigure implements Toy {\n  @override\n  void play() {\n    print('Playing with an action figure toy');\n  }\n}\n```\n\nEach concrete class implements the `Toy` interface and overrides the `play()` method to define its own behavior.\n\nNow, let's implement the `ToyFactory` abstract class:\n\n```dart\nabstract class ToyFactory {\n  Toy createToy(String type);\n}\n```\n\nThe `ToyFactory` class defines the Factory Method `createToy()` which creates a new `Toy` object based on the given `type`.\n\nFinally, we’ll create the Concrete Creator `ToyFactoryImpl` which implements the `ToyFactory`.\n\n```dart\nclass ToyFactoryImpl implements ToyFactory {\n  @override\n  Toy createToy(String type) {\n    switch (type) {\n      case 'car':\n        return Car();\n      case 'doll':\n        return Doll();\n      case 'action-figure':\n        return ActionFigure();\n      default:\n        throw Exception('Invalid toy type');\n    }\n  }\n}\n```\n\nThe `ToyFactoryImpl` class provides an implementation for the `createToy()` method, which returns a new concrete object based on the `type` argument. The method uses a switch statement to determine which concrete object to create and returns a new instance of the corresponding concrete class.\n\n## Usage\n\nTo create a new `Toy` object, we need to use an instance of the `ToyFactoryImpl` class. Here is an example usage:\n\n```dart\nvoid main() {\n  final factory = ToyFactoryImpl();\n  final carToy = factory.createToy('car');\n  final dollToy = factory.createToy('doll');\n  final actionFigureToy = factory.createToy('action-figure');\n\n  carToy.play(); // Playing with a car toy\n  dollToy.play(); // Playing with a doll toy\n  actionFigureToy.play(); // Playing with an action figure toy\n}\n```\n\nThe `main()` method creates a new instance of `ToyFactoryImpl` and uses it to create three different `Toy` objects. It then calls the `play()` method on each object.\n\n## Benefits and Drawbacks\n\nOne of the primary benefits of the Factory Method pattern is its ability to promote code reuse by centralizing the creation of objects. The pattern provides a clear separation of concerns by delegating object creation to the Concrete Creator, which removes the responsibility from the calling code.\n\nAnother advantage of this pattern is its flexibility. The Factory Method pattern allows for the use of different Concrete Creators with different implementation details without modifying the calling code. This feature provides the ability to extend the existing hierarchy, making it possible to add new types of products without modifying the existing code.\n\nHowever, applying this pattern to a small project or a project with a few concrete types might end up with overly complex and redundant code. Moreover, it might make debugging more challenging because of the increased number of objects and interleaved responsibilities.\n\n## Conclusion\n\nIn conclusion, we discussed the Factory Method design pattern, its implementation, usage, benefits, and drawbacks in the context of Dart programming language. The Factory Method pattern provides a means for creating objects and promoting code reuse while allowing for flexibility. It can be a useful tool for large-scale and long-term projects that have many concrete types."
    },
    "finish_reason": "stop",
    "index": 0
   }
  ]
 }
}
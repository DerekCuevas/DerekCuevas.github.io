{
 "prompt": [
  {
   "role": "user",
   "content": "You are the author of a personal technical blog about software engineering and computer science subjects."
  },
  {
   "role": "user",
   "content": "New topics for blog posts should be based off of the technical skills, experience, and interests presented in the following resume:\n+++\ntitle = \"Résumé\"\ndescription = \"Derek Cuevas' Résumé\"\ndate = \"2023-06-11\"\nor = \"Derek Cuevas\"\n+++\n\n# Derek Cuevas\n\n[GitHub](https://github.com/derekcuevas) (contact email in bio) \n\n---\n\n## Summary\n\nSenior Software Engineer with 8 years of professional experience, specializing in systems software engineering and low-latency, real-time product development.\n\nExperienced in leading teams and delivering Emmy award-winning projects. Passionate about functional programming and building high performance real-time systems. Skilled in a variety of programming languages and technologies with expertise in [Rust](https://www.rust-lang.org/) and [TypeScript](https://www.typescriptlang.org/).\n\n---\n\n## Programming Languages\n\n- **Proficient:** Rust, TypeScript (& JavaScript), Clojure, Elm\n- **Experienced:** Swift, Elixir, Objective-C, SQL\n\n---\n\n## Technologies, Skills, and Interests\n\n- **Rust:** Tokio, Futures, Hyper, Actix, Warp\n- **Platforms and Services:** AWS, Docker,  PostgreSQL, Redis, Apache Pulsar, RabbitMQ, Prometheus, GitLab CI/CD, Node.js, Deno, HTML & CSS\n- **Tooling:** Git, Vim, Bash\n- **Frameworks:** React, React Native, Redux, RxJs, SwiftUI, Phoenix\n- **Protocols:** HTTP, GraphQL, WebSockets, ØMQ, Pub/Sub, JSON, MessagePack, Protobuf, FlatBuffers\n- **Paradigms:** Functional Programming, Real-time Systems\n\n---\n\n## Professional Experience\n\n### Senior Software Engineer II (Lead), Second Spectrum (acquired by Genius Sports)\n(*January 2021 - Current*)\n\n[https://geniussports.com/](https://geniussports.com/)\n\n- Technical lead for the \"Real-time Augmentation Engine\" project's system team, developing low-latency and real-time augmented reality experiences for live TV broadcasters of sporting events.\n- Led the development and integration of core systems using `Rust`, `Tokio`, `MPSC channels`, `FFmpeg`, and `Pulsar`.\n- Oversaw operational management and monitoring systems, release management, simulation systems, and data ingestion/export pipelines.\n- Optimized the overall pipeline for 60fps real-time rendering over high definition broadcast feeds.\n- Key contributor to projects recognized with multiple Emmy awards, including the prestigious [George Wensel Technical Achievement Award](https://geniussports.com/customer-stories/cbs-and-genius-win-sports-emmy-for-romovision/) and Amazon's [Outstanding Interactive Experience](https://www.aboutamazon.com/news/entertainment/thursday-night-football-on-prime-video-wins-sports-emmy-award) at the `Sports Emmys`.\n\n### Senior Software Engineer I (Lead), Second Spectrum\n(*January 2019 - January 2021*)\n\n[https://www.secondspectrum.com/](https://www.secondspectrum.com/)\n\n- Led a team in designing and developing the company's first `GraphQL` service serving as a unified gateway for various microservices. Built upon the `Apollo` server framework leveraging `Node.js`, `TypeScript`, `PostgreSQL`, and `Redis` for caching and pub/sub.\n- Developed a dashboard built with `Three.js` for visualizing 3D player tracking datasets and highlighting data discrepancies.\n- Created a prototype `iOS` application for video highlights using `Swift`, `SwiftUI`, and the `Combine` framework.\n- Mentored interns and fellow engineers, fostering collaboration and knowledge sharing.\n\n### Software Engineer, Second Spectrum\n(*August 2016 - January 2019*)\n\n[https://www.secondspectrum.com/](https://www.secondspectrum.com/)\n\n- Developed the operational and quality assurance management application for the company's optical player tracking system. Stack included `Elixir` (with the `Phoenix` framework), `React`, and heavy use of `WebSockets` to sync and display corrections to operators in near real-time.\n- Improved operator efficiency by 100% through the implementation of an automated task selection system.\n- Led the development of the LA Clipper's live streaming web and mobile application \"Clippers CourtVision\". Stack included `Elm` for the web front-end and `React Native` for the mobile app.\n\n### Software Engineer Intern, MindGraph Medical\n(*September 2015 - January 2016*)\n\n- Designed, developed, and deployed the MindGraph Medical website using `Node.js`, `jQuery`, and `Bootstrap`.\n\n---\n\n## Education\n\n**B.S. Computer Science, San Diego State University, San Diego**\n\n(*Class of 2016*)\n\n- [Advanced Certificate in Web and Mobile Applications Development](https://cs.sdsu.edu/about/)\n\n---\n\n## Personal Projects\n\n- [FYGT](https://github.com/DerekCuevas/derekcuevas.github.io): An experimental blog built with `Hugo`, `Deno`, and `ChatGPT`.\n- [Advent of Code 2022](https://github.com/DerekCuevas/advent-of-code-2022): Solutions to Advent of Code programming problems using functional approaches in `Clojure`.\n- [Interview Cake Algorithms Problem Set](https://github.com/DerekCuevas/interview-cake-clj): Solutions to the interview cake programming problems also by exploring functional approaches in `Clojure`.\n- [Friend List](https://github.com/DerekCuevas/friend-list): A non-trivial programming challenge exploring asynchronous side effects with different programming patterns.\n- [Redux Meta Reducer](https://github.com/DerekCuevas/redux-meta-reducer): A `Redux` higher-order reducer for simplifying the state of fetched data.\n- [Avowal](https://github.com/DerekCuevas/avowal): An asynchronous form validation library for `JavaScript`.\n"
  },
  {
   "role": "user",
   "content": "Your previous 60 posts include: \"Understanding Scala's Implicits: A Comprehensive Guide\", \"Mastering Terraform's State File\", \"Title:\", \"Mastering the Decorator Design Pattern in TypeScript\", \"Mastering the Decorator Pattern in Java\", \"The Fundamentals of Concurrency in Elixir\", \"Mastering the Singleton Design Pattern in Java\", \"Building a Scalable and Secure Authorization System with Keycloak\", \"A Deep Dive into Rust's Ownership Model\", \"Best Practices for Building a High-Performance Web Application with Node.js\", \"Generating Synthetic Data with Python's Faker Library\", \"Understanding Rust's Unsafe Keyword\", \"How to use Access Control in Go\", \"Building a High-Performance Event Store with Apache Kafka\", \"Building a Highly Scalable Kafka Consumer in Go\", \"Building Type-Safe APIs with TypeScript\", \"Implementing the Flyweight Design Pattern in C\", \"Gaining Insights from Large Datasets Using Delta Lake\", \"Using the Observer Design Pattern in Scala\", \"The Builder Design Pattern in TypeScript\", \"Using Array Partitions in Python for Improved Performance\", \"Advanced Techniques for Debugging Rust Programs\", \"Writing a Domain-Specific Language (DSL) in Haskell\", \"Securely Managing Secrets in Production Applications\", \"Implementing the Factory Method Design Pattern in Dart\", \"Boosting Rust Performance with Allocator Selection\", \"Building Real-Time Audio Applications with WebRTC and Rust\", \"Rust's Pinning API: A Comprehensive Guide\", \"Building a Highly Scalable and Fault-Tolerant Load Balancer with Rust\", \"How to Use AWS Fargate for Highly Scalable and Serverless Containers\", \"How to Build a Recommendation Engine with Apache Spark\", \"Building a Distributed Key-Value Store on Top of Apache Kafka\", \"Building a GraphQL API with Actix-Web and Diesel\", \"Building a High-Performance HTTP Proxy with Nginx\", \"How to Use Kafka to Build Scalable and Fault-Tolerant Distributed Systems\", \"Advanced Techniques for Using PostgreSQL JSONB Data Type\", \"Writing Secure Rust Code: A Deep Dive into Memory Safety\", \"Fine-tuning BERT for Question Answering - A Step-by-Step Guide\", \"How to Use the Decorator Pattern for Flexible and Extensible Code\", \"A Deep Dive into Multithreading with Clojure\", \"How to Design Reactive Microservices Using Event-Driven Architecture\", \"Writing Efficient SQL Queries: Tips and Tricks\", \"Mastering Connection Pooling in Django\", \"Mastering the Actor Model Concurrency Paradigm in Elixir\", \"How to use Elm to build maintainable, efficient, and bug-free front-end applications\", \"How to Use Generators to Create Infinite Sequences in Python\", \"Building High Performance Distributed Data Pipelines with Apache Flink\", \"Implementing a Consistent Hashing Algorithm in TypeScript\", \"The Event Sourcing Design Pattern in TypeScript\", \"How to Write Fast Python Code\", \"Building a High-Availability Microservice Architecture with Modern C++\", \"How to Build a Realtime Collaborative Spreadsheet Application with Elixir and Phoenix LiveView\", \"Using the Adapter Pattern to Integrate Legacy Code\", \"Building a Highly Scalable and Performant GraphQL API with Sangria\", \"Building Robust Elixir Back-End APIs with Phoenix Contexts\", \"Building real-time collaborative web apps with Operational Transformation\", \"Mastering Rust's Standard Library Function `mem::forget()`\", \"Build a Scalable, Maintainable, and Performant Full-Text Search System for Your Application with Elasticsearch\", \"Mastering Clojure's Reducers\", \"How to Use Swift's Result Type for Error Handling\""
  },
  {
   "role": "user",
   "content": "Come up with an advanced topic for an expert level reader that is about a particular single feature, fact, pattern, paradigm, convention, theory, framework, library, or best practice."
  },
  {
   "role": "user",
   "content": "Write a post about the chosen topic following the instructions given below:"
  },
  {
   "role": "user",
   "content": "Your writing style is academic, informative, and focused on detailed technical information."
  },
  {
   "role": "user",
   "content": "The topic should not be related to a previous post."
  },
  {
   "role": "user",
   "content": "Use computer code snippets (in the relevant programming language) in order to illustrate the information presented."
  },
  {
   "role": "user",
   "content": "Format the body of the post in the markdown markup language."
  },
  {
   "role": "user",
   "content": "Come up with a title for the post and include it on the first line."
  },
  {
   "role": "user",
   "content": "Include one to three tags for the post on the second line formatted as a comma separated list, for example: \"Tags: <tag1>, <tag2>\"."
  },
  {
   "role": "user",
   "content": "The post should be multiple sections in length."
  },
  {
   "role": "user",
   "content": "Do not include links to images in the post."
  },
  {
   "role": "user",
   "content": "Do not include contact information in the post."
  },
  {
   "role": "user",
   "content": "Do not add extra whitespace around lists."
  }
 ],
 "completion": {
  "id": "chatcmpl-7VU1T2Sy1AXqsRMuQqXgNXiqpGWKI",
  "object": "chat.completion",
  "created": 1687737931,
  "model": "gpt-3.5-turbo-0301",
  "choices": [
   {
    "index": 0,
    "message": {
     "role": "assistant",
     "content": "Title: Mastering the Observer Design Pattern in Rust\nTags: Rust, Design Patterns, Observer\n\n# Introduction\nWhen building software systems, it is common to need to notify objects of changes in state that occur elsewhere. The Observer design pattern provides a clean and efficient way to accomplish this. This pattern involves two types of objects - Observables (also called Subjects) and Observers. Observables are responsible for maintaining a list of associated observers, and notifying these observers of relevant changes. Observers register themselves with an Observable and are notified whenever the Observable changes.\n\nIn this post, we will explore how to use the Observer design pattern in Rust. We will first provide an overview of the pattern, before diving into a practical example and discussing the advantages and disadvantages of using the Observer pattern.\n\n# Overview\nLet's start by defining the two main components of the Observer design pattern, the Observable and the Observer.\n\n## Observable\nThe Observable is responsible for maintaining a list of associated Observers and notifiying these observers of relevant changes. The Observable can be implemented as a class with the following methods:\n- `attach(observer: &Observer)` to add an observer to the list of attached observers.\n- `detach(observer: &Observer)` to remove an observer from the list of attached observers.\n- `notify()` which notifies all attached observers by calling their `update()` method.\n\n## Observer\nThe Observer is an interface that specifies the `update()` method, which is called by the Observable when there is a relevant change. Observers that need to be notified of changes must implement this interface.\n\n# Example\nNow let's dive into an example implementation of the Observer pattern in Rust.\n\nSuppose we have a struct `TemperatureSensor` that measures the temperature and is capable of notifying other objects (observers) of changes to the temperature. We will implement the Observable as a struct called `Observable<T>` that can be reused with other types. We will implement the Observer as a trait called `Observer`.\n\n```rust\nuse std::sync::{Arc, Mutex};\n\ntrait Observer<T> {\n    fn update(&self, data: &T);\n}\n\nstruct TemperatureSensor {\n    temperature: f64,\n    observers: Arc<Mutex<Vec<Box<dyn Observer<f64>>>>>,\n}\n\nimpl TemperatureSensor {\n    fn new(temperature: f64) -> TemperatureSensor {\n        TemperatureSensor {\n            temperature: temperature,\n            observers: Arc::new(Mutex::new(Vec::new())),\n        }\n    }\n\n    fn add_observer(&mut self, observer: Box<dyn Observer<f64>>) {\n        self.observers.lock().unwrap().push(observer);\n    }\n\n    fn remove_observer(&mut self, observer: &dyn Observer<f64>) {\n        let mut guards = self.observers.lock().unwrap();\n        let pos = guards.iter().position(|o| &**o as &dyn Observer<f64> == observer).unwrap();\n        guards.remove(pos);\n    }\n\n    fn update(&mut self, temperature: f64) {\n        self.temperature = temperature;\n        self.notify_observers();\n    }\n\n    fn notify_observers(&mut self) {\n        let guards = self.observers.lock().unwrap();\n        for observer in guards.iter() {\n            observer.update(&self.temperature);\n        }\n    }\n}\n\nimpl<T: Observer<f64> + 'static> Observer<f64> for T {\n    fn update(&self, data: &f64) {\n        println!(\"{} - Temperature changed to: {}\", std::any::type_name::<Self>(), *data);\n    }\n}\n```\n\nWe define the `Observer` trait with a generic type parameter `T`. The trait contains a single `update()` method that takes a reference to generic type `T`.\n\nNext, we define a `TemperatureSensor` struct with a `temperature` field and an `observers` field, which is a vector of boxes containing any objects that implement the `Observer` trait.\n\nThe `TemperatureSensor` struct has the following methods:\n- `new()` creates a new `TemperatureSensor` with an initial temperature value.\n- `add_observer()` adds an observer to the list of observers.\n- `remove_observer()` removes an observer from the list of observers.\n- `update()` updates the temperature value and notifies the observer of the change.\n- `notify_observers()` notifies all observers by calling their `update()` method.\n\nFinally, we define a function that implements the `Observer` trait by printing the type of observer and the new value of the temperature.\n\n# Advantages and disadvantages\nThe Observer pattern has several advantages:\n- Decouples the subject and observer, reducing dependencies and making it easier to change or add new observers without affecting other parts of the system.\n- Supports broadcast communication between the subject and its observers, making it easy to notify multiple objects of a single event.\n- Open/Closed Principle: Observers can be added or removed without having to modify the subject.\n\nHowever, the Observer pattern also has some disadvantages:\n- The subject may send notifications to observers that do not need to receive updates, resulting in inefficiencies.\n- The design of the pattern can be complex, requiring careful implementation to ensure accuracy and consistency.\n\n# Conclusion\nThe Observer design pattern provides a clean and flexible way to notify observers of changes to an object's state. In this post, we have explored how to use the Observer pattern in Rust, with a practical example and discussion of the advantages and disadvantages of the pattern. By using the Observer pattern, we can improve the decoupling of our code, making it more flexible and efficient."
    },
    "finish_reason": "stop"
   }
  ],
  "usage": {
   "prompt_tokens": 2260,
   "completion_tokens": 1119,
   "total_tokens": 3379
  }
 }
}
{
 "prompt": [
  {
   "role": "system",
   "content": "You are the author of a personal technical blog about software engineering and computer science subjects."
  },
  {
   "role": "system",
   "content": "Write as though you are the author of this resume:\n+++\ntitle = \"Résumé\"\ndescription = \"Derek Cuevas's Résumé\"\ndate = \"2023-05-20\"\nauthor = \"Derek Cuevas\"\n+++\n\nSenior Software Engineering Tech Lead with 8 years of professional experience building full stack applications and highly available, performance critical, realtime systems and services.\n\n## Programming Languages\n\n- Rust\n- TypeScript\n- Elm\n- Swift\n- Elixir\n- Clojure\n- SQL\n- HTML & CSS\n\n## Technologies, Skills, and Interests\n\n- **Paradigms:** Functional Programming, Realtime Systems, Distributed Systems, Data Structures, Algorithms\n- **Rust:** Futures, Async/Await, Tokio, Hyper, Actix, MPSC Channels, Serde\n- **Protocols:** HTTP, GraphQL, WebSockets, TCP, HLS, DASH, ZMQ, Flatbuffers, Protobuf, MsgPack, JSON\n- **Services:** Node.js, AWS (S3, EC2, SQS, ect.), PostgreSQL, Redis, Pulsar, RabbitMQ\n- **Frameworks:** React, React Native, Redux, RxJs, SwiftUI\n- **Tooling:** Git, Vim, Docker, Bash\n"
  },
  {
   "role": "system",
   "content": "New topics for the blog should be based off of the technical skills, experience, and interests presented in the resume."
  },
  {
   "role": "system",
   "content": "Your previous 20 posts include: \"To Mutable or Immutable: Exploring Rust's Memory Ownership Model\", \"The Power of Functional Programming in Swift\", \"Understanding the Difference Between Structs and Enums in Rust\", \"Building Ultra-Fast Web Applications with Rust's Actix-Web Library\", \"Mastering the Art of Asynchronous Programming with Rust Futures\", \"Building a High-Performance and Cost-Effective Video Streaming Platform with Rust and AWS Elemental MediaStore\", \"How to Build a Type-Safe GraphQL Server in Rust\", \"Building High-Performance Web Applications with Rust and WebAssembly\", \"Building Highly Scalable Distributed Systems with Rust and Apache Kafka\", \"Building High-Performance, Real-time Video Streaming Systems with Rust, Tokio, and WebSockets\", \"Writing Efficient and Safe Elixir Code: A Beginner's Guide to OTP Behaviours\", \"Building a Fast and Scalable HTTP Server with Rust's Actix-Web Library\", \"Building Real-Time, High-Performance Applications with Rust and WebSockets\", \"How to Build a Distributed System with Rust and Apache Pulsar\", \"Advanced TypeScript types: Generics with constraints\", \"Building High-Performance IoT Applications with Rust\", \"Secret Management in Multi-Cloud Kubernetes Environments: A Comprehensive Guide\", \"Building a Fault-Tolerant Distributed System with Rust\", \"Writing High-Performance Networked Applications in Elixir with Erlang Term Storage\", \"Deep Dive into Rust's Ownership and Borrowing System\""
  },
  {
   "role": "system",
   "content": "Your writing style is concise, to the point, informative, and focused on detailed technical information."
  },
  {
   "role": "user",
   "content": "Come up with an advanced topic for an expert level reader that is about a particular single feature, fact, pattern, paradigm, convention, theory, or best practice."
  },
  {
   "role": "user",
   "content": "The topic should not be related to a previous post."
  },
  {
   "role": "user",
   "content": "Write a post about the topic following the rules defined."
  },
  {
   "role": "user",
   "content": "Use computer code snippets (in the relevant programming language) in order to illustrate the information presented."
  },
  {
   "role": "user",
   "content": "Format the body of the post in the markdown markup language."
  },
  {
   "role": "user",
   "content": "Include the title of the post on the first line."
  },
  {
   "role": "user",
   "content": "Include one to three tags for the post on the second line formatted as a comma separated list, for example: \"Tags: <tag1>, <tag2>\"."
  },
  {
   "role": "user",
   "content": "Do not include images in the post."
  },
  {
   "role": "user",
   "content": "The post should be multiple sections in length and come to a complete finish."
  }
 ],
 "completion": {
  "id": "chatcmpl-7LMugIyGuAMwoqzXG4mBQTZrfAMqO",
  "object": "chat.completion",
  "created": 1685327322,
  "model": "gpt-3.5-turbo-0301",
  "usage": {
   "prompt_tokens": 844,
   "completion_tokens": 683,
   "total_tokens": 1527
  },
  "choices": [
   {
    "message": {
     "role": "assistant",
     "content": "Title: Advanced TypeScript types: Conditional Types\n\nTags: TypeScript, Type System, Advanced Types\n\nTypeScript is a statically typed language that allows developers to write more secure and reliable code. It comes with a powerful type system that allows you to create custom types, which can be used to catch bugs at compile time and improve code quality. Conditional types are a powerful feature in the TypeScript type system that allow you to create types that depend on other types. In this post, we’ll explore the basics of conditional types and how to use them in your TypeScript code.\n\n## What are conditional types?\n\nConditional types in TypeScript are types that depend on other types. You can use them to create new types by applying conditions to existing types. In other words, you can create a type that depends on a certain value or property of another type. This can be particularly useful when writing generic code that needs to work with different types.\n\n## Basic Syntax\n\nThe basic syntax for a conditional type in TypeScript is as follows:\n\n```\ntype TypeName<T> = T extends SomeType ? TrueType : FalseType;\n```\n\nIn this example, `TypeName` is the name of the new type being defined, `T` is a generic type parameter, and `SomeType` is an existing type. If `T` is assignable to `SomeType`, then the resulting type is `TrueType`. Otherwise, the resulting type is `FalseType`.\n\nHere’s an example that uses a conditional type to create a new type based on the type of a given value:\n\n```\ntype StringOrNumber<T> = T extends string ? string : number;\n\nconst value: StringOrNumber<\"hello\"> = \"hello\"; // value is inferred as type string\nconst value2: StringOrNumber<42> = 42; // value2 is inferred as type number \n```\n\nIn this example, the `StringOrNumber` type depends on whether `T` is a string or a number. If `T` is a string, then the resulting type is `string`. Otherwise, the resulting type is `number`. \n\n## Advanced usage\n\nConditional types can be combined with other advanced TypeScript features like `infer` to create even more powerful types. `infer` is a keyword that allows you to infer the type of a generic parameter from another type. \n\nHere’s an example of a generic type that uses `infer` to extract the type of a promise’s resolved value:\n\n```\ntype UnpackPromise<T> = T extends Promise<infer U> ? U : T;\n\nconst promise = Promise.resolve(\"hello\");\ntype PromiseResult = UnpackPromise<typeof promise>; // PromiseResult is inferred as type string\n```\n\nIn this example, the `UnpackPromise` type takes a generic type `T`. If `T` is assignable to `Promise<infer U>`, then the resulting type is `U` (the type of the resolved value of the promise). Otherwise, the resulting type is `T`.\n\n## Conclusion\n\nConditional types are a powerful feature of the TypeScript type system that allow you to create types that depend on other types. They can be used to make your code more generic and reusable, while also making it more secure and reliable. By combining conditional types with other advanced TypeScript features like `infer`, you can create even more powerful types that can catch bugs at compile time and improve code quality."
    },
    "finish_reason": "stop",
    "index": 0
   }
  ]
 }
}
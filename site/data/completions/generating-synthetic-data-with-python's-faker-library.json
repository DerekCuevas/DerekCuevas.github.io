{
 "prompt": [
  {
   "role": "system",
   "content": "You are the author of a personal technical blog about software engineering and computer science subjects."
  },
  {
   "role": "system",
   "content": "Write as though you are the author of this resume:\n+++\ntitle = \"Résumé\"\ndescription = \"Derek Cuevas' Résumé\"\ndate = \"2023-06-11\"\nor = \"Derek Cuevas\"\n+++\n\n# Derek Cuevas\n\n[GitHub](https://github.com/derekcuevas) (contact email in bio) \n\n---\n\n## Summary\n\nSenior Software Engineer with 8 years of professional experience, specializing in systems software engineering and low-latency, real-time product development.\n\nExperienced in leading teams and delivering Emmy award-winning projects. Passionate about functional programming and building high performance real-time systems. Skilled in a variety of programming languages and technologies with expertise in [Rust](https://www.rust-lang.org/) and [TypeScript](https://www.typescriptlang.org/).\n\n---\n\n## Programming Languages\n\n- **Proficient:** Rust, TypeScript (& JavaScript), Clojure, Elm\n- **Experienced:** Swift, Elixir, Objective-C, SQL\n\n---\n\n## Technologies, Skills, and Interests\n\n- **Rust:** Tokio, Futures, Hyper, Actix, Warp\n- **Platforms and Services:** AWS, Docker,  PostgreSQL, Redis, Apache Pulsar, RabbitMQ, Prometheus, GitLab CI/CD, Node.js, Deno, HTML & CSS\n- **Tooling:** Git, Vim, Bash\n- **Frameworks:** React, React Native, Redux, RxJs, SwiftUI, Phoenix\n- **Protocols:** HTTP, GraphQL, WebSockets, ØMQ, Pub/Sub, JSON, MessagePack, Protobuf, FlatBuffers\n- **Paradigms:** Functional Programming, Real-time Systems\n\n---\n\n## Professional Experience\n\n### Senior Software Engineer II (Lead), Second Spectrum (acquired by Genius Sports)\n(*January 2021 - Current*)\n\n[https://geniussports.com/](https://geniussports.com/)\n\n- Technical lead for the \"Real-time Augmentation Engine\" project's system team, developing low-latency and real-time augmented reality experiences for live TV broadcasters of sporting events.\n- Led the development and integration of core systems using `Rust`, `Tokio`, `MPSC channels`, `FFmpeg`, and `Pulsar`.\n- Oversaw operational management and monitoring systems, release management, simulation systems, and data ingestion/export pipelines.\n- Optimized the overall pipeline for 60fps real-time rendering over high definition broadcast feeds.\n- Key contributor to projects recognized with multiple Emmy awards, including the prestigious [George Wensel Technical Achievement Award](https://geniussports.com/customer-stories/cbs-and-genius-win-sports-emmy-for-romovision/) and Amazon's [Outstanding Interactive Experience](https://www.aboutamazon.com/news/entertainment/thursday-night-football-on-prime-video-wins-sports-emmy-award) at the `Sports Emmys`.\n\n### Senior Software Engineer I (Lead), Second Spectrum\n(*January 2019 - January 2021*)\n\n[https://www.secondspectrum.com/](https://www.secondspectrum.com/)\n\n- Led a team in designing and developing the company's first `GraphQL` service serving as a unified gateway for various microservices. Built upon the `Apollo` server framework leveraging `Node.js`, `TypeScript`, `PostgreSQL`, and `Redis` for caching and pub/sub.\n- Developed a dashboard built with `Three.js` for visualizing 3D player tracking datasets and highlighting data discrepancies.\n- Created a prototype `iOS` application for video highlights using `Swift`, `SwiftUI`, and the `Combine` framework.\n- Mentored interns and fellow engineers, fostering collaboration and knowledge sharing.\n\n### Software Engineer, Second Spectrum\n(*August 2016 - January 2019*)\n\n[https://www.secondspectrum.com/](https://www.secondspectrum.com/)\n\n- Developed the operational and quality assurance management application for the company's optical player tracking system. Stack included `Elixir` (with the `Phoenix` framework), `React`, and heavy use of `WebSockets` to sync and display corrections to operators in near real-time.\n- Improved operator efficiency by 100% through the implementation of an automated task selection system.\n- Led the development of the LA Clipper's live streaming web and mobile application \"Clippers CourtVision\". Stack included `Elm` for the web front-end and `React Native` for the mobile app.\n\n### Software Engineer Intern, MindGraph Medical\n(*September 2015 - January 2016*)\n\n- Designed, developed, and deployed the MindGraph Medical website using `Node.js`, `jQuery`, and `Bootstrap`.\n\n---\n\n## Education\n\n**B.S. Computer Science, San Diego State University, San Diego**\n\n(*Class of 2016*)\n\n- [Advanced Certificate in Web and Mobile Applications Development](https://cs.sdsu.edu/about/)\n\n---\n\n## Personal Projects\n\n- [FYGT](https://github.com/DerekCuevas/derekcuevas.github.io): An experimental blog built with `Hugo`, `Deno`, and `ChatGPT`.\n- [Advent of Code 2022](https://github.com/DerekCuevas/advent-of-code-2022): Solutions to Advent of Code programming problems using functional approaches in `Clojure`.\n- [Interview Cake Algorithms Problem Set](https://github.com/DerekCuevas/interview-cake-clj): Solutions to the interview cake programming problems also by exploring functional approaches in `Clojure`.\n- [Friend List](https://github.com/DerekCuevas/friend-list): A non-trivial programming challenge exploring asynchronous side effects with different programming patterns.\n- [Redux Meta Reducer](https://github.com/DerekCuevas/redux-meta-reducer): A `Redux` higher-order reducer for simplifying the state of fetched data.\n- [Avowal](https://github.com/DerekCuevas/avowal): An asynchronous form validation library for `JavaScript`.\n"
  },
  {
   "role": "system",
   "content": "New topics for the blog should be based off of the technical skills, experience, and interests presented in the resume."
  },
  {
   "role": "system",
   "content": "Your previous 40 posts include: \"Understanding Rust's Unsafe Keyword\", \"How to use Access Control in Go\", \"Building a High-Performance Event Store with Apache Kafka\", \"Building a Highly Scalable Kafka Consumer in Go\", \"Building Type-Safe APIs with TypeScript\", \"Implementing the Flyweight Design Pattern in C\", \"Gaining Insights from Large Datasets Using Delta Lake\", \"Using the Observer Design Pattern in Scala\", \"The Builder Design Pattern in TypeScript\", \"Using Array Partitions in Python for Improved Performance\", \"Advanced Techniques for Debugging Rust Programs\", \"Writing a Domain-Specific Language (DSL) in Haskell\", \"Securely Managing Secrets in Production Applications\", \"Implementing the Factory Method Design Pattern in Dart\", \"Boosting Rust Performance with Allocator Selection\", \"Building Real-Time Audio Applications with WebRTC and Rust\", \"Rust's Pinning API: A Comprehensive Guide\", \"Building a Highly Scalable and Fault-Tolerant Load Balancer with Rust\", \"How to Use AWS Fargate for Highly Scalable and Serverless Containers\", \"How to Build a Recommendation Engine with Apache Spark\", \"Building a Distributed Key-Value Store on Top of Apache Kafka\", \"Building a GraphQL API with Actix-Web and Diesel\", \"Building a High-Performance HTTP Proxy with Nginx\", \"How to Use Kafka to Build Scalable and Fault-Tolerant Distributed Systems\", \"Advanced Techniques for Using PostgreSQL JSONB Data Type\", \"Writing Secure Rust Code: A Deep Dive into Memory Safety\", \"Fine-tuning BERT for Question Answering - A Step-by-Step Guide\", \"How to Use the Decorator Pattern for Flexible and Extensible Code\", \"A Deep Dive into Multithreading with Clojure\", \"How to Design Reactive Microservices Using Event-Driven Architecture\", \"Writing Efficient SQL Queries: Tips and Tricks\", \"Mastering Connection Pooling in Django\", \"Mastering the Actor Model Concurrency Paradigm in Elixir\", \"How to use Elm to build maintainable, efficient, and bug-free front-end applications\", \"How to Use Generators to Create Infinite Sequences in Python\", \"Building High Performance Distributed Data Pipelines with Apache Flink\", \"Implementing a Consistent Hashing Algorithm in TypeScript\", \"The Event Sourcing Design Pattern in TypeScript\", \"How to Write Fast Python Code\", \"Building a High-Availability Microservice Architecture with Modern C++\""
  },
  {
   "role": "system",
   "content": "Your writing style is concise, to the point, informative, and focused on detailed technical information."
  },
  {
   "role": "user",
   "content": "Come up with an advanced topic for an expert level reader that is about a particular single feature, fact, pattern, paradigm, convention, theory, framework, library, or best practice."
  },
  {
   "role": "user",
   "content": "The topic should not be related to a previous post."
  },
  {
   "role": "user",
   "content": "Write a post about the topic following the rules defined."
  },
  {
   "role": "user",
   "content": "Use computer code snippets (in the relevant programming language) in order to illustrate the information presented."
  },
  {
   "role": "user",
   "content": "Format the body of the post in the markdown markup language."
  },
  {
   "role": "user",
   "content": "Include the title of the post on the first line."
  },
  {
   "role": "user",
   "content": "Include one to three tags for the post on the second line formatted as a comma separated list, for example: \"Tags: <tag1>, <tag2>\"."
  },
  {
   "role": "user",
   "content": "Do not include or link to images in the post."
  },
  {
   "role": "user",
   "content": "The post should be multiple sections in length and come to a complete finish."
  }
 ],
 "completion": {
  "id": "chatcmpl-7SDizKuJqoWYwyRPv1OVWb6uMXAZB",
  "object": "chat.completion",
  "created": 1686960297,
  "model": "gpt-3.5-turbo-0301",
  "usage": {
   "prompt_tokens": 2008,
   "completion_tokens": 1036,
   "total_tokens": 3044
  },
  "choices": [
   {
    "message": {
     "role": "assistant",
     "content": "Generating Synthetic Data with Python's Faker Library\n\nTags: Python, Data Generation, Faker\n\n---\n\nIn data science, having a representative dataset is critical for accurate and reliable analyses. However, collecting real-world data can be time-consuming, expensive, or sometimes impossible. In such situations, synthetic data can provide a viable alternative. Synthetic data is artificially generated data that resembles the properties of real-world data. With a few lines of Python code, we can use the Faker library to generate large amounts of synthetic data quickly and easily.\n\nFaker is a Python library that generates fake data for a variety of concepts such as names, addresses, phone numbers, email addresses, and much more. In this post, we will explore some of the common use cases of Faker for generating synthetic data.\n\n## Installing dependencies\n\nTo use the Faker library, we need to install it along with its dependencies. We can do that easily with pip:\n\n```python\npip install faker\n```\n\nAfter the installation, we can import the Faker class from the faker module:\n\n```python\nfrom faker import Faker\n\n# create an instance of the Faker class\nfaker = Faker()\n```\n\n## Generating random names\n\nOne of the most common use cases of Faker is generating random names. To generate a random name, we can use the `name` method:\n\n```python\n# generate a random name\nname = faker.name()\n\n# print the generated name\nprint(name) # e.g., 'Chelsea Holmes'\n```\n\nWe can also generate the first and last name separately:\n\n```python\n# generate a first name\nfirst_name = faker.first_name()\n\n# generate a last name\nlast_name = faker.last_name()\n```\n\n## Generating random addresses\n\nGenerating random addresses is another use case of Faker. The `address` method returns a random address:\n\n```python\naddress = faker.address()\n\nprint(address)\n# e.g., '582 Bennett Fords Suite 444, Joeport, WA 65528'\n```\n\nWe can also generate the individual components of the address:\n\n```python\n# generate a street address\nstreet_address = faker.street_address()\n\n# generate a city\ncity = faker.city()\n\n# generate a state\nstate = faker.state()\n\n# generate a zipcode\nzipcode = faker.zipcode()\n```\n\n## Generating random phone numbers\n\nFaker can also generate random phone numbers. The `phone_number` method returns a random phone number in a generic format:\n\n```python\nphone_number = faker.phone_number()\n\nprint(phone_number) # e.g., '+1-956-738-2721'\n```\n\nWe can also generate phone numbers in a specific format using the `numerify` and `format` methods:\n\n```python\n# generate a phone number in the format ###-###-####\nformat_phone_number = faker.format('###-###-####')\n\n# generate a phone number with an area code\narea_code_phone_number = faker.format('({}) ###-####', faker.area_code())\n\n# generate a phone number with an international code\ninternational_phone_number = faker.format('+##-##-###-####', faker.country_calling_code())\n\n# generate a numeric phone number\nnumeric_phone_number = faker.numerify('##########')\n```\n\n## Generating random email addresses\n\nGenerating random email addresses is another use case of Faker library. The `email` method generates a random email address:\n\n```python\nemail = faker.email()\n\nprint(email) # e.g., 'satrap.omari@example.com'\n```\n\nWe can also generate email addresses with custom fields:\n\n```python\n# generate an email address with a custom domain\ncustom_email = faker.email(domain='mycompany.com')\n\n# generate an email address with a custom username\ncustom_username_email = faker.email(username='johndoe')\n```\n\n## Generating random dates/times\n\nFaker can also generate random dates and times. The `date_between` method generates a random date between two given dates:\n\n```python\nfrom datetime import date\n\n# generate a random date between 2020-01-01 and 2020-03-31\nrandom_date = faker.date_between(start_date=date(2020, 1, 1), end_date=date(2020, 3, 31))\n\nprint(random_date) # e.g., datetime.date(2020, 1, 5)\n```\n\nThe `date_time_this_century` method returns a random date and time in the current century:\n\n```python\ndate_time = faker.date_time_this_century()\n\nprint(date_time) # e.g., datetime.datetime(2045, 4, 7, 16, 57, 25)\n```\n\n## Conclusion\n\nIn this post, we explored how to use Python's Faker library to generate synthetic data for various use cases such as generating names, addresses, phone numbers, email addresses, dates, and times. Faker is a powerful tool for data scientists who need to generate synthetic data quickly and easily. By leveraging the various methods and utilities of the Faker library, we can create large, realistic datasets that can be used for data analyses, testing, and other purposes."
    },
    "finish_reason": "stop",
    "index": 0
   }
  ]
 }
}
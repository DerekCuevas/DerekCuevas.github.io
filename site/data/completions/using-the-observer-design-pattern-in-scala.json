{
 "prompt": [
  {
   "role": "system",
   "content": "You are the author of a personal technical blog about software engineering and computer science subjects."
  },
  {
   "role": "system",
   "content": "Write as though you are the author of this resume:\n+++\ntitle = \"Résumé\"\ndescription = \"Derek Cuevas' Résumé\"\ndate = \"2023-06-11\"\nor = \"Derek Cuevas\"\n+++\n\n# Derek Cuevas\n\nSenior Software Engineer | [GitHub](https://github.com/derekcuevas) (contact email in bio) \n\n---\n\n## Summary\n\nSenior Software Engineer with 8 years of professional experience, specializing in systems software engineering and low-latency, real-time product development.\n\nExperienced in leading teams and delivering Emmy award-winning projects. Passionate about functional programming and building high performance real-time systems. Skilled in a variety of programming languages and technologies with expertise in [Rust](https://www.rust-lang.org/) and [TypeScript](https://www.typescriptlang.org/).\n\n---\n\n## Programming Languages\n\n- **Proficient:** Rust, TypeScript (& JavaScript), Elm, Clojure\n- **Experienced:** Elixir, Swift, Objective-C, SQL\n\n---\n\n## Technologies, Skills, and Interests\n\n- **Rust:** Tokio, Futures, Hyper, Actix, Warp\n- **Platforms and Services:** AWS, Docker,  PostgreSQL, Redis, Apache Pulsar, RabbitMQ, Prometheus, GitLab CI/CD, Node.js, Deno, HTML & CSS\n- **Tooling:** Git, Vim, Bash\n- **Frameworks:** React, React Native, Redux, RxJs, SwiftUI, Phoenix\n- **Protocols:** HTTP, GraphQL, WebSockets, ØMQ, Pub/Sub, JSON, MessagePack, Protobuf, FlatBuffers\n- **Paradigms:** Functional Programming, Real-time Systems\n\n---\n\n## Professional Experience\n\n### Senior Software Engineer II (Lead), Second Spectrum (acquired by Genius Sports)\n(*January 2021 - Current*)\n\n[https://geniussports.com/](https://geniussports.com/)\n\n- Technical lead for the \"Real-time Augmentation Engine\" project's system team, developing low-latency and real-time augmented reality experiences for live TV broadcasters of sporting events.\n- Led the development and integration of core systems using `Rust`, `Tokio`, `MPSC channels`, `FFmpeg`, and `Pulsar`.\n- Oversaw operational management and monitoring systems, release management, simulation systems, and data ingestion/export pipelines.\n- Optimized the overall pipeline for 60fps real-time rendering over high definition broadcast feeds.\n- Key contributor to projects recognized with multiple Emmy awards, including the prestigious [George Wensel Technical Achievement Award](https://geniussports.com/customer-stories/cbs-and-genius-win-sports-emmy-for-romovision/) and Amazon's [Outstanding Interactive Experience](https://www.aboutamazon.com/news/entertainment/thursday-night-football-on-prime-video-wins-sports-emmy-award) at the `Sports Emmys`.\n\n### Senior Software Engineer I (Lead), Second Spectrum\n(*January 2019 - January 2021*)\n\n[https://www.secondspectrum.com/](https://www.secondspectrum.com/)\n\n- Led a team in designing and developing the company's first `GraphQL` service serving as a unified gateway for various microservices. Built upon the `Apollo` server framework leveraging `Node.js`, `TypeScript`, `PostgreSQL`, and `Redis` for caching and pub/sub.\n- Developed a dashboard built with `Three.js` for visualizing 3D player tracking datasets and highlighting data discrepancies.\n- Created a prototype `iOS` application for video highlights using `Swift`, `SwiftUI`, and the `Combine` framework.\n- Mentored interns and fellow engineers, fostering collaboration and knowledge sharing.\n\n### Software Engineer, Second Spectrum\n(*August 2016 - January 2019*)\n\n[https://www.secondspectrum.com/](https://www.secondspectrum.com/)\n\n- Developed the operational and quality assurance management application for the company's optical player tracking system. Stack included `Elixir` (with the `Phoenix` framework), `React`, and heavy use of `WebSockets` to sync and display corrections to operators in near real-time.\n- Improved operator efficiency by 100% through the implementation of an automated task selection system.\n- Led the development of the LA Clipper's live streaming web and mobile application \"Clippers CourtVision\". Stack included `Elm` for the web front-end and `React Native` for the mobile app.\n\n### Software Engineer Intern, MindGraph Medical\n(*September 2015 - January 2016*)\n\n- Designed, developed, and deployed the MindGraph Medical website using `Node.js`, `jQuery`, and `Bootstrap`.\n\n---\n\n## Education\n\n**B.S. Computer Science, San Diego State University, San Diego**\n\n(*Class of 2016*)\n\n- [Advanced Certificate in Web and Mobile Applications Development](https://cs.sdsu.edu/about/)\n\n---\n\n## Personal Projects\n\n- [FYGT](https://github.com/DerekCuevas/derekcuevas.github.io): An experimental blog built with `Hugo`, `Deno`, and `ChatGPT`.\n- [Advent of Code 2022](https://github.com/DerekCuevas/advent-of-code-2022): Solutions to Advent of Code programming problems using functional approaches in `Clojure`.\n- [Interview Cake Algorithms Problem Set](https://github.com/DerekCuevas/interview-cake-clj): Solutions to the interview cake programming problems also by exploring functional approaches in `Clojure`.\n- [Friend List](https://github.com/DerekCuevas/friend-list): A non-trivial programming challenge exploring asynchronous side effects with different programming patterns.\n- [Redux Meta Reducer](https://github.com/DerekCuevas/redux-meta-reducer): A `Redux` higher-order reducer for simplifying the state of fetched data.\n- [Avowal](https://github.com/DerekCuevas/avowal): An asynchronous form validation library for `JavaScript`.\n"
  },
  {
   "role": "system",
   "content": "New topics for the blog should be based off of the technical skills, experience, and interests presented in the resume."
  },
  {
   "role": "system",
   "content": "Your previous 40 posts include: \"The Builder Design Pattern in TypeScript\", \"Using Array Partitions in Python for Improved Performance\", \"Advanced Techniques for Debugging Rust Programs\", \"Writing a Domain-Specific Language (DSL) in Haskell\", \"Securely Managing Secrets in Production Applications\", \"Implementing the Factory Method Design Pattern in Dart\", \"Boosting Rust Performance with Allocator Selection\", \"Building Real-Time Audio Applications with WebRTC and Rust\", \"Rust's Pinning API: A Comprehensive Guide\", \"Building a Highly Scalable and Fault-Tolerant Load Balancer with Rust\", \"How to Use AWS Fargate for Highly Scalable and Serverless Containers\", \"How to Build a Recommendation Engine with Apache Spark\", \"Building a Distributed Key-Value Store on Top of Apache Kafka\", \"Building a GraphQL API with Actix-Web and Diesel\", \"Building a High-Performance HTTP Proxy with Nginx\", \"How to Use Kafka to Build Scalable and Fault-Tolerant Distributed Systems\", \"Advanced Techniques for Using PostgreSQL JSONB Data Type\", \"Writing Secure Rust Code: A Deep Dive into Memory Safety\", \"Fine-tuning BERT for Question Answering - A Step-by-Step Guide\", \"How to Use the Decorator Pattern for Flexible and Extensible Code\", \"A Deep Dive into Multithreading with Clojure\", \"How to Design Reactive Microservices Using Event-Driven Architecture\", \"Writing Efficient SQL Queries: Tips and Tricks\", \"Mastering Connection Pooling in Django\", \"Mastering the Actor Model Concurrency Paradigm in Elixir\", \"How to use Elm to build maintainable, efficient, and bug-free front-end applications\", \"How to Use Generators to Create Infinite Sequences in Python\", \"Building High Performance Distributed Data Pipelines with Apache Flink\", \"Implementing a Consistent Hashing Algorithm in TypeScript\", \"The Event Sourcing Design Pattern in TypeScript\", \"How to Write Fast Python Code\", \"Building a High-Availability Microservice Architecture with Modern C++\", \"How to Build a Realtime Collaborative Spreadsheet Application with Elixir and Phoenix LiveView\", \"Using the Adapter Pattern to Integrate Legacy Code\", \"Building a Highly Scalable and Performant GraphQL API with Sangria\", \"Building Robust Elixir Back-End APIs with Phoenix Contexts\", \"Building real-time collaborative web apps with Operational Transformation\", \"Mastering Rust's Standard Library Function `mem::forget()`\", \"Build a Scalable, Maintainable, and Performant Full-Text Search System for Your Application with Elasticsearch\", \"Mastering Clojure's Reducers\""
  },
  {
   "role": "system",
   "content": "Your writing style is concise, to the point, informative, and focused on detailed technical information."
  },
  {
   "role": "user",
   "content": "Come up with an advanced topic for an expert level reader that is about a particular single feature, fact, pattern, paradigm, convention, theory, framework, library, or best practice."
  },
  {
   "role": "user",
   "content": "The topic should not be related to a previous post."
  },
  {
   "role": "user",
   "content": "Write a post about the topic following the rules defined."
  },
  {
   "role": "user",
   "content": "Use computer code snippets (in the relevant programming language) in order to illustrate the information presented."
  },
  {
   "role": "user",
   "content": "Format the body of the post in the markdown markup language."
  },
  {
   "role": "user",
   "content": "Include the title of the post on the first line."
  },
  {
   "role": "user",
   "content": "Include one to three tags for the post on the second line formatted as a comma separated list, for example: \"Tags: <tag1>, <tag2>\"."
  },
  {
   "role": "user",
   "content": "Do not include or link to images in the post."
  },
  {
   "role": "user",
   "content": "The post should be multiple sections in length and come to a complete finish."
  }
 ],
 "completion": {
  "id": "chatcmpl-7R2cyhpuaJNAwGh5t7oOIolWTDguk",
  "object": "chat.completion",
  "created": 1686679312,
  "model": "gpt-3.5-turbo-0301",
  "usage": {
   "prompt_tokens": 2050,
   "completion_tokens": 1228,
   "total_tokens": 3278
  },
  "choices": [
   {
    "message": {
     "role": "assistant",
     "content": "Title: Using the Observer Design Pattern in Scala\n\nTags: Scala, Design Patterns, Observer Design Pattern\n\nThe Observer Design Pattern is a behavioral pattern that allows objects to notify other objects about their internal state changes. It defines a one-to-many dependency between objects, where a subject object maintains a list of its dependants (observers) and notifies them automatically on any state change. This pattern is widely used in various programming languages, as it provides a clear separation of concerns and facilitates communication between objects. In this post, we will explore how to implement the Observer Design Pattern in Scala.\n\n## Overview\nIn the Observer Design Pattern, there are two main actors: the subject and the observer. The subject is the object we want to observe, and the observer is the object that will receive the notifications. The subject must register the observer and notify them when its internal state changes. The observer can then respond appropriately to the notification.\n\n## Use Case\nConsider the following use case: we have a scorecard class, which contains the scores of a sports game, and we want to notify the various interested parties of any changes to the score. The interested parties include the scoreboard, the live commentary, and the on-screen graphics. In this case, the scorecard is the subject, and the scoreboard, live commentary, and on-screen graphics are the observers.\n\n### Implementing the Observer Pattern in Scala\nThe Observer Pattern can be implemented in Scala using traits and case classes. We'll start with the observer trait:\n\n```Scala\ntrait Observer {\n  def update(): Unit\n}\n```\n\nThe `Observer` trait specifies an abstract method `update()`, which will be implemented by the observers to handle the notifications.\n\nNext, let's define the `Subject` trait:\n\n```Scala\ntrait Subject {\n  private var observers: List[Observer] = List()\n\n  def register(observer: Observer): Unit =\n    if(!observers.contains(observer)){\n      observers = observer :: observers\n    }\n\n  def unregister(observer: Observer): Unit =\n    if(observers.contains(observer)){\n      observers = observers.filterNot(_ == observer)\n    }\n\n  def notifyObservers(): Unit =\n    observers.foreach(_.update())\n}\n```\n\nThe `Subject` trait maintains a list of observers and provides methods to register, unregister, and notify them. `register` adds an observer to the list, `unregister` removes an observer from the list, and `notifyObservers` notifies all observers by calling their `update` method.\n\nNext, let's define the scorecard case class:\n\n```Scala\ncase class Scorecard(var homeTeamScore: Int, var awayTeamScore: Int) extends Subject {\n  override def toString: String = s\"Home team: $homeTeamScore, Away team: $awayTeamScore\"\n\n  def updateScores(homeTeamScore: Int, awayTeamScore: Int): Unit ={\n    this.homeTeamScore = homeTeamScore\n    this.awayTeamScore = awayTeamScore\n    notifyObservers()\n  }\n}\n```\n\nThe `Scorecard` case class extends the `Subject` trait, which allows it to maintain a list of observers. The `updateScores` method updates the scorecard's internal state and then notifies the observers by calling the `notifyObservers` method.\n\nFinally, let's create the scoreboard, live commentary, and on-screen graphics classes that implement the `Observer` trait:\n\n```Scala\ncase class Scoreboard() extends Observer {\n  var homeTeamScore: Int = _\n  var awayTeamScore: Int = _\n\n  override def update(): Unit = println(s\"Scoreboard updated: Home team $homeTeamScore, Away team $awayTeamScore\")\n}\n\n\ncase class LiveCommentary() extends Observer {\n  var homeTeamScore: Int = _\n  var awayTeamScore: Int = _\n\n  override def update(): Unit = println(s\"Live commentary updated: Home team $homeTeamScore, Away team $awayTeamScore\")\n}\n\ncase class OnScreenGraphics() extends Observer {\n  var homeTeamScore: Int = _\n  var awayTeamScore: Int = _\n\n  override def update(): Unit = println(s\"On-screen graphics updated: Home team $homeTeamScore, Away team $awayTeamScore\")\n}\n```\n\nThe scoreboard, live commentary, and on-screen graphics classes implement the `update` method, which is called by the subject object when there is a change in the score. In this case, the implementation simply prints the updated scores to the console.\n\n## Usage\nLet's see the Observer Design Pattern in action:\n\n```Scala\nobject ObserverApp extends App {\n  val scorecard = Scorecard(0, 0)\n  val scoreboard = Scoreboard()\n  val liveCommentary = LiveCommentary()\n  val onScreenGraphics = OnScreenGraphics()\n\n  scorecard.register(scoreboard)\n  scorecard.register(liveCommentary)\n  scorecard.register(onScreenGraphics)\n\n  scorecard.updateScores(1, 0)\n  scorecard.unregister(onScreenGraphics)\n  scorecard.updateScores(1, 1)\n}\n```\n\nIn this example, we create a new `Scorecard` object with an initial score of 0-0. We then create a new `Scoreboard`, `LiveCommentary`, and `OnScreenGraphics` object, and register them as observers with the `Scorecard` object by calling the `register` method. We then update the score to 1-0 by calling the `updateScores` method on the `Scorecard` object, which triggers a notification to all observers. We then unregister the `OnScreenGraphics` object as an observer by calling the `unregister` method, and update the score to 1-1, which triggers a notification to the remaining observers.\n\n## Conclusion\nThe Observer Design Pattern is a powerful tool that can be used to model complex systems. In this post, we explored how to implement the Observer Pattern in Scala using traits and case classes. By using this pattern, we were able to cleanly separate the responsibilities between the subject and the observers, and facilitate communication between them."
    },
    "finish_reason": "stop",
    "index": 0
   }
  ]
 }
}
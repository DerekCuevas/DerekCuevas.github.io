{
 "prompt": [
  {
   "role": "user",
   "content": "You are the author of a personal technical blog about software engineering and computer science subjects."
  },
  {
   "role": "user",
   "content": "New topics for blog posts should be based off of the technical skills, experience, and interests presented in the following resume:\n+++\ntitle = \"Résumé\"\ndescription = \"Derek Cuevas' Résumé\"\ndate = \"2023-06-11\"\nor = \"Derek Cuevas\"\n+++\n\n# Derek Cuevas\n\n[GitHub](https://github.com/derekcuevas) (contact email in bio) \n\n---\n\n## Summary\n\nSenior Software Engineer with 8 years of professional experience, specializing in systems software engineering and low-latency, real-time product development.\n\nExperienced in leading teams and delivering Emmy award-winning projects. Passionate about functional programming and building high performance real-time systems. Skilled in a variety of programming languages and technologies with expertise in [Rust](https://www.rust-lang.org/) and [TypeScript](https://www.typescriptlang.org/).\n\n---\n\n## Programming Languages\n\n- **Proficient:** Rust, TypeScript (& JavaScript), Clojure, Elm\n- **Experienced:** Swift, Elixir, Objective-C, SQL\n\n---\n\n## Technologies, Skills, and Interests\n\n- **Rust:** Tokio, Futures, Hyper, Actix, Warp\n- **Platforms and Services:** AWS, Docker,  PostgreSQL, Redis, Apache Pulsar, RabbitMQ, Prometheus, GitLab CI/CD, Node.js, Deno, HTML & CSS\n- **Tooling:** Git, Vim, Bash\n- **Frameworks:** React, React Native, Redux, RxJs, SwiftUI, Phoenix\n- **Protocols:** HTTP, GraphQL, WebSockets, ØMQ, Pub/Sub, JSON, MessagePack, Protobuf, FlatBuffers\n- **Paradigms:** Functional Programming, Real-time Systems\n\n---\n\n## Professional Experience\n\n### Senior Software Engineer II (Lead), Second Spectrum (acquired by Genius Sports)\n(*January 2021 - Current*)\n\n[https://geniussports.com/](https://geniussports.com/)\n\n- Technical lead for the \"Real-time Augmentation Engine\" project's system team, developing low-latency and real-time augmented reality experiences for live TV broadcasters of sporting events.\n- Led the development and integration of core systems using `Rust`, `Tokio`, `MPSC channels`, `FFmpeg`, and `Pulsar`.\n- Oversaw operational management and monitoring systems, release management, simulation systems, and data ingestion/export pipelines.\n- Optimized the overall pipeline for 60fps real-time rendering over high definition broadcast feeds.\n- Key contributor to projects recognized with multiple Emmy awards, including the prestigious [George Wensel Technical Achievement Award](https://geniussports.com/customer-stories/cbs-and-genius-win-sports-emmy-for-romovision/) and Amazon's [Outstanding Interactive Experience](https://www.aboutamazon.com/news/entertainment/thursday-night-football-on-prime-video-wins-sports-emmy-award) at the `Sports Emmys`.\n\n### Senior Software Engineer I (Lead), Second Spectrum\n(*January 2019 - January 2021*)\n\n[https://www.secondspectrum.com/](https://www.secondspectrum.com/)\n\n- Led a team in designing and developing the company's first `GraphQL` service serving as a unified gateway for various microservices. Built upon the `Apollo` server framework leveraging `Node.js`, `TypeScript`, `PostgreSQL`, and `Redis` for caching and pub/sub.\n- Developed a dashboard built with `Three.js` for visualizing 3D player tracking datasets and highlighting data discrepancies.\n- Created a prototype `iOS` application for video highlights using `Swift`, `SwiftUI`, and the `Combine` framework.\n- Mentored interns and fellow engineers, fostering collaboration and knowledge sharing.\n\n### Software Engineer, Second Spectrum\n(*August 2016 - January 2019*)\n\n[https://www.secondspectrum.com/](https://www.secondspectrum.com/)\n\n- Developed the operational and quality assurance management application for the company's optical player tracking system. Stack included `Elixir` (with the `Phoenix` framework), `React`, and heavy use of `WebSockets` to sync and display corrections to operators in near real-time.\n- Improved operator efficiency by 100% through the implementation of an automated task selection system.\n- Led the development of the LA Clipper's live streaming web and mobile application \"Clippers CourtVision\". Stack included `Elm` for the web front-end and `React Native` for the mobile app.\n\n### Software Engineer Intern, MindGraph Medical\n(*September 2015 - January 2016*)\n\n- Designed, developed, and deployed the MindGraph Medical website using `Node.js`, `jQuery`, and `Bootstrap`.\n\n---\n\n## Education\n\n**B.S. Computer Science, San Diego State University, San Diego**\n\n(*Class of 2016*)\n\n- [Advanced Certificate in Web and Mobile Applications Development](https://cs.sdsu.edu/about/)\n\n---\n\n## Personal Projects\n\n- [FYGT](https://github.com/DerekCuevas/derekcuevas.github.io): An experimental blog built with `Hugo`, `Deno`, and `ChatGPT`.\n- [Advent of Code 2022](https://github.com/DerekCuevas/advent-of-code-2022): Solutions to Advent of Code programming problems using functional approaches in `Clojure`.\n- [Interview Cake Algorithms Problem Set](https://github.com/DerekCuevas/interview-cake-clj): Solutions to the interview cake programming problems also by exploring functional approaches in `Clojure`.\n- [Friend List](https://github.com/DerekCuevas/friend-list): A non-trivial programming challenge exploring asynchronous side effects with different programming patterns.\n- [Redux Meta Reducer](https://github.com/DerekCuevas/redux-meta-reducer): A `Redux` higher-order reducer for simplifying the state of fetched data.\n- [Avowal](https://github.com/DerekCuevas/avowal): An asynchronous form validation library for `JavaScript`.\n"
  },
  {
   "role": "user",
   "content": "Your previous 60 posts include: \"Advanced Techniques for Scaling Node.js Applications\", \"Implementing the Facade Design Pattern in Swift\", \"Building Efficient Mobile Apps with React Native Flexbox\", \"The Power of the Copy-on-Write Methodology\", \"Writing Correct Web3 Smart Contracts with Solidity's Concerned Oxide (SCOCO) Conventions\", \"Demystifying Rust's 'unwrap()' Method\", \"Mastering Rust's Pattern Matching\", \"The Power of Streams in Java\", \"Mastering C++17 Template Argument Deduction\", \"Mastering the Composite Design Pattern in C\", \"Implementing the Command Design Pattern in Kotlin\", \"Mastering the Observer Design Pattern in Rust\", \"Understanding Scala's Implicits: A Comprehensive Guide\", \"Mastering Terraform's State File\", \"Title:\", \"Mastering the Decorator Design Pattern in TypeScript\", \"Mastering the Decorator Pattern in Java\", \"The Fundamentals of Concurrency in Elixir\", \"Mastering the Singleton Design Pattern in Java\", \"Building a Scalable and Secure Authorization System with Keycloak\", \"A Deep Dive into Rust's Ownership Model\", \"Best Practices for Building a High-Performance Web Application with Node.js\", \"Generating Synthetic Data with Python's Faker Library\", \"Understanding Rust's Unsafe Keyword\", \"How to use Access Control in Go\", \"Building a High-Performance Event Store with Apache Kafka\", \"Building a Highly Scalable Kafka Consumer in Go\", \"Building Type-Safe APIs with TypeScript\", \"Implementing the Flyweight Design Pattern in C\", \"Gaining Insights from Large Datasets Using Delta Lake\", \"Using the Observer Design Pattern in Scala\", \"The Builder Design Pattern in TypeScript\", \"Using Array Partitions in Python for Improved Performance\", \"Advanced Techniques for Debugging Rust Programs\", \"Writing a Domain-Specific Language (DSL) in Haskell\", \"Securely Managing Secrets in Production Applications\", \"Implementing the Factory Method Design Pattern in Dart\", \"Boosting Rust Performance with Allocator Selection\", \"Building Real-Time Audio Applications with WebRTC and Rust\", \"Rust's Pinning API: A Comprehensive Guide\", \"Building a Highly Scalable and Fault-Tolerant Load Balancer with Rust\", \"How to Use AWS Fargate for Highly Scalable and Serverless Containers\", \"How to Build a Recommendation Engine with Apache Spark\", \"Building a Distributed Key-Value Store on Top of Apache Kafka\", \"Building a GraphQL API with Actix-Web and Diesel\", \"Building a High-Performance HTTP Proxy with Nginx\", \"How to Use Kafka to Build Scalable and Fault-Tolerant Distributed Systems\", \"Advanced Techniques for Using PostgreSQL JSONB Data Type\", \"Writing Secure Rust Code: A Deep Dive into Memory Safety\", \"Fine-tuning BERT for Question Answering - A Step-by-Step Guide\", \"How to Use the Decorator Pattern for Flexible and Extensible Code\", \"A Deep Dive into Multithreading with Clojure\", \"How to Design Reactive Microservices Using Event-Driven Architecture\", \"Writing Efficient SQL Queries: Tips and Tricks\", \"Mastering Connection Pooling in Django\", \"Mastering the Actor Model Concurrency Paradigm in Elixir\", \"How to use Elm to build maintainable, efficient, and bug-free front-end applications\", \"How to Use Generators to Create Infinite Sequences in Python\", \"Building High Performance Distributed Data Pipelines with Apache Flink\", \"Implementing a Consistent Hashing Algorithm in TypeScript\""
  },
  {
   "role": "user",
   "content": "Come up with an advanced topic for an expert level reader that is about a particular single feature, fact, pattern, paradigm, convention, theory, framework, library, or best practice."
  },
  {
   "role": "user",
   "content": "Write a post about the chosen topic following the instructions given below:"
  },
  {
   "role": "user",
   "content": "Your writing style is academic, informative, and focused on detailed technical information."
  },
  {
   "role": "user",
   "content": "The topic should not be related to a previous post."
  },
  {
   "role": "user",
   "content": "Use computer code snippets (in the relevant programming language) in order to illustrate the information presented."
  },
  {
   "role": "user",
   "content": "Format the body of the post in the markdown markup language."
  },
  {
   "role": "user",
   "content": "Come up with a title for the post and include it on the first line."
  },
  {
   "role": "user",
   "content": "Include one to three tags for the post on the second line formatted as a comma separated list, for example: \"Tags: <tag1>, <tag2>\"."
  },
  {
   "role": "user",
   "content": "The post should be multiple sections in length."
  },
  {
   "role": "user",
   "content": "Do not include links to images in the post."
  },
  {
   "role": "user",
   "content": "Do not include contact information in the post."
  },
  {
   "role": "user",
   "content": "Do not add extra whitespace around lists."
  }
 ],
 "completion": {
  "id": "chatcmpl-7WZSGBqNzsslRtDmkHhAfAOm1b6Sc",
  "object": "chat.completion",
  "created": 1687997140,
  "model": "gpt-3.5-turbo-0301",
  "choices": [
   {
    "index": 0,
    "message": {
     "role": "assistant",
     "content": "Title: Understanding the SOLID Principles of Object-Oriented Design\n\nTags: object-oriented programming, software engineering, SOLID principles\n\n## Introduction\n\nObject-oriented programming (OOP) is a popular paradigm used in developing software systems. OOP provides a clear and concise approach to designing complex systems and is highly maintainable. However, designing and implementing object-oriented software can be challenging and requires a strong understanding of the SOLID principles.\n\nThe SOLID principles provide a set of guidelines that help developers create robust, maintainable, and scalable code. In this post, we will cover each of the SOLID principles in detail and show how to apply these principles to write better code.\n\n## The SOLID Principles\n\n### Single Responsibility Principle (SRP)\n\nThe first SOLID principle is the Single Responsibility Principle (SRP). The SRP states that a class should have only one reason to change. In other words, every class should have a single responsibility or purpose.\n\nFor example, let's consider a class called `User` that has both user authentication and user management responsibilities. This violates the SRP because changes to the authentication logic could affect the user management functionality and vice versa.\n\nA better approach is to separate the authentication logic into its own class and leave the user management responsibility to the `User` class. This way, changes to one responsibility don't affect the other.\n\n```java\n// Violates SRP\n\npublic class User {\n  public boolean authenticate(String username, String password) {\n    // Authenticate user\n  }\n\n  public void createUser(String username, String password) {\n    // Create user\n  }\n}\n\n// Applies SRP\n\npublic class UserAuthenticator {\n  public boolean authenticate(String username, String password) {\n    // Authenticate user\n  }\n}\n\npublic class User {\n  public void createUser(String username, String password) {\n    // Create user\n  }\n}\n```\n\n### Open-Closed Principle (OCP)\n\nThe Open-Closed Principle (OCP) states that software entities (classes, modules, functions, etc.) should be open for extension but closed for modification. In other words, we should be able to extend the behavior of a class without modifying its existing code.\n\nA simple example is adding a new method to an existing class. We can do this without modifying the class by using inheritance, interfaces, or composition.\n\n```java\npublic interface Animal {\n  void speak();\n}\n\npublic class Dog implements Animal {\n  public void speak() {\n    System.out.println(\"Woof!\");\n  }\n}\n\npublic interface Trick {\n  void doTrick();\n}\n\npublic class RollOver implements Trick {\n  public void doTrick() {\n    System.out.println(\"Roll Over!\");\n  }\n}\n\n// Extends behavior without modifying existing code\n\npublic class TrickDog implements Animal, Trick {\n  private final Animal animal;\n  private final Trick trick;\n\n  public TrickDog(Animal animal, Trick trick) {\n    this.animal = animal;\n    this.trick = trick;\n  }\n\n  public void speak() {\n    animal.speak();\n  }\n\n  public void doTrick() {\n    trick.doTrick();\n  }\n}\n```\n\n### Liskov Substitution Principle (LSP)\n\nThe Liskov Substitution Principle (LSP) states that objects of a subclass should be substitutable for the base class without altering the correctness of the program. In other words, we should be able to use a subclass in place of its parent class without any issues.\n\nA simple example is a class hierarchy of shapes. A `Rectangle` class can be a subclass of a `Shape` class, and a `Square` class can also be a subclass of a `Shape` class. However, if we try to treat a `Square` object as a `Rectangle` object (e.g. by modifying its width or height), the LSP is violated because the `Square` object is not substitutable for the `Rectangle` object.\n\n```java\n// Violates LSP\n\npublic class Rectangle {\n  private int width;\n  private int height;\n\n  public void setWidth(int width) {\n    this.width = width;\n  }\n\n  public void setHeight(int height) {\n    this.height = height;\n  }\n\n  public int area() {\n    return width * height;\n  }\n}\n\npublic class Square extends Rectangle {\n  public void setWidth(int width) {\n    super.setWidth(width);\n    super.setHeight(width);\n  }\n\n  public void setHeight(int height) {\n    super.setWidth(height);\n    super.setHeight(height);\n  }\n}\n\n// Applies LSP\n\npublic interface Shape {\n  int area();\n}\n\npublic class Rectangle implements Shape {\n  private int width;\n  private int height;\n\n  public Rectangle(int width, int height) {\n    this.width = width;\n    this.height = height;\n  }\n\n  public int area() {\n    return width * height;\n  }\n}\n\npublic class Square implements Shape {\n  private int side;\n\n  public Square(int side) {\n    this.side = side;\n  }\n\n  public int area() {\n    return side * side;\n  }\n}\n```\n\n### Interface Segregation Principle (ISP)\n\nThe Interface Segregation Principle (ISP) states that classes should not be forced to depend on interfaces they don't use. In other words, we should only implement the methods we need in an interface instead of implementing all the methods in a single interface.\n\nA good example is a `Printable` interface that has a `print()` method. If we have a class that only needs to print to a file, we don't need to implement the `print()` method that prints to a screen.\n\n```java\n// Violates ISP\n\npublic interface Printable {\n  void print();\n\n  // Unnecessary method for some classes\n  void printToScreen();\n}\n\npublic class FilePrinter implements Printable {\n  public void print() {\n    // Print to file\n  }\n\n  public void printToScreen() {\n    // Not needed for FilePrinter class\n  }\n}\n\n// Applies ISP\n\npublic interface Printable {\n  void print();\n}\n\npublic interface ScreenPrintable {\n  void printToScreen();\n}\n\npublic class FilePrinter implements Printable {\n  public void print() {\n    // Print to file\n  }\n}\n\npublic class ScreenPrinter implements ScreenPrintable {\n  public void printToScreen() {\n    // Print to screen\n  }\n}\n```\n\n### Dependency Inversion Principle (DIP)\n\nThe Dependency Inversion Principle (DIP) states that high-level modules should not depend on low-level modules but should depend on abstractions. In other words, we should program against interfaces, not implementations.\n\nA common example is a `UserService` class that depends on a `Database` class to retrieve user data. If we program against the `Database` class directly, changing the implementation from SQLite to MongoDB would require changing all the references to the `Database` class. However, if we define an interface for the `Database` class and program against the interface, we can switch implementations without changing any references.\n\n```java\n// Violates DIP\n\npublic class UserService {\n  private final Database database;\n\n  public UserService(Database database) {\n    this.database = database;\n  }\n\n  public User getUser(int id) {\n    return database.getUser(id);\n  }\n}\n\npublic class Database {\n  public User getUser(int id) {\n    // Retrieve user from database\n  }\n}\n\n// Applies DIP\n\npublic interface Database {\n  User getUser(int id);\n}\n\npublic class UserService {\n  private final Database database;\n\n  public UserService(Database database) {\n    this.database = database;\n  }\n\n  public User getUser(int id) {\n    return database.getUser(id);\n  }\n}\n\npublic class SQLiteDatabase implements Database {\n  public User getUser(int id) {\n    // Retrieve user from SQLite database\n  }\n}\n\npublic class MongoDB implements Database {\n  public User getUser(int id) {\n    // Retrieve user from MongoDB\n  }\n}\n```\n\n## Conclusion\n\nThe SOLID principles provide a set of guidelines that help developers create robust, maintainable, and scalable code. By applying SRP, OCP, LSP, ISP, and DIP, developers can create loosely coupled, modular, and extensible software systems.\n\nWhile it may seem daunting to apply these principles to every aspect of your codebase, following these principles can pay off in the long run by reducing technical debt and improving overall code quality. Start small and apply these principles to new code, and eventually, you'll build a codebase that is highly maintainable and scalable."
    },
    "finish_reason": "stop"
   }
  ],
  "usage": {
   "prompt_tokens": 2231,
   "completion_tokens": 1717,
   "total_tokens": 3948
  }
 }
}
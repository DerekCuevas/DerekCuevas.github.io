{
 "prompt": [
  {
   "role": "system",
   "content": "You are the author of a personal technical blog about software engineering and computer science subjects."
  },
  {
   "role": "system",
   "content": "Write as though you are the author of this resume:\n+++\ntitle = \"Résumé\"\ndescription = \"Derek Cuevas' Résumé\"\ndate = \"2023-06-11\"\nor = \"Derek Cuevas\"\n+++\n\n# Derek Cuevas\n\nSenior Software Engineer | [GitHub](https://github.com/derekcuevas) (contact email in bio) \n\n---\n\n## Summary\n\nSenior Software Engineer with 8 years of professional experience, specializing in systems software engineering and low-latency, real-time product development.\n\nExperienced in leading teams and delivering Emmy award-winning projects. Passionate about functional programming and building high performance real-time systems. Skilled in a variety of programming languages and technologies with expertise in [Rust](https://www.rust-lang.org/) and [TypeScript](https://www.typescriptlang.org/).\n\n---\n\n## Programming Languages\n\n- **Proficient:** Rust, TypeScript (& JavaScript), Elm, Clojure\n- **Experienced:** Elixir, Swift, Objective-C, SQL\n\n---\n\n## Technologies, Skills, and Interests\n\n- **Rust:** Tokio, Futures, Hyper, Actix, Warp\n- **Platforms and Services:** AWS, Docker,  PostgreSQL, Redis, Apache Pulsar, RabbitMQ, Prometheus, GitLab CI/CD, Node.js, Deno, HTML & CSS\n- **Tooling:** Git, Vim, Bash\n- **Frameworks:** React, React Native, Redux, RxJs, SwiftUI, Phoenix\n- **Protocols:** HTTP, GraphQL, WebSockets, ØMQ, Pub/Sub, JSON, MessagePack, Protobuf, FlatBuffers\n- **Paradigms:** Functional Programming, Real-time Systems\n\n---\n\n## Professional Experience\n\n### Senior Software Engineer II (Lead), Second Spectrum (acquired by Genius Sports)\n(*January 2021 - Current*)\n\n[https://geniussports.com/](https://geniussports.com/)\n\n- Technical lead for the \"Real-time Augmentation Engine\" project's system team, developing low-latency and real-time augmented reality experiences for live TV broadcasters of sporting events.\n- Led the development and integration of core systems using `Rust`, `Tokio`, `MPSC channels`, `FFmpeg`, and `Pulsar`.\n- Oversaw operational management and monitoring systems, release management, simulation systems, and data ingestion/export pipelines.\n- Optimized the overall pipeline for 60fps real-time rendering over high definition broadcast feeds.\n- Key contributor to projects recognized with multiple Emmy awards, including the prestigious [George Wensel Technical Achievement Award](https://geniussports.com/customer-stories/cbs-and-genius-win-sports-emmy-for-romovision/) and Amazon's [Outstanding Interactive Experience](https://www.aboutamazon.com/news/entertainment/thursday-night-football-on-prime-video-wins-sports-emmy-award) at the `Sports Emmys`.\n\n### Senior Software Engineer I (Lead), Second Spectrum\n(*January 2019 - January 2021*)\n\n[https://www.secondspectrum.com/](https://www.secondspectrum.com/)\n\n- Led a team in designing and developing the company's first `GraphQL` service serving as a unified gateway for various microservices. Built upon the `Apollo` server framework leveraging `Node.js`, `TypeScript`, `PostgreSQL`, and `Redis` for caching and pub/sub.\n- Developed a dashboard built with `Three.js` for visualizing 3D player tracking datasets and highlighting data discrepancies.\n- Created a prototype `iOS` application for video highlights using `Swift`, `SwiftUI`, and the `Combine` framework.\n- Mentored interns and fellow engineers, fostering collaboration and knowledge sharing.\n\n### Software Engineer, Second Spectrum\n(*August 2016 - January 2019*)\n\n[https://www.secondspectrum.com/](https://www.secondspectrum.com/)\n\n- Developed the operational and quality assurance management application for the company's optical player tracking system. Stack included `Elixir` (with the `Phoenix` framework), `React`, and heavy use of `WebSockets` to sync and display corrections to operators in near real-time.\n- Improved operator efficiency by 100% through the implementation of an automated task selection system.\n- Led the development of the LA Clipper's live streaming web and mobile application \"Clippers CourtVision\". Stack included `Elm` for the web front-end and `React Native` for the mobile app.\n\n### Software Engineer Intern, MindGraph Medical\n(*September 2015 - January 2016*)\n\n- Designed, developed, and deployed the MindGraph Medical website using `Node.js`, `jQuery`, and `Bootstrap`.\n\n---\n\n## Education\n\n**B.S. Computer Science, San Diego State University, San Diego**\n\n(*Class of 2016*)\n\n- [Advanced Certificate in Web and Mobile Applications Development](https://cs.sdsu.edu/about/)\n\n---\n\n## Personal Projects\n\n- [FYGT](https://github.com/DerekCuevas/derekcuevas.github.io): An experimental blog built with `Hugo`, `Deno`, and `ChatGPT`.\n- [Advent of Code 2022](https://github.com/DerekCuevas/advent-of-code-2022): Solutions to Advent of Code programming problems using functional approaches in `Clojure`.\n- [Interview Cake Algorithms Problem Set](https://github.com/DerekCuevas/interview-cake-clj): Solutions to the interview cake programming problems also by exploring functional approaches in `Clojure`.\n- [Friend List](https://github.com/DerekCuevas/friend-list): A non-trivial programming challenge exploring asynchronous side effects with different programming patterns.\n- [Redux Meta Reducer](https://github.com/DerekCuevas/redux-meta-reducer): A `Redux` higher-order reducer for simplifying the state of fetched data.\n- [Avowal](https://github.com/DerekCuevas/avowal): An asynchronous form validation library for `JavaScript`.\n"
  },
  {
   "role": "system",
   "content": "New topics for the blog should be based off of the technical skills, experience, and interests presented in the resume."
  },
  {
   "role": "system",
   "content": "Your previous 40 posts include: \"Building Real-Time Audio Applications with WebRTC and Rust\", \"Rust's Pinning API: A Comprehensive Guide\", \"Building a Highly Scalable and Fault-Tolerant Load Balancer with Rust\", \"How to Use AWS Fargate for Highly Scalable and Serverless Containers\", \"How to Build a Recommendation Engine with Apache Spark\", \"Building a Distributed Key-Value Store on Top of Apache Kafka\", \"Building a GraphQL API with Actix-Web and Diesel\", \"Building a High-Performance HTTP Proxy with Nginx\", \"How to Use Kafka to Build Scalable and Fault-Tolerant Distributed Systems\", \"Advanced Techniques for Using PostgreSQL JSONB Data Type\", \"Writing Secure Rust Code: A Deep Dive into Memory Safety\", \"Fine-tuning BERT for Question Answering - A Step-by-Step Guide\", \"How to Use the Decorator Pattern for Flexible and Extensible Code\", \"A Deep Dive into Multithreading with Clojure\", \"How to Design Reactive Microservices Using Event-Driven Architecture\", \"Writing Efficient SQL Queries: Tips and Tricks\", \"Mastering Connection Pooling in Django\", \"Mastering the Actor Model Concurrency Paradigm in Elixir\", \"How to use Elm to build maintainable, efficient, and bug-free front-end applications\", \"How to Use Generators to Create Infinite Sequences in Python\", \"Building High Performance Distributed Data Pipelines with Apache Flink\", \"Implementing a Consistent Hashing Algorithm in TypeScript\", \"The Event Sourcing Design Pattern in TypeScript\", \"How to Write Fast Python Code\", \"Building a High-Availability Microservice Architecture with Modern C++\", \"How to Build a Realtime Collaborative Spreadsheet Application with Elixir and Phoenix LiveView\", \"Using the Adapter Pattern to Integrate Legacy Code\", \"Building a Highly Scalable and Performant GraphQL API with Sangria\", \"Building Robust Elixir Back-End APIs with Phoenix Contexts\", \"Building real-time collaborative web apps with Operational Transformation\", \"Mastering Rust's Standard Library Function `mem::forget()`\", \"Build a Scalable, Maintainable, and Performant Full-Text Search System for Your Application with Elasticsearch\", \"Mastering Clojure's Reducers\", \"How to Use Swift's Result Type for Error Handling\", \"Mastering Rust Ownership Rules and Borrowing Rules for Type-Safe and Performant Programs\", \"Projecting Elixir's Enum Module into Batches\", \"Mastering Browser Storage in TypeScript\", \"Mastering Rust's `std::env::args_os()`\", \"Building Composable, Scalable, and Reusable Redux Reducers\", \"Exploring Rust's `mem::replace()` Function\""
  },
  {
   "role": "system",
   "content": "Your writing style is concise, to the point, informative, and focused on detailed technical information."
  },
  {
   "role": "user",
   "content": "Come up with an advanced topic for an expert level reader that is about a particular single feature, fact, pattern, paradigm, convention, theory, framework, library, or best practice."
  },
  {
   "role": "user",
   "content": "The topic should not be related to a previous post."
  },
  {
   "role": "user",
   "content": "Write a post about the topic following the rules defined."
  },
  {
   "role": "user",
   "content": "Use computer code snippets (in the relevant programming language) in order to illustrate the information presented."
  },
  {
   "role": "user",
   "content": "Format the body of the post in the markdown markup language."
  },
  {
   "role": "user",
   "content": "Include the title of the post on the first line."
  },
  {
   "role": "user",
   "content": "Include one to three tags for the post on the second line formatted as a comma separated list, for example: \"Tags: <tag1>, <tag2>\"."
  },
  {
   "role": "user",
   "content": "Do not include or link to images in the post."
  },
  {
   "role": "user",
   "content": "The post should be multiple sections in length and come to a complete finish."
  }
 ],
 "completion": {
  "id": "chatcmpl-7QPUKfMVC1PFgr8PipAkmOsA5VPNy",
  "object": "chat.completion",
  "created": 1686528860,
  "model": "gpt-3.5-turbo-0301",
  "usage": {
   "prompt_tokens": 2073,
   "completion_tokens": 957,
   "total_tokens": 3030
  },
  "choices": [
   {
    "message": {
     "role": "assistant",
     "content": "Title: Boosting Rust Performance with Allocator Selection\n\nTags: Rust, Performance, Memory Allocation\n\n---\n\nRust is a systems programming language that values performance and efficiency. One of the key aspects of performance in Rust is memory allocation, which can sometimes be a bottleneck for application speed. Choosing the right allocator implementation for a program can greatly improve its performance.\n\nIn this post, we’ll cover how to select and configure allocators in Rust for optimal performance.\n\n## Understanding Rust’s Allocators\n\nIn Rust, allocations occur when you create an object on the heap. By default, Rust uses the jemalloc allocator for running Rust programs. jemalloc provides the fastest and most efficient memory allocation for Rust. However, if you want to further optimize the memory allocation in Rust, you can choose other allocator implementations.\n\nRust has several built-in allocator implementations, including `system`, `wee_alloc`, and `jemalloc`. Additionally, Rust allows third-party allocators by using crates such as `mimalloc` and `tcmalloc` that provide performance advantages in specific use cases.\n\nLet's take a look at the built-in allocator implementations and their usage.\n\n### System Allocator\n\nRust’s `system` allocator is the default allocator implementation. It is a thin wrapper around the underlying system allocator. This allocator is used when no other allocator is provided. It's not the most performant allocator for most use cases but it is a good fit for small programs.\n\n### Wee Allocator\n\nRust’s `wee_alloc` allocator implementation is minimal and very small in size. It is the smallest possible allocator implementation, and its main use case is for applications with small footprint.\n\n### Jemalloc Allocator\n\nRust’s `jemalloc` allocator implementation is the fastest and most efficient allocator implementation. It's also the default allocator implementation for Rust. It can be used in almost all use cases and provides excellent speed and fragmentation when handling large memory allocations.\n\nBy choosing jemalloc, it is possible to reduce memory fragmentation and improve performance, particularly in cases where a program makes many small allocations and deallocations. It is easy to use and requires minimal configuration since it is already included in the Rust standard library.\n\n## Using Third-Party Allocators in Rust\n\nWhile Rust’s built-in allocators are powerful, there are also many third-party allocator crates that are optimized for specific use cases. These crates provide functionality beyond the built-ins, with performance optimizations tailored to your program's needs, resulting in improved performance.\n\nTwo widely-used third-party allocators are `mimalloc` and `tcmalloc`.\n\n### Mimalloc\n\n`mimalloc` is a memory allocator that was originally developed for use with the Zig programming language. However, since Rust is also a systems programming language, it is a good fit for Rust as well. `mimalloc` is highly optimized for multi-threaded workloads and large memory allocations.\n\nTo use `mimalloc` with Rust, add the following line to your `Cargo.toml` file:\n\n```toml\n[dependencies]\nmimalloc = \"0.1\"\n```\n\nThen, add the following lines to your Rust program:\n\n```rust\n#[global_allocator]\nstatic GLOBAL: mimalloc::MiMalloc = mimalloc::MiMalloc;\n```\n\nBy doing so, you’ve instructed Rust to use the `mimalloc` allocator for all memory allocations.\n\n### Tcmalloc\n\n`tcmalloc` is another high-performance allocator, originally developed by Google and used extensively in Google projects. It provides excellent performance in high-throughput and multi-threaded workloads, as well as in large memory allocations. `tcmalloc` is perfect for programs that consist of long-running processes and that require high-performance and low memory fragmentation.\n\nTo use `tcmalloc` with Rust, add the following line to your `Cargo.toml` file:\n\n```toml\n[dependencies]\ntcmalloc = \"0.1\"\n```\n\nThen, add the following lines to your Rust program:\n\n```rust\n#[global_allocator]\nstatic GLOBAL: tcmalloc::TCMalloc = tcmalloc::TCMalloc;\n```\n\nBy doing so, you’ve instructed Rust to use the `tcmalloc` allocator for all memory allocations.\n\n## Conclusion\n\nBy selecting the right allocator implementation and its corresponding configuration, we can greatly improve the memory allocation performance of our Rust programs. It is often worthwhile to evaluate and compare different allocator implementations and their performance characteristics to determine the ideal configuration for our program.\n\nAdditionally, Rust allows for easy management of allocators using `#[global_allocator]` and choosing third-party allocators using Cargo. These facilites in Rust give us great flexibility in choosing the best allocator implementation for our needs."
    },
    "finish_reason": "stop",
    "index": 0
   }
  ]
 }
}
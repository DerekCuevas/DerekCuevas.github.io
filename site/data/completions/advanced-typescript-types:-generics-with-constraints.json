{
 "prompt": [
  {
   "role": "system",
   "content": "You are the author of a personal technical blog about software engineering and computer science subjects."
  },
  {
   "role": "system",
   "content": "Write as though you are the author of this resume:\n+++\ntitle = \"Résumé\"\ndescription = \"Derek Cuevas's Résumé\"\ndate = \"2023-05-20\"\nauthor = \"Derek Cuevas\"\n+++\n\nSenior Software Engineering Tech Lead with 8 years of professional experience building full stack applications and highly available, performance critical, realtime systems and services.\n\n## Programming Languages\n\n- Rust\n- TypeScript\n- Elm\n- Swift\n- Elixir\n- Clojure\n- SQL\n- HTML & CSS\n\n## Technologies, Skills, and Interests\n\n- **Paradigms:** Functional Programming, Realtime Systems, Distributed Systems, Data Structures, Algorithms\n- **Rust:** Futures, Async/Await, Tokio, Hyper, Actix, MPSC Channels, Serde\n- **Protocols:** HTTP, GraphQL, WebSockets, TCP, HLS, DASH, ZMQ, Flatbuffers, Protobuf, MsgPack, JSON\n- **Services:** Node.js, AWS (S3, EC2, SQS, ect.), PostgreSQL, Redis, Pulsar, RabbitMQ\n- **Frameworks:** React, React Native, Redux, RxJs, SwiftUI\n- **Tooling:** Git, Vim, Docker, Bash\n"
  },
  {
   "role": "system",
   "content": "New topics for the blog should be based off of the technical skills, experience, and interests presented in the resume."
  },
  {
   "role": "system",
   "content": "Your previous 20 posts include: \"How to Build a Real-time Chat Application: A Comprehensive Tutorial with Node.js, WebSocket, and Redis\", \"How to Use Redis for Fast and Scalable Caching in Node.js\", \"RESTful API Design Best Practices: A Comprehensive Guide to Creating Robust and Scalable APIs\", \"A Beginner's Guide to Functional Programming in JavaScript\", \"A Deep Dive into Rust's Unsafe Operations\", \"Building High-Performance Parallel Applications with Rust's Rayon Library\", \"Exploring React Native Animations: An Advanced Guide\", \"How to Optimize React Native Performance\", \"Building Realtime Web Apps with Clojure and WebSockets\", \"How to Use Clojure to Build a High-Performance, Distributed System\", \"Building a High-Performance Streaming System with Rust\", \"A Comprehensive Guide to Building High-Performance, Distributed Systems with Elixir\", \"Building a High-Performance Real-Time Analytics Dashboard with Rust and PostgreSQL\", \"Writing Rust Macros: A Comprehensive Guide\", \"Efficient Pattern Matching with Rust\", \"Securely Storing Secrets in Rust\", \"How to Write High Performance Elm Code with the Help of Web Workers\", \"The Ultimate Guide to Building and Optimizing GraphQL APIs with Node.js\", \"Building High-Performance Reactive Applications with Rust and Tokio\", \"Mastering GraphQL's Execution Phase with Node.js, TypeScript, and TypeGraphQL\""
  },
  {
   "role": "system",
   "content": "Your writing style is concise, informative, and focused on detailed technical information."
  },
  {
   "role": "user",
   "content": "Come up with an advanced topic for an expert level reader. Ensure that the topic is not related to a previous post. Write a post about the topic following the rules defined."
  },
  {
   "role": "user",
   "content": "Use computer code snippets (in the relevant programming language) in order to illustrate the information presented."
  },
  {
   "role": "user",
   "content": "Explain information and details in the post step by step."
  },
  {
   "role": "user",
   "content": "Format the body of the post in the markdown markup language."
  },
  {
   "role": "user",
   "content": "Include the title of the post on the first line."
  },
  {
   "role": "user",
   "content": "Include one to three tags for the post on the second line formatted as a comma separated list, for example: \"Tags: <tag1>, <tag2>\"."
  },
  {
   "role": "user",
   "content": "Do not include images in the post."
  },
  {
   "role": "user",
   "content": "The post should be multiple sections in length and come to a complete finish."
  }
 ],
 "completion": {
  "id": "chatcmpl-7KKoKf7pTut8qyp1PJBvA7nGLgGx9",
  "object": "chat.completion",
  "created": 1685080912,
  "model": "gpt-3.5-turbo-0301",
  "usage": {
   "prompt_tokens": 810,
   "completion_tokens": 680,
   "total_tokens": 1490
  },
  "choices": [
   {
    "message": {
     "role": "assistant",
     "content": "Title: Advanced TypeScript types: Generics with constraints\n\nTags: TypeScript, Generics, Type Constraints\n\nTypeScript is a powerful tool that provides us with various type safety benefits and improvements over JavaScript. Generics are one of the most important TypeScript features and allow developers to write more flexible and reusable code. In this post, we will explore an advanced feature of TypeScript generics: Generic type constraints. We will learn how they work, how and when to use them in our code, and what benefits they provide.\n\n## Introduction\n\nGenerics are used to create reusable components that can work with any type. In TypeScript, it allows us to write reusable code and provides compile-time type safety as we can define types of generic classes, functions, and interfaces at the time of using them. However, sometimes we may want to restrict the types of generic parameters that are allowed. This is where generic type constraints come in.\n\n## Generic type constraints\n\nTypeScript allows us to specify constraints on generic type parameters for functions and classes. This can be done using the `extends` keyword followed by the name of the type or interface we wish to use as a constraint:\n\n```typescript\nfunction logInfo<T extends {name: string, age: number}>(person: T): string {\n  return `${person.name} is ${person.age} years old.`;\n}\n\n\ntype Person = {\n  name: string,\n  age: number,\n  email: string\n}\n\nconst john: Person = {\n  name: 'John',\n  age: 25,\n  email: 'john@example.com'\n}\n\nlogInfo(john); // okay\nlogInfo({ name: 'Jane', age: 22 }); // compile-time error\n```\n\nIn this example, we have defined a generic function `logInfo` that takes an object of a generic type `T` which must have a property `name` which is of type string and a property `age` which is of type `number`. The `extends` keyword followed by the constraint `{name: string, age: number}` enforces the shape of the object passed to the function. As a result, if we pass an object that does not conform to the constraint, TypeScript will give us a compile-time error. \n\n## Benefits of using type constraints\n\nGeneric type constraints provide developers with several benefits:\n\n### Better Types\n\nUsing generic type constraints gives us more information about the types of the variables and parameters in our code. This helps us to catch errors earlier and makes our code more robust. \n\n### Type Safety\n\nBy enforcing type constraints, we can create more type-safe code, dramatically reducing the likelihood of runtime errors. This is especially useful when working with dynamic APIs or data structures.\n\n### Code Reusability\n\nGeneric type constraints can be used to write code that is more reusable. They allow us to write functions and classes that can work with any type that meets the constraints, which results in fewer lines of code and less repetition. \n\n## Conclusion\n\nIn this post, we have explored the concept of generic type constraints in TypeScript. We have learned what they are, how they work, their benefits, and how to use them in our code. We saw how generic type constraints can help us write more robust, reusable, and type-safe code. These features are particularly useful in large and complex TypeScript projects, where type safety and maintainability are critical."
    },
    "finish_reason": "stop",
    "index": 0
   }
  ]
 }
}